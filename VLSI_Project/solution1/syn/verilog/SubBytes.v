// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SubBytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_0_0_read,
        state_0_1_read,
        state_0_2_read,
        state_0_3_read,
        state_1_0_read,
        state_1_1_read,
        state_1_2_read,
        state_1_3_read,
        state_2_0_read,
        state_2_1_read,
        state_2_2_read,
        state_2_3_read,
        state_3_0_read,
        state_3_1_read,
        state_3_2_read,
        state_3_3_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] state_0_0_read;
input  [7:0] state_0_1_read;
input  [7:0] state_0_2_read;
input  [7:0] state_0_3_read;
input  [7:0] state_1_0_read;
input  [7:0] state_1_1_read;
input  [7:0] state_1_2_read;
input  [7:0] state_1_3_read;
input  [7:0] state_2_0_read;
input  [7:0] state_2_1_read;
input  [7:0] state_2_2_read;
input  [7:0] state_2_3_read;
input  [7:0] state_3_0_read;
input  [7:0] state_3_1_read;
input  [7:0] state_3_2_read;
input  [7:0] state_3_3_read;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [2:0] i_fu_403_p2;
reg   [2:0] i_reg_934;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln265_fu_409_p1;
reg   [1:0] trunc_ln265_reg_939;
wire   [0:0] icmp_ln261_fu_397_p2;
wire   [2:0] j_fu_515_p2;
reg   [2:0] j_reg_963;
wire    ap_CS_fsm_state3;
reg   [7:0] state_3_3_0_load_1_reg_968;
wire   [0:0] icmp_ln263_fu_509_p2;
reg   [7:0] state_3_2_0_load_1_reg_975;
reg   [7:0] state_3_1_0_load_1_reg_982;
reg   [7:0] state_3_0_0_load_1_reg_989;
reg   [7:0] state_2_3_0_load_1_reg_996;
reg   [7:0] state_2_2_0_load_1_reg_1003;
reg   [7:0] state_2_1_0_load_1_reg_1010;
reg   [7:0] state_2_0_0_load_1_reg_1017;
reg   [7:0] state_1_3_0_load_1_reg_1024;
reg   [7:0] state_1_2_0_load_1_reg_1031;
reg   [7:0] state_1_1_0_load_1_reg_1038;
reg   [7:0] state_1_0_0_load_1_reg_1045;
reg   [7:0] state_0_3_0_load_1_reg_1052;
reg   [7:0] state_0_2_0_load_1_reg_1059;
reg   [7:0] state_0_1_0_load_1_reg_1066;
reg   [7:0] state_0_0_0_load_1_reg_1073;
wire   [1:0] trunc_ln265_1_fu_521_p1;
reg   [1:0] trunc_ln265_1_reg_1080;
reg   [2:0] i_0_reg_247;
reg   [2:0] j_0_reg_258;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln265_1_fu_574_p1;
reg   [7:0] state_3_3_0_fu_74;
wire   [7:0] state_3_3_3_fu_759_p6;
reg   [7:0] state_3_2_0_fu_78;
wire   [7:0] state_3_2_3_fu_769_p6;
reg   [7:0] state_3_1_0_fu_82;
wire   [7:0] state_3_1_3_fu_779_p6;
reg   [7:0] state_3_0_0_fu_86;
wire   [7:0] state_3_0_3_fu_789_p6;
reg   [7:0] state_2_3_0_fu_90;
wire   [7:0] state_2_3_3_fu_579_p6;
reg   [7:0] state_2_2_0_fu_94;
wire   [7:0] state_2_2_3_fu_589_p6;
reg   [7:0] state_2_1_0_fu_98;
wire   [7:0] state_2_1_3_fu_599_p6;
reg   [7:0] state_2_0_0_fu_102;
wire   [7:0] state_2_0_3_fu_609_p6;
reg   [7:0] state_1_3_0_fu_106;
wire   [7:0] state_1_3_3_fu_639_p6;
reg   [7:0] state_1_2_0_fu_110;
wire   [7:0] state_1_2_3_fu_649_p6;
reg   [7:0] state_1_1_0_fu_114;
wire   [7:0] state_1_1_3_fu_659_p6;
reg   [7:0] state_1_0_0_fu_118;
wire   [7:0] state_1_0_3_fu_669_p6;
reg   [7:0] state_0_3_0_fu_122;
wire   [7:0] state_0_3_3_fu_699_p6;
reg   [7:0] state_0_2_0_fu_126;
wire   [7:0] state_0_2_3_fu_709_p6;
reg   [7:0] state_0_1_0_fu_130;
wire   [7:0] state_0_1_3_fu_719_p6;
reg   [7:0] state_0_0_0_fu_134;
wire   [7:0] state_0_0_3_fu_729_p6;
wire   [3:0] tmp_2_fu_525_p3;
wire   [4:0] tmp_1_fu_536_p17;
wire   [7:0] tmp_1_fu_536_p18;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

SubBytes_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

Cipher_mux_165_8_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
Cipher_mux_165_8_bkb_U34(
    .din0(state_0_0_0_fu_134),
    .din1(state_0_1_0_fu_130),
    .din2(state_0_2_0_fu_126),
    .din3(state_0_3_0_fu_122),
    .din4(state_1_0_0_fu_118),
    .din5(state_1_1_0_fu_114),
    .din6(state_1_2_0_fu_110),
    .din7(state_1_3_0_fu_106),
    .din8(state_2_0_0_fu_102),
    .din9(state_2_1_0_fu_98),
    .din10(state_2_2_0_fu_94),
    .din11(state_2_3_0_fu_90),
    .din12(state_3_0_0_fu_86),
    .din13(state_3_1_0_fu_82),
    .din14(state_3_2_0_fu_78),
    .din15(state_3_3_0_fu_74),
    .din16(tmp_1_fu_536_p17),
    .dout(tmp_1_fu_536_p18)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U35(
    .din0(state_2_3_0_load_1_reg_996),
    .din1(state_2_3_0_load_1_reg_996),
    .din2(state_2_3_0_load_1_reg_996),
    .din3(sbox_q0),
    .din4(trunc_ln265_reg_939),
    .dout(state_2_3_3_fu_579_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U36(
    .din0(state_2_2_0_load_1_reg_1003),
    .din1(state_2_2_0_load_1_reg_1003),
    .din2(sbox_q0),
    .din3(state_2_2_0_load_1_reg_1003),
    .din4(trunc_ln265_reg_939),
    .dout(state_2_2_3_fu_589_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U37(
    .din0(state_2_1_0_load_1_reg_1010),
    .din1(sbox_q0),
    .din2(state_2_1_0_load_1_reg_1010),
    .din3(state_2_1_0_load_1_reg_1010),
    .din4(trunc_ln265_reg_939),
    .dout(state_2_1_3_fu_599_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U38(
    .din0(sbox_q0),
    .din1(state_2_0_0_load_1_reg_1017),
    .din2(state_2_0_0_load_1_reg_1017),
    .din3(state_2_0_0_load_1_reg_1017),
    .din4(trunc_ln265_reg_939),
    .dout(state_2_0_3_fu_609_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U39(
    .din0(state_1_3_0_load_1_reg_1024),
    .din1(state_1_3_0_load_1_reg_1024),
    .din2(state_1_3_0_load_1_reg_1024),
    .din3(sbox_q0),
    .din4(trunc_ln265_reg_939),
    .dout(state_1_3_3_fu_639_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U40(
    .din0(state_1_2_0_load_1_reg_1031),
    .din1(state_1_2_0_load_1_reg_1031),
    .din2(sbox_q0),
    .din3(state_1_2_0_load_1_reg_1031),
    .din4(trunc_ln265_reg_939),
    .dout(state_1_2_3_fu_649_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U41(
    .din0(state_1_1_0_load_1_reg_1038),
    .din1(sbox_q0),
    .din2(state_1_1_0_load_1_reg_1038),
    .din3(state_1_1_0_load_1_reg_1038),
    .din4(trunc_ln265_reg_939),
    .dout(state_1_1_3_fu_659_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U42(
    .din0(sbox_q0),
    .din1(state_1_0_0_load_1_reg_1045),
    .din2(state_1_0_0_load_1_reg_1045),
    .din3(state_1_0_0_load_1_reg_1045),
    .din4(trunc_ln265_reg_939),
    .dout(state_1_0_3_fu_669_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U43(
    .din0(state_0_3_0_load_1_reg_1052),
    .din1(state_0_3_0_load_1_reg_1052),
    .din2(state_0_3_0_load_1_reg_1052),
    .din3(sbox_q0),
    .din4(trunc_ln265_reg_939),
    .dout(state_0_3_3_fu_699_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U44(
    .din0(state_0_2_0_load_1_reg_1059),
    .din1(state_0_2_0_load_1_reg_1059),
    .din2(sbox_q0),
    .din3(state_0_2_0_load_1_reg_1059),
    .din4(trunc_ln265_reg_939),
    .dout(state_0_2_3_fu_709_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U45(
    .din0(state_0_1_0_load_1_reg_1066),
    .din1(sbox_q0),
    .din2(state_0_1_0_load_1_reg_1066),
    .din3(state_0_1_0_load_1_reg_1066),
    .din4(trunc_ln265_reg_939),
    .dout(state_0_1_3_fu_719_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U46(
    .din0(sbox_q0),
    .din1(state_0_0_0_load_1_reg_1073),
    .din2(state_0_0_0_load_1_reg_1073),
    .din3(state_0_0_0_load_1_reg_1073),
    .din4(trunc_ln265_reg_939),
    .dout(state_0_0_3_fu_729_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U47(
    .din0(state_3_3_0_load_1_reg_968),
    .din1(state_3_3_0_load_1_reg_968),
    .din2(state_3_3_0_load_1_reg_968),
    .din3(sbox_q0),
    .din4(trunc_ln265_reg_939),
    .dout(state_3_3_3_fu_759_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U48(
    .din0(state_3_2_0_load_1_reg_975),
    .din1(state_3_2_0_load_1_reg_975),
    .din2(sbox_q0),
    .din3(state_3_2_0_load_1_reg_975),
    .din4(trunc_ln265_reg_939),
    .dout(state_3_2_3_fu_769_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U49(
    .din0(state_3_1_0_load_1_reg_982),
    .din1(sbox_q0),
    .din2(state_3_1_0_load_1_reg_982),
    .din3(state_3_1_0_load_1_reg_982),
    .din4(trunc_ln265_reg_939),
    .dout(state_3_1_3_fu_779_p6)
);

Cipher_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
Cipher_mux_42_8_1_1_U50(
    .din0(sbox_q0),
    .din1(state_3_0_0_load_1_reg_989),
    .din2(state_3_0_0_load_1_reg_989),
    .din3(state_3_0_0_load_1_reg_989),
    .din4(trunc_ln265_reg_939),
    .dout(state_3_0_3_fu_789_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln263_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_247 <= i_reg_934;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_247 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_258 <= j_reg_963;
    end else if (((icmp_ln261_fu_397_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_258 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd0))) begin
        state_0_0_0_fu_134 <= state_0_0_3_fu_729_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_0_0_0_fu_134 <= state_0_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd0))) begin
        state_0_1_0_fu_130 <= state_0_1_3_fu_719_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_0_1_0_fu_130 <= state_0_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd0))) begin
        state_0_2_0_fu_126 <= state_0_2_3_fu_709_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_0_2_0_fu_126 <= state_0_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd0))) begin
        state_0_3_0_fu_122 <= state_0_3_3_fu_699_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_0_3_0_fu_122 <= state_0_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd1))) begin
        state_1_0_0_fu_118 <= state_1_0_3_fu_669_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_1_0_0_fu_118 <= state_1_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd1))) begin
        state_1_1_0_fu_114 <= state_1_1_3_fu_659_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_1_1_0_fu_114 <= state_1_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd1))) begin
        state_1_2_0_fu_110 <= state_1_2_3_fu_649_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_1_2_0_fu_110 <= state_1_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd1))) begin
        state_1_3_0_fu_106 <= state_1_3_3_fu_639_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_1_3_0_fu_106 <= state_1_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd2))) begin
        state_2_0_0_fu_102 <= state_2_0_3_fu_609_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_2_0_0_fu_102 <= state_2_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd2))) begin
        state_2_1_0_fu_98 <= state_2_1_3_fu_599_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_2_1_0_fu_98 <= state_2_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd2))) begin
        state_2_2_0_fu_94 <= state_2_2_3_fu_589_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_2_2_0_fu_94 <= state_2_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd2))) begin
        state_2_3_0_fu_90 <= state_2_3_3_fu_579_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_2_3_0_fu_90 <= state_2_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd3))) begin
        state_3_0_0_fu_86 <= state_3_0_3_fu_789_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_3_0_0_fu_86 <= state_3_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd3))) begin
        state_3_1_0_fu_82 <= state_3_1_3_fu_779_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_3_1_0_fu_82 <= state_3_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd3))) begin
        state_3_2_0_fu_78 <= state_3_2_3_fu_769_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_3_2_0_fu_78 <= state_3_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln265_1_reg_1080 == 2'd3))) begin
        state_3_3_0_fu_74 <= state_3_3_3_fu_759_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_3_3_0_fu_74 <= state_3_3_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_934 <= i_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_963 <= j_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln263_fu_509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_0_0_0_load_1_reg_1073 <= state_0_0_0_fu_134;
        state_0_1_0_load_1_reg_1066 <= state_0_1_0_fu_130;
        state_0_2_0_load_1_reg_1059 <= state_0_2_0_fu_126;
        state_0_3_0_load_1_reg_1052 <= state_0_3_0_fu_122;
        state_1_0_0_load_1_reg_1045 <= state_1_0_0_fu_118;
        state_1_1_0_load_1_reg_1038 <= state_1_1_0_fu_114;
        state_1_2_0_load_1_reg_1031 <= state_1_2_0_fu_110;
        state_1_3_0_load_1_reg_1024 <= state_1_3_0_fu_106;
        state_2_0_0_load_1_reg_1017 <= state_2_0_0_fu_102;
        state_2_1_0_load_1_reg_1010 <= state_2_1_0_fu_98;
        state_2_2_0_load_1_reg_1003 <= state_2_2_0_fu_94;
        state_2_3_0_load_1_reg_996 <= state_2_3_0_fu_90;
        state_3_0_0_load_1_reg_989 <= state_3_0_0_fu_86;
        state_3_1_0_load_1_reg_982 <= state_3_1_0_fu_82;
        state_3_2_0_load_1_reg_975 <= state_3_2_0_fu_78;
        state_3_3_0_load_1_reg_968 <= state_3_3_0_fu_74;
        trunc_ln265_1_reg_1080 <= trunc_ln265_1_fu_521_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln261_fu_397_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln265_reg_939 <= trunc_ln265_fu_409_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln261_fu_397_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln261_fu_397_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln261_fu_397_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln263_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return_0 = state_0_0_0_fu_134;

assign ap_return_1 = state_0_1_0_fu_130;

assign ap_return_10 = state_2_2_0_fu_94;

assign ap_return_11 = state_2_3_0_fu_90;

assign ap_return_12 = state_3_0_0_fu_86;

assign ap_return_13 = state_3_1_0_fu_82;

assign ap_return_14 = state_3_2_0_fu_78;

assign ap_return_15 = state_3_3_0_fu_74;

assign ap_return_2 = state_0_2_0_fu_126;

assign ap_return_3 = state_0_3_0_fu_122;

assign ap_return_4 = state_1_0_0_fu_118;

assign ap_return_5 = state_1_1_0_fu_114;

assign ap_return_6 = state_1_2_0_fu_110;

assign ap_return_7 = state_1_3_0_fu_106;

assign ap_return_8 = state_2_0_0_fu_102;

assign ap_return_9 = state_2_1_0_fu_98;

assign i_fu_403_p2 = (i_0_reg_247 + 3'd1);

assign icmp_ln261_fu_397_p2 = ((i_0_reg_247 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln263_fu_509_p2 = ((j_0_reg_258 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_515_p2 = (j_0_reg_258 + 3'd1);

assign sbox_address0 = zext_ln265_1_fu_574_p1;

assign tmp_1_fu_536_p17 = tmp_2_fu_525_p3;

assign tmp_2_fu_525_p3 = {{trunc_ln265_1_fu_521_p1}, {trunc_ln265_reg_939}};

assign trunc_ln265_1_fu_521_p1 = j_0_reg_258[1:0];

assign trunc_ln265_fu_409_p1 = i_0_reg_247[1:0];

assign zext_ln265_1_fu_574_p1 = tmp_1_fu_536_p18;

endmodule //SubBytes
