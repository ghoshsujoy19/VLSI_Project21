// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module InvSubBytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_0_0_read,
        state_0_1_read,
        state_0_2_read,
        state_0_3_read,
        state_1_0_read,
        state_1_1_read,
        state_1_2_read,
        state_1_3_read,
        state_2_0_read,
        state_2_1_read,
        state_2_2_read,
        state_2_3_read,
        state_3_0_read,
        state_3_1_read,
        state_3_2_read,
        state_3_3_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] state_0_0_read;
input  [7:0] state_0_1_read;
input  [7:0] state_0_2_read;
input  [7:0] state_0_3_read;
input  [7:0] state_1_0_read;
input  [7:0] state_1_1_read;
input  [7:0] state_1_2_read;
input  [7:0] state_1_3_read;
input  [7:0] state_2_0_read;
input  [7:0] state_2_1_read;
input  [7:0] state_2_2_read;
input  [7:0] state_2_3_read;
input  [7:0] state_3_0_read;
input  [7:0] state_3_1_read;
input  [7:0] state_3_2_read;
input  [7:0] state_3_3_read;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] rsbox_address0;
reg    rsbox_ce0;
wire   [7:0] rsbox_q0;
wire   [2:0] i_fu_393_p2;
reg   [2:0] i_reg_924;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln390_fu_399_p1;
reg   [1:0] trunc_ln390_reg_929;
wire   [0:0] icmp_ln384_fu_387_p2;
wire   [2:0] j_fu_505_p2;
reg   [2:0] j_reg_953;
wire    ap_CS_fsm_state3;
reg   [7:0] state_3_3_0_load_1_reg_958;
wire   [0:0] icmp_ln387_fu_499_p2;
reg   [7:0] state_3_2_0_load_1_reg_965;
reg   [7:0] state_3_1_0_load_1_reg_972;
reg   [7:0] state_3_0_0_load_1_reg_979;
reg   [7:0] state_2_3_0_load_1_reg_986;
reg   [7:0] state_2_2_0_load_1_reg_993;
reg   [7:0] state_2_1_0_load_1_reg_1000;
reg   [7:0] state_2_0_0_load_1_reg_1007;
reg   [7:0] state_1_3_0_load_1_reg_1014;
reg   [7:0] state_1_2_0_load_1_reg_1021;
reg   [7:0] state_1_1_0_load_1_reg_1028;
reg   [7:0] state_1_0_0_load_1_reg_1035;
reg   [7:0] state_0_3_0_load_1_reg_1042;
reg   [7:0] state_0_2_0_load_1_reg_1049;
reg   [7:0] state_0_1_0_load_1_reg_1056;
reg   [7:0] state_0_0_0_load_1_reg_1063;
wire   [1:0] trunc_ln390_1_fu_511_p1;
reg   [1:0] trunc_ln390_1_reg_1070;
reg   [2:0] i_0_reg_237;
reg   [2:0] j_0_reg_248;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln390_1_fu_564_p1;
reg   [7:0] state_3_3_0_fu_64;
wire   [7:0] state_3_3_3_fu_749_p6;
reg   [7:0] state_3_2_0_fu_68;
wire   [7:0] state_3_2_3_fu_759_p6;
reg   [7:0] state_3_1_0_fu_72;
wire   [7:0] state_3_1_3_fu_769_p6;
reg   [7:0] state_3_0_0_fu_76;
wire   [7:0] state_3_0_3_fu_779_p6;
reg   [7:0] state_2_3_0_fu_80;
wire   [7:0] state_2_3_3_fu_569_p6;
reg   [7:0] state_2_2_0_fu_84;
wire   [7:0] state_2_2_3_fu_579_p6;
reg   [7:0] state_2_1_0_fu_88;
wire   [7:0] state_2_1_3_fu_589_p6;
reg   [7:0] state_2_0_0_fu_92;
wire   [7:0] state_2_0_3_fu_599_p6;
reg   [7:0] state_1_3_0_fu_96;
wire   [7:0] state_1_3_3_fu_629_p6;
reg   [7:0] state_1_2_0_fu_100;
wire   [7:0] state_1_2_3_fu_639_p6;
reg   [7:0] state_1_1_0_fu_104;
wire   [7:0] state_1_1_3_fu_649_p6;
reg   [7:0] state_1_0_0_fu_108;
wire   [7:0] state_1_0_3_fu_659_p6;
reg   [7:0] state_0_3_0_fu_112;
wire   [7:0] state_0_3_3_fu_689_p6;
reg   [7:0] state_0_2_0_fu_116;
wire   [7:0] state_0_2_3_fu_699_p6;
reg   [7:0] state_0_1_0_fu_120;
wire   [7:0] state_0_1_3_fu_709_p6;
reg   [7:0] state_0_0_0_fu_124;
wire   [7:0] state_0_0_3_fu_719_p6;
wire   [3:0] tmp_1_fu_515_p3;
wire   [4:0] tmp_fu_526_p17;
wire   [7:0] tmp_fu_526_p18;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

InvSubBytes_rsbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
rsbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rsbox_address0),
    .ce0(rsbox_ce0),
    .q0(rsbox_q0)
);

InvCipher_mux_165bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_165bkb_U1(
    .din0(state_0_0_0_fu_124),
    .din1(state_0_1_0_fu_120),
    .din2(state_0_2_0_fu_116),
    .din3(state_0_3_0_fu_112),
    .din4(state_1_0_0_fu_108),
    .din5(state_1_1_0_fu_104),
    .din6(state_1_2_0_fu_100),
    .din7(state_1_3_0_fu_96),
    .din8(state_2_0_0_fu_92),
    .din9(state_2_1_0_fu_88),
    .din10(state_2_2_0_fu_84),
    .din11(state_2_3_0_fu_80),
    .din12(state_3_0_0_fu_76),
    .din13(state_3_1_0_fu_72),
    .din14(state_3_2_0_fu_68),
    .din15(state_3_3_0_fu_64),
    .din16(tmp_fu_526_p17),
    .dout(tmp_fu_526_p18)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U2(
    .din0(state_2_3_0_load_1_reg_986),
    .din1(state_2_3_0_load_1_reg_986),
    .din2(state_2_3_0_load_1_reg_986),
    .din3(rsbox_q0),
    .din4(trunc_ln390_reg_929),
    .dout(state_2_3_3_fu_569_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U3(
    .din0(state_2_2_0_load_1_reg_993),
    .din1(state_2_2_0_load_1_reg_993),
    .din2(rsbox_q0),
    .din3(state_2_2_0_load_1_reg_993),
    .din4(trunc_ln390_reg_929),
    .dout(state_2_2_3_fu_579_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U4(
    .din0(state_2_1_0_load_1_reg_1000),
    .din1(rsbox_q0),
    .din2(state_2_1_0_load_1_reg_1000),
    .din3(state_2_1_0_load_1_reg_1000),
    .din4(trunc_ln390_reg_929),
    .dout(state_2_1_3_fu_589_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U5(
    .din0(rsbox_q0),
    .din1(state_2_0_0_load_1_reg_1007),
    .din2(state_2_0_0_load_1_reg_1007),
    .din3(state_2_0_0_load_1_reg_1007),
    .din4(trunc_ln390_reg_929),
    .dout(state_2_0_3_fu_599_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U6(
    .din0(state_1_3_0_load_1_reg_1014),
    .din1(state_1_3_0_load_1_reg_1014),
    .din2(state_1_3_0_load_1_reg_1014),
    .din3(rsbox_q0),
    .din4(trunc_ln390_reg_929),
    .dout(state_1_3_3_fu_629_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U7(
    .din0(state_1_2_0_load_1_reg_1021),
    .din1(state_1_2_0_load_1_reg_1021),
    .din2(rsbox_q0),
    .din3(state_1_2_0_load_1_reg_1021),
    .din4(trunc_ln390_reg_929),
    .dout(state_1_2_3_fu_639_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U8(
    .din0(state_1_1_0_load_1_reg_1028),
    .din1(rsbox_q0),
    .din2(state_1_1_0_load_1_reg_1028),
    .din3(state_1_1_0_load_1_reg_1028),
    .din4(trunc_ln390_reg_929),
    .dout(state_1_1_3_fu_649_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U9(
    .din0(rsbox_q0),
    .din1(state_1_0_0_load_1_reg_1035),
    .din2(state_1_0_0_load_1_reg_1035),
    .din3(state_1_0_0_load_1_reg_1035),
    .din4(trunc_ln390_reg_929),
    .dout(state_1_0_3_fu_659_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U10(
    .din0(state_0_3_0_load_1_reg_1042),
    .din1(state_0_3_0_load_1_reg_1042),
    .din2(state_0_3_0_load_1_reg_1042),
    .din3(rsbox_q0),
    .din4(trunc_ln390_reg_929),
    .dout(state_0_3_3_fu_689_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U11(
    .din0(state_0_2_0_load_1_reg_1049),
    .din1(state_0_2_0_load_1_reg_1049),
    .din2(rsbox_q0),
    .din3(state_0_2_0_load_1_reg_1049),
    .din4(trunc_ln390_reg_929),
    .dout(state_0_2_3_fu_699_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U12(
    .din0(state_0_1_0_load_1_reg_1056),
    .din1(rsbox_q0),
    .din2(state_0_1_0_load_1_reg_1056),
    .din3(state_0_1_0_load_1_reg_1056),
    .din4(trunc_ln390_reg_929),
    .dout(state_0_1_3_fu_709_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U13(
    .din0(rsbox_q0),
    .din1(state_0_0_0_load_1_reg_1063),
    .din2(state_0_0_0_load_1_reg_1063),
    .din3(state_0_0_0_load_1_reg_1063),
    .din4(trunc_ln390_reg_929),
    .dout(state_0_0_3_fu_719_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U14(
    .din0(state_3_3_0_load_1_reg_958),
    .din1(state_3_3_0_load_1_reg_958),
    .din2(state_3_3_0_load_1_reg_958),
    .din3(rsbox_q0),
    .din4(trunc_ln390_reg_929),
    .dout(state_3_3_3_fu_749_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U15(
    .din0(state_3_2_0_load_1_reg_965),
    .din1(state_3_2_0_load_1_reg_965),
    .din2(rsbox_q0),
    .din3(state_3_2_0_load_1_reg_965),
    .din4(trunc_ln390_reg_929),
    .dout(state_3_2_3_fu_759_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U16(
    .din0(state_3_1_0_load_1_reg_972),
    .din1(rsbox_q0),
    .din2(state_3_1_0_load_1_reg_972),
    .din3(state_3_1_0_load_1_reg_972),
    .din4(trunc_ln390_reg_929),
    .dout(state_3_1_3_fu_769_p6)
);

InvCipher_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
InvCipher_mux_42_cud_U17(
    .din0(rsbox_q0),
    .din1(state_3_0_0_load_1_reg_979),
    .din2(state_3_0_0_load_1_reg_979),
    .din3(state_3_0_0_load_1_reg_979),
    .din4(trunc_ln390_reg_929),
    .dout(state_3_0_3_fu_779_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln387_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_237 <= i_reg_924;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_237 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_248 <= j_reg_953;
    end else if (((icmp_ln384_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_248 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd0))) begin
        state_0_0_0_fu_124 <= state_0_0_3_fu_719_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_0_0_0_fu_124 <= state_0_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd0))) begin
        state_0_1_0_fu_120 <= state_0_1_3_fu_709_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_0_1_0_fu_120 <= state_0_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd0))) begin
        state_0_2_0_fu_116 <= state_0_2_3_fu_699_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_0_2_0_fu_116 <= state_0_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd0))) begin
        state_0_3_0_fu_112 <= state_0_3_3_fu_689_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_0_3_0_fu_112 <= state_0_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd1))) begin
        state_1_0_0_fu_108 <= state_1_0_3_fu_659_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_1_0_0_fu_108 <= state_1_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd1))) begin
        state_1_1_0_fu_104 <= state_1_1_3_fu_649_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_1_1_0_fu_104 <= state_1_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd1))) begin
        state_1_2_0_fu_100 <= state_1_2_3_fu_639_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_1_2_0_fu_100 <= state_1_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd1))) begin
        state_1_3_0_fu_96 <= state_1_3_3_fu_629_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_1_3_0_fu_96 <= state_1_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd2))) begin
        state_2_0_0_fu_92 <= state_2_0_3_fu_599_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_2_0_0_fu_92 <= state_2_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd2))) begin
        state_2_1_0_fu_88 <= state_2_1_3_fu_589_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_2_1_0_fu_88 <= state_2_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd2))) begin
        state_2_2_0_fu_84 <= state_2_2_3_fu_579_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_2_2_0_fu_84 <= state_2_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd2))) begin
        state_2_3_0_fu_80 <= state_2_3_3_fu_569_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_2_3_0_fu_80 <= state_2_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd3))) begin
        state_3_0_0_fu_76 <= state_3_0_3_fu_779_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_3_0_0_fu_76 <= state_3_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd3))) begin
        state_3_1_0_fu_72 <= state_3_1_3_fu_769_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_3_1_0_fu_72 <= state_3_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd3))) begin
        state_3_2_0_fu_68 <= state_3_2_3_fu_759_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_3_2_0_fu_68 <= state_3_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln390_1_reg_1070 == 2'd3))) begin
        state_3_3_0_fu_64 <= state_3_3_3_fu_749_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_3_3_0_fu_64 <= state_3_3_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_924 <= i_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_953 <= j_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln387_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_0_0_0_load_1_reg_1063 <= state_0_0_0_fu_124;
        state_0_1_0_load_1_reg_1056 <= state_0_1_0_fu_120;
        state_0_2_0_load_1_reg_1049 <= state_0_2_0_fu_116;
        state_0_3_0_load_1_reg_1042 <= state_0_3_0_fu_112;
        state_1_0_0_load_1_reg_1035 <= state_1_0_0_fu_108;
        state_1_1_0_load_1_reg_1028 <= state_1_1_0_fu_104;
        state_1_2_0_load_1_reg_1021 <= state_1_2_0_fu_100;
        state_1_3_0_load_1_reg_1014 <= state_1_3_0_fu_96;
        state_2_0_0_load_1_reg_1007 <= state_2_0_0_fu_92;
        state_2_1_0_load_1_reg_1000 <= state_2_1_0_fu_88;
        state_2_2_0_load_1_reg_993 <= state_2_2_0_fu_84;
        state_2_3_0_load_1_reg_986 <= state_2_3_0_fu_80;
        state_3_0_0_load_1_reg_979 <= state_3_0_0_fu_76;
        state_3_1_0_load_1_reg_972 <= state_3_1_0_fu_72;
        state_3_2_0_load_1_reg_965 <= state_3_2_0_fu_68;
        state_3_3_0_load_1_reg_958 <= state_3_3_0_fu_64;
        trunc_ln390_1_reg_1070 <= trunc_ln390_1_fu_511_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln384_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln390_reg_929 <= trunc_ln390_fu_399_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln384_fu_387_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln384_fu_387_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rsbox_ce0 = 1'b1;
    end else begin
        rsbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln384_fu_387_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln387_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return_0 = state_0_0_0_fu_124;

assign ap_return_1 = state_0_1_0_fu_120;

assign ap_return_10 = state_2_2_0_fu_84;

assign ap_return_11 = state_2_3_0_fu_80;

assign ap_return_12 = state_3_0_0_fu_76;

assign ap_return_13 = state_3_1_0_fu_72;

assign ap_return_14 = state_3_2_0_fu_68;

assign ap_return_15 = state_3_3_0_fu_64;

assign ap_return_2 = state_0_2_0_fu_116;

assign ap_return_3 = state_0_3_0_fu_112;

assign ap_return_4 = state_1_0_0_fu_108;

assign ap_return_5 = state_1_1_0_fu_104;

assign ap_return_6 = state_1_2_0_fu_100;

assign ap_return_7 = state_1_3_0_fu_96;

assign ap_return_8 = state_2_0_0_fu_92;

assign ap_return_9 = state_2_1_0_fu_88;

assign i_fu_393_p2 = (i_0_reg_237 + 3'd1);

assign icmp_ln384_fu_387_p2 = ((i_0_reg_237 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln387_fu_499_p2 = ((j_0_reg_248 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_505_p2 = (j_0_reg_248 + 3'd1);

assign rsbox_address0 = zext_ln390_1_fu_564_p1;

assign tmp_1_fu_515_p3 = {{trunc_ln390_1_fu_511_p1}, {trunc_ln390_reg_929}};

assign tmp_fu_526_p17 = tmp_1_fu_515_p3;

assign trunc_ln390_1_fu_511_p1 = j_0_reg_248[1:0];

assign trunc_ln390_fu_399_p1 = i_0_reg_237[1:0];

assign zext_ln390_1_fu_564_p1 = tmp_fu_526_p18;

endmodule //InvSubBytes
