// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="KeyExpansion,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.299000,HLS_SYN_LAT=103,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=247,HLS_SYN_LUT=1527,HLS_VERSION=2019_2}" *)

module KeyExpansion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RoundKey_0_address0,
        RoundKey_0_ce0,
        RoundKey_0_we0,
        RoundKey_0_d0,
        RoundKey_0_q0,
        RoundKey_0_address1,
        RoundKey_0_ce1,
        RoundKey_0_we1,
        RoundKey_0_d1,
        RoundKey_1_address0,
        RoundKey_1_ce0,
        RoundKey_1_we0,
        RoundKey_1_d0,
        RoundKey_1_q0,
        RoundKey_1_address1,
        RoundKey_1_ce1,
        RoundKey_1_we1,
        RoundKey_1_d1,
        RoundKey_2_address0,
        RoundKey_2_ce0,
        RoundKey_2_we0,
        RoundKey_2_d0,
        RoundKey_2_q0,
        RoundKey_2_address1,
        RoundKey_2_ce1,
        RoundKey_2_we1,
        RoundKey_2_d1,
        RoundKey_3_address0,
        RoundKey_3_ce0,
        RoundKey_3_we0,
        RoundKey_3_d0,
        RoundKey_3_q0,
        RoundKey_3_address1,
        RoundKey_3_ce1,
        RoundKey_3_we1,
        RoundKey_3_d1,
        RoundKey_4_address0,
        RoundKey_4_ce0,
        RoundKey_4_we0,
        RoundKey_4_d0,
        RoundKey_4_q0,
        RoundKey_4_address1,
        RoundKey_4_ce1,
        RoundKey_4_we1,
        RoundKey_4_d1,
        RoundKey_5_address0,
        RoundKey_5_ce0,
        RoundKey_5_we0,
        RoundKey_5_d0,
        RoundKey_5_q0,
        RoundKey_5_address1,
        RoundKey_5_ce1,
        RoundKey_5_we1,
        RoundKey_5_d1,
        RoundKey_6_address0,
        RoundKey_6_ce0,
        RoundKey_6_we0,
        RoundKey_6_d0,
        RoundKey_6_q0,
        RoundKey_6_address1,
        RoundKey_6_ce1,
        RoundKey_6_we1,
        RoundKey_6_d1,
        RoundKey_7_address0,
        RoundKey_7_ce0,
        RoundKey_7_we0,
        RoundKey_7_d0,
        RoundKey_7_q0,
        RoundKey_7_address1,
        RoundKey_7_ce1,
        RoundKey_7_we1,
        RoundKey_7_d1,
        Key_0_address0,
        Key_0_ce0,
        Key_0_q0,
        Key_0_address1,
        Key_0_ce1,
        Key_0_q1,
        Key_1_address0,
        Key_1_ce0,
        Key_1_q0,
        Key_1_address1,
        Key_1_ce1,
        Key_1_q1,
        Key_2_address0,
        Key_2_ce0,
        Key_2_q0,
        Key_2_address1,
        Key_2_ce1,
        Key_2_q1,
        Key_3_address0,
        Key_3_ce0,
        Key_3_q0,
        Key_3_address1,
        Key_3_ce1,
        Key_3_q1,
        Key_4_address0,
        Key_4_ce0,
        Key_4_q0,
        Key_4_address1,
        Key_4_ce1,
        Key_4_q1,
        Key_5_address0,
        Key_5_ce0,
        Key_5_q0,
        Key_5_address1,
        Key_5_ce1,
        Key_5_q1,
        Key_6_address0,
        Key_6_ce0,
        Key_6_q0,
        Key_6_address1,
        Key_6_ce1,
        Key_6_q1,
        Key_7_address0,
        Key_7_ce0,
        Key_7_q0,
        Key_7_address1,
        Key_7_ce1,
        Key_7_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] RoundKey_0_address0;
output   RoundKey_0_ce0;
output   RoundKey_0_we0;
output  [7:0] RoundKey_0_d0;
input  [7:0] RoundKey_0_q0;
output  [4:0] RoundKey_0_address1;
output   RoundKey_0_ce1;
output   RoundKey_0_we1;
output  [7:0] RoundKey_0_d1;
output  [4:0] RoundKey_1_address0;
output   RoundKey_1_ce0;
output   RoundKey_1_we0;
output  [7:0] RoundKey_1_d0;
input  [7:0] RoundKey_1_q0;
output  [4:0] RoundKey_1_address1;
output   RoundKey_1_ce1;
output   RoundKey_1_we1;
output  [7:0] RoundKey_1_d1;
output  [4:0] RoundKey_2_address0;
output   RoundKey_2_ce0;
output   RoundKey_2_we0;
output  [7:0] RoundKey_2_d0;
input  [7:0] RoundKey_2_q0;
output  [4:0] RoundKey_2_address1;
output   RoundKey_2_ce1;
output   RoundKey_2_we1;
output  [7:0] RoundKey_2_d1;
output  [4:0] RoundKey_3_address0;
output   RoundKey_3_ce0;
output   RoundKey_3_we0;
output  [7:0] RoundKey_3_d0;
input  [7:0] RoundKey_3_q0;
output  [4:0] RoundKey_3_address1;
output   RoundKey_3_ce1;
output   RoundKey_3_we1;
output  [7:0] RoundKey_3_d1;
output  [4:0] RoundKey_4_address0;
output   RoundKey_4_ce0;
output   RoundKey_4_we0;
output  [7:0] RoundKey_4_d0;
input  [7:0] RoundKey_4_q0;
output  [4:0] RoundKey_4_address1;
output   RoundKey_4_ce1;
output   RoundKey_4_we1;
output  [7:0] RoundKey_4_d1;
output  [4:0] RoundKey_5_address0;
output   RoundKey_5_ce0;
output   RoundKey_5_we0;
output  [7:0] RoundKey_5_d0;
input  [7:0] RoundKey_5_q0;
output  [4:0] RoundKey_5_address1;
output   RoundKey_5_ce1;
output   RoundKey_5_we1;
output  [7:0] RoundKey_5_d1;
output  [4:0] RoundKey_6_address0;
output   RoundKey_6_ce0;
output   RoundKey_6_we0;
output  [7:0] RoundKey_6_d0;
input  [7:0] RoundKey_6_q0;
output  [4:0] RoundKey_6_address1;
output   RoundKey_6_ce1;
output   RoundKey_6_we1;
output  [7:0] RoundKey_6_d1;
output  [4:0] RoundKey_7_address0;
output   RoundKey_7_ce0;
output   RoundKey_7_we0;
output  [7:0] RoundKey_7_d0;
input  [7:0] RoundKey_7_q0;
output  [4:0] RoundKey_7_address1;
output   RoundKey_7_ce1;
output   RoundKey_7_we1;
output  [7:0] RoundKey_7_d1;
output  [0:0] Key_0_address0;
output   Key_0_ce0;
input  [7:0] Key_0_q0;
output  [0:0] Key_0_address1;
output   Key_0_ce1;
input  [7:0] Key_0_q1;
output  [0:0] Key_1_address0;
output   Key_1_ce0;
input  [7:0] Key_1_q0;
output  [0:0] Key_1_address1;
output   Key_1_ce1;
input  [7:0] Key_1_q1;
output  [0:0] Key_2_address0;
output   Key_2_ce0;
input  [7:0] Key_2_q0;
output  [0:0] Key_2_address1;
output   Key_2_ce1;
input  [7:0] Key_2_q1;
output  [0:0] Key_3_address0;
output   Key_3_ce0;
input  [7:0] Key_3_q0;
output  [0:0] Key_3_address1;
output   Key_3_ce1;
input  [7:0] Key_3_q1;
output  [0:0] Key_4_address0;
output   Key_4_ce0;
input  [7:0] Key_4_q0;
output  [0:0] Key_4_address1;
output   Key_4_ce1;
input  [7:0] Key_4_q1;
output  [0:0] Key_5_address0;
output   Key_5_ce0;
input  [7:0] Key_5_q0;
output  [0:0] Key_5_address1;
output   Key_5_ce1;
input  [7:0] Key_5_q1;
output  [0:0] Key_6_address0;
output   Key_6_ce0;
input  [7:0] Key_6_q0;
output  [0:0] Key_6_address1;
output   Key_6_ce1;
input  [7:0] Key_6_q1;
output  [0:0] Key_7_address0;
output   Key_7_ce0;
input  [7:0] Key_7_q0;
output  [0:0] Key_7_address1;
output   Key_7_ce1;
input  [7:0] Key_7_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] RoundKey_0_address0;
reg RoundKey_0_ce0;
reg RoundKey_0_we0;
reg[4:0] RoundKey_0_address1;
reg RoundKey_0_ce1;
reg RoundKey_0_we1;
reg[7:0] RoundKey_0_d1;
reg[4:0] RoundKey_1_address0;
reg RoundKey_1_ce0;
reg RoundKey_1_we0;
reg[4:0] RoundKey_1_address1;
reg RoundKey_1_ce1;
reg RoundKey_1_we1;
reg[7:0] RoundKey_1_d1;
reg[4:0] RoundKey_2_address0;
reg RoundKey_2_ce0;
reg RoundKey_2_we0;
reg[4:0] RoundKey_2_address1;
reg RoundKey_2_ce1;
reg RoundKey_2_we1;
reg[7:0] RoundKey_2_d1;
reg[4:0] RoundKey_3_address0;
reg RoundKey_3_ce0;
reg RoundKey_3_we0;
reg[4:0] RoundKey_3_address1;
reg RoundKey_3_ce1;
reg RoundKey_3_we1;
reg[7:0] RoundKey_3_d1;
reg[4:0] RoundKey_4_address0;
reg RoundKey_4_ce0;
reg RoundKey_4_we0;
reg[4:0] RoundKey_4_address1;
reg RoundKey_4_ce1;
reg RoundKey_4_we1;
reg[7:0] RoundKey_4_d1;
reg[4:0] RoundKey_5_address0;
reg RoundKey_5_ce0;
reg RoundKey_5_we0;
reg[4:0] RoundKey_5_address1;
reg RoundKey_5_ce1;
reg RoundKey_5_we1;
reg[7:0] RoundKey_5_d1;
reg[4:0] RoundKey_6_address0;
reg RoundKey_6_ce0;
reg RoundKey_6_we0;
reg[4:0] RoundKey_6_address1;
reg RoundKey_6_ce1;
reg RoundKey_6_we1;
reg[7:0] RoundKey_6_d1;
reg[4:0] RoundKey_7_address0;
reg RoundKey_7_ce0;
reg RoundKey_7_we0;
reg[4:0] RoundKey_7_address1;
reg RoundKey_7_ce1;
reg RoundKey_7_we1;
reg[7:0] RoundKey_7_d1;
reg Key_0_ce0;
reg Key_0_ce1;
reg Key_1_ce0;
reg Key_1_ce1;
reg Key_2_ce0;
reg Key_2_ce1;
reg Key_3_ce0;
reg Key_3_ce1;
reg Key_4_ce0;
reg Key_4_ce1;
reg Key_5_ce0;
reg Key_5_ce1;
reg Key_6_ce0;
reg Key_6_ce1;
reg Key_7_ce0;
reg Key_7_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] sbox_7_address0;
reg    sbox_7_ce0;
wire   [7:0] sbox_7_q0;
reg   [4:0] sbox_0_address0;
reg    sbox_0_ce0;
wire   [7:0] sbox_0_q0;
reg   [4:0] sbox_1_address0;
reg    sbox_1_ce0;
wire   [7:0] sbox_1_q0;
reg   [4:0] sbox_2_address0;
reg    sbox_2_ce0;
wire   [7:0] sbox_2_q0;
reg   [4:0] sbox_3_address0;
reg    sbox_3_ce0;
wire   [7:0] sbox_3_q0;
reg   [4:0] sbox_4_address0;
reg    sbox_4_ce0;
wire   [7:0] sbox_4_q0;
reg   [4:0] sbox_5_address0;
reg    sbox_5_ce0;
wire   [7:0] sbox_5_q0;
reg   [4:0] sbox_6_address0;
reg    sbox_6_ce0;
wire   [7:0] sbox_6_q0;
wire   [3:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln176_fu_1171_p2;
reg   [0:0] icmp_ln176_reg_1947;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln183_fu_1181_p2;
reg   [0:0] icmp_ln183_reg_1951;
reg   [4:0] lshr_ln204_1_reg_2005;
wire   [7:0] xor_ln188_fu_1479_p2;
reg   [7:0] xor_ln188_reg_2045;
wire    ap_CS_fsm_state4;
reg   [7:0] RoundKey_0_load_reg_2090;
reg   [7:0] RoundKey_1_load_reg_2095;
reg   [7:0] RoundKey_2_load_reg_2100;
reg   [7:0] RoundKey_3_load_reg_2105;
reg   [7:0] RoundKey_4_load_reg_2110;
reg   [7:0] RoundKey_5_load_reg_2115;
reg   [7:0] RoundKey_6_load_reg_2120;
reg   [7:0] RoundKey_7_load_reg_2125;
wire   [7:0] grp_fu_1163_p3;
reg   [7:0] select_ln25_13_reg_2130;
wire    ap_CS_fsm_state5;
reg   [7:0] select_ln25_20_reg_2175;
wire    ap_CS_fsm_state6;
wire   [7:0] xor_ln204_1_fu_1817_p2;
wire    ap_CS_fsm_state7;
wire   [7:0] xor_ln205_1_fu_1823_p2;
wire   [7:0] xor_ln206_1_fu_1829_p2;
wire   [7:0] xor_ln207_1_fu_1835_p2;
wire   [7:0] add_ln176_fu_1841_p2;
reg   [7:0] d_0_0_reg_1019;
reg   [7:0] c_0_0_reg_1029;
reg   [7:0] b_0_0_reg_1039;
reg   [7:0] e_0_reg_1049;
reg   [7:0] s_0_0_reg_1059;
reg   [7:0] ap_phi_mux_d_1_0_phi_fu_1074_p4;
reg   [7:0] d_1_0_reg_1071;
reg   [7:0] ap_phi_mux_c_1_0_phi_fu_1084_p4;
reg   [7:0] c_1_0_reg_1081;
reg   [7:0] ap_phi_mux_b_1_0_phi_fu_1094_p4;
reg   [7:0] b_1_0_reg_1091;
reg   [7:0] ap_phi_mux_a_1_0_phi_fu_1104_p4;
reg   [7:0] a_1_0_reg_1101;
wire   [63:0] zext_ln188_fu_1197_p1;
wire   [63:0] zext_ln188_1_fu_1219_p1;
wire   [63:0] zext_ln204_fu_1240_p1;
wire   [63:0] zext_ln205_fu_1271_p1;
wire   [63:0] zext_ln206_fu_1292_p1;
wire   [63:0] zext_ln207_fu_1313_p1;
wire   [63:0] zext_ln204_2_fu_1334_p1;
wire   [63:0] zext_ln205_1_fu_1355_p1;
wire   [63:0] zext_ln206_1_fu_1376_p1;
wire   [63:0] zext_ln207_1_fu_1397_p1;
wire   [63:0] zext_ln189_fu_1495_p1;
wire   [63:0] zext_ln190_fu_1594_p1;
wire   [63:0] zext_ln191_fu_1693_p1;
wire   [63:0] zext_ln204_1_fu_1788_p1;
wire   [7:0] xor_ln204_fu_1782_p2;
wire   [7:0] xor_ln205_fu_1799_p2;
wire   [7:0] xor_ln206_fu_1805_p2;
wire   [7:0] xor_ln207_fu_1811_p2;
reg   [0:0] grp_fu_1121_p0;
wire   [0:0] icmp_ln25_6_fu_1445_p2;
wire   [0:0] icmp_ln25_13_fu_1550_p2;
wire   [0:0] icmp_ln25_20_fu_1649_p2;
wire   [0:0] icmp_ln25_27_fu_1748_p2;
reg   [0:0] grp_fu_1128_p0;
wire   [0:0] icmp_ln25_4_fu_1432_p2;
wire   [0:0] icmp_ln25_11_fu_1537_p2;
wire   [0:0] icmp_ln25_18_fu_1636_p2;
wire   [0:0] icmp_ln25_25_fu_1735_p2;
reg   [0:0] grp_fu_1135_p0;
wire   [0:0] icmp_ln25_2_fu_1419_p2;
wire   [0:0] icmp_ln25_9_fu_1524_p2;
wire   [0:0] icmp_ln25_16_fu_1623_p2;
wire   [0:0] icmp_ln25_23_fu_1722_p2;
reg   [0:0] grp_fu_1142_p0;
wire   [0:0] icmp_ln25_fu_1406_p2;
wire   [0:0] icmp_ln25_7_fu_1511_p2;
wire   [0:0] icmp_ln25_14_fu_1610_p2;
wire   [0:0] icmp_ln25_21_fu_1709_p2;
reg   [0:0] grp_fu_1149_p0;
wire   [0:0] or_ln25_fu_1452_p2;
wire   [0:0] or_ln25_4_fu_1557_p2;
wire   [0:0] or_ln25_8_fu_1656_p2;
wire   [0:0] or_ln25_12_fu_1755_p2;
wire   [7:0] grp_fu_1121_p3;
wire   [7:0] grp_fu_1128_p3;
reg   [0:0] grp_fu_1156_p0;
wire   [0:0] or_ln25_2_fu_1465_p2;
wire   [0:0] or_ln25_6_fu_1570_p2;
wire   [0:0] or_ln25_10_fu_1669_p2;
wire   [0:0] or_ln25_14_fu_1768_p2;
wire   [7:0] grp_fu_1135_p3;
wire   [7:0] grp_fu_1142_p3;
reg   [0:0] grp_fu_1163_p0;
wire   [0:0] or_ln25_3_fu_1472_p2;
wire   [0:0] or_ln25_7_fu_1577_p2;
wire   [0:0] or_ln25_11_fu_1676_p2;
wire   [0:0] or_ln25_15_fu_1775_p2;
wire   [7:0] grp_fu_1149_p3;
wire   [7:0] grp_fu_1156_p3;
wire   [3:0] empty_7_fu_1177_p1;
wire   [4:0] lshr_ln_fu_1187_p4;
wire   [3:0] lshr_ln188_1_fu_1209_p4;
wire   [7:0] add_ln204_fu_1224_p2;
wire   [4:0] lshr_ln4_fu_1230_p4;
wire   [7:0] add_ln205_fu_1255_p2;
wire   [4:0] lshr_ln5_fu_1261_p4;
wire   [7:0] add_ln206_fu_1276_p2;
wire   [4:0] lshr_ln6_fu_1282_p4;
wire   [7:0] add_ln207_fu_1297_p2;
wire   [4:0] lshr_ln7_fu_1303_p4;
wire   [7:0] add_ln204_1_fu_1318_p2;
wire   [4:0] lshr_ln204_2_fu_1324_p4;
wire   [7:0] add_ln205_1_fu_1339_p2;
wire   [4:0] lshr_ln205_1_fu_1345_p4;
wire   [7:0] add_ln206_1_fu_1360_p2;
wire   [4:0] lshr_ln206_1_fu_1366_p4;
wire   [7:0] add_ln207_1_fu_1381_p2;
wire   [4:0] lshr_ln207_1_fu_1387_p4;
wire   [2:0] trunc_ln188_fu_1402_p1;
wire   [0:0] icmp_ln25_5_fu_1439_p2;
wire   [0:0] icmp_ln25_3_fu_1426_p2;
wire   [0:0] icmp_ln25_1_fu_1413_p2;
wire   [0:0] or_ln25_1_fu_1459_p2;
wire   [4:0] lshr_ln1_fu_1485_p4;
wire   [2:0] trunc_ln189_fu_1507_p1;
wire   [0:0] icmp_ln25_12_fu_1544_p2;
wire   [0:0] icmp_ln25_10_fu_1531_p2;
wire   [0:0] icmp_ln25_8_fu_1518_p2;
wire   [0:0] or_ln25_5_fu_1564_p2;
wire   [4:0] lshr_ln2_fu_1584_p4;
wire   [2:0] trunc_ln190_fu_1606_p1;
wire   [0:0] icmp_ln25_19_fu_1643_p2;
wire   [0:0] icmp_ln25_17_fu_1630_p2;
wire   [0:0] icmp_ln25_15_fu_1617_p2;
wire   [0:0] or_ln25_9_fu_1663_p2;
wire   [4:0] lshr_ln3_fu_1683_p4;
wire   [2:0] trunc_ln191_fu_1705_p1;
wire   [0:0] icmp_ln25_26_fu_1742_p2;
wire   [0:0] icmp_ln25_24_fu_1729_p2;
wire   [0:0] icmp_ln25_22_fu_1716_p2;
wire   [0:0] or_ln25_13_fu_1762_p2;
wire    ap_CS_fsm_state8;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

KeyExpansion_sbox_7 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sbox_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_7_address0),
    .ce0(sbox_7_ce0),
    .q0(sbox_7_q0)
);

KeyExpansion_sbox_0 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sbox_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_0_address0),
    .ce0(sbox_0_ce0),
    .q0(sbox_0_q0)
);

KeyExpansion_sbox_1 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sbox_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_1_address0),
    .ce0(sbox_1_ce0),
    .q0(sbox_1_q0)
);

KeyExpansion_sbox_2 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sbox_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_2_address0),
    .ce0(sbox_2_ce0),
    .q0(sbox_2_q0)
);

KeyExpansion_sbox_3 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sbox_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_3_address0),
    .ce0(sbox_3_ce0),
    .q0(sbox_3_q0)
);

KeyExpansion_sbox_4 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sbox_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_4_address0),
    .ce0(sbox_4_ce0),
    .q0(sbox_4_q0)
);

KeyExpansion_sbox_5 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sbox_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_5_address0),
    .ce0(sbox_5_ce0),
    .q0(sbox_5_q0)
);

KeyExpansion_sbox_6 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sbox_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_6_address0),
    .ce0(sbox_6_ce0),
    .q0(sbox_6_q0)
);

KeyExpansion_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_1181_p2 == 1'd0) & (icmp_ln176_fu_1171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        a_1_0_reg_1101 <= e_0_reg_1049;
    end else if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        a_1_0_reg_1101 <= xor_ln188_reg_2045;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        b_0_0_reg_1039 <= xor_ln205_1_fu_1823_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_0_0_reg_1039 <= Key_5_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_1181_p2 == 1'd0) & (icmp_ln176_fu_1171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        b_1_0_reg_1091 <= b_0_0_reg_1039;
    end else if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        b_1_0_reg_1091 <= select_ln25_13_reg_2130;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        c_0_0_reg_1029 <= xor_ln206_1_fu_1829_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_0_0_reg_1029 <= Key_6_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_1181_p2 == 1'd0) & (icmp_ln176_fu_1171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_1_0_reg_1081 <= c_0_0_reg_1029;
    end else if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        c_1_0_reg_1081 <= select_ln25_20_reg_2175;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        d_0_0_reg_1019 <= xor_ln207_1_fu_1835_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_0_0_reg_1019 <= Key_7_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_fu_1181_p2 == 1'd0) & (icmp_ln176_fu_1171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        d_1_0_reg_1071 <= d_0_0_reg_1019;
    end else if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        d_1_0_reg_1071 <= grp_fu_1163_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        e_0_reg_1049 <= xor_ln204_1_fu_1817_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        e_0_reg_1049 <= Key_4_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        s_0_0_reg_1059 <= add_ln176_fu_1841_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_0_0_reg_1059 <= 8'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_0_load_reg_2090 <= RoundKey_0_q0;
        RoundKey_1_load_reg_2095 <= RoundKey_1_q0;
        RoundKey_2_load_reg_2100 <= RoundKey_2_q0;
        RoundKey_3_load_reg_2105 <= RoundKey_3_q0;
        RoundKey_4_load_reg_2110 <= RoundKey_4_q0;
        RoundKey_5_load_reg_2115 <= RoundKey_5_q0;
        RoundKey_6_load_reg_2120 <= RoundKey_6_q0;
        RoundKey_7_load_reg_2125 <= RoundKey_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln176_reg_1947 <= icmp_ln176_fu_1171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_1171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln183_reg_1951 <= icmp_ln183_fu_1181_p2;
        lshr_ln204_1_reg_2005 <= {{s_0_0_reg_1059[7:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        select_ln25_13_reg_2130 <= grp_fu_1163_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        select_ln25_20_reg_2175 <= grp_fu_1163_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        xor_ln188_reg_2045 <= xor_ln188_fu_1479_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_0_ce0 = 1'b1;
    end else begin
        Key_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_0_ce1 = 1'b1;
    end else begin
        Key_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_1_ce0 = 1'b1;
    end else begin
        Key_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_1_ce1 = 1'b1;
    end else begin
        Key_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_2_ce0 = 1'b1;
    end else begin
        Key_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_2_ce1 = 1'b1;
    end else begin
        Key_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_3_ce0 = 1'b1;
    end else begin
        Key_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_3_ce1 = 1'b1;
    end else begin
        Key_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_4_ce0 = 1'b1;
    end else begin
        Key_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_4_ce1 = 1'b1;
    end else begin
        Key_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_5_ce0 = 1'b1;
    end else begin
        Key_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_5_ce1 = 1'b1;
    end else begin
        Key_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_6_ce0 = 1'b1;
    end else begin
        Key_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_6_ce1 = 1'b1;
    end else begin
        Key_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_7_ce0 = 1'b1;
    end else begin
        Key_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Key_7_ce1 = 1'b1;
    end else begin
        Key_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_0_address0 = zext_ln204_fu_1240_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_0_address0 = 64'd0;
    end else begin
        RoundKey_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_0_address1 = zext_ln204_1_fu_1788_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_0_address1 = 64'd1;
    end else begin
        RoundKey_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_0_ce0 = 1'b1;
    end else begin
        RoundKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_0_ce1 = 1'b1;
    end else begin
        RoundKey_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_0_d1 = xor_ln204_fu_1782_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_0_d1 = Key_0_q1;
    end else begin
        RoundKey_0_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_0_we0 = 1'b1;
    end else begin
        RoundKey_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        RoundKey_0_we1 = 1'b1;
    end else begin
        RoundKey_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_1_address0 = zext_ln205_fu_1271_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_1_address0 = 64'd0;
    end else begin
        RoundKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_1_address1 = zext_ln204_1_fu_1788_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_1_address1 = 64'd1;
    end else begin
        RoundKey_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_1_ce0 = 1'b1;
    end else begin
        RoundKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_1_ce1 = 1'b1;
    end else begin
        RoundKey_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_1_d1 = xor_ln205_fu_1799_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_1_d1 = Key_1_q1;
    end else begin
        RoundKey_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_1_we0 = 1'b1;
    end else begin
        RoundKey_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        RoundKey_1_we1 = 1'b1;
    end else begin
        RoundKey_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_2_address0 = zext_ln206_fu_1292_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_2_address0 = 64'd0;
    end else begin
        RoundKey_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_2_address1 = zext_ln204_1_fu_1788_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_2_address1 = 64'd1;
    end else begin
        RoundKey_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_2_ce0 = 1'b1;
    end else begin
        RoundKey_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_2_ce1 = 1'b1;
    end else begin
        RoundKey_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_2_d1 = xor_ln206_fu_1805_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_2_d1 = Key_2_q1;
    end else begin
        RoundKey_2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_2_we0 = 1'b1;
    end else begin
        RoundKey_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        RoundKey_2_we1 = 1'b1;
    end else begin
        RoundKey_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_3_address0 = zext_ln207_fu_1313_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_3_address0 = 64'd0;
    end else begin
        RoundKey_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_3_address1 = zext_ln204_1_fu_1788_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_3_address1 = 64'd1;
    end else begin
        RoundKey_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_3_ce0 = 1'b1;
    end else begin
        RoundKey_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_3_ce1 = 1'b1;
    end else begin
        RoundKey_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_3_d1 = xor_ln207_fu_1811_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_3_d1 = Key_3_q1;
    end else begin
        RoundKey_3_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_3_we0 = 1'b1;
    end else begin
        RoundKey_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        RoundKey_3_we1 = 1'b1;
    end else begin
        RoundKey_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_4_address0 = zext_ln204_2_fu_1334_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_4_address0 = 64'd0;
    end else begin
        RoundKey_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_4_address1 = zext_ln204_1_fu_1788_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_4_address1 = 64'd1;
    end else begin
        RoundKey_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_4_ce0 = 1'b1;
    end else begin
        RoundKey_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_4_ce1 = 1'b1;
    end else begin
        RoundKey_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_4_d1 = xor_ln204_1_fu_1817_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_4_d1 = Key_4_q1;
    end else begin
        RoundKey_4_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_4_we0 = 1'b1;
    end else begin
        RoundKey_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        RoundKey_4_we1 = 1'b1;
    end else begin
        RoundKey_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_5_address0 = zext_ln205_1_fu_1355_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_5_address0 = 64'd0;
    end else begin
        RoundKey_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_5_address1 = zext_ln204_1_fu_1788_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_5_address1 = 64'd1;
    end else begin
        RoundKey_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_5_ce0 = 1'b1;
    end else begin
        RoundKey_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_5_ce1 = 1'b1;
    end else begin
        RoundKey_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_5_d1 = xor_ln205_1_fu_1823_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_5_d1 = Key_5_q1;
    end else begin
        RoundKey_5_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_5_we0 = 1'b1;
    end else begin
        RoundKey_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        RoundKey_5_we1 = 1'b1;
    end else begin
        RoundKey_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_6_address0 = zext_ln206_1_fu_1376_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_6_address0 = 64'd0;
    end else begin
        RoundKey_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_6_address1 = zext_ln204_1_fu_1788_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_6_address1 = 64'd1;
    end else begin
        RoundKey_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_6_ce0 = 1'b1;
    end else begin
        RoundKey_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_6_ce1 = 1'b1;
    end else begin
        RoundKey_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_6_d1 = xor_ln206_1_fu_1829_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_6_d1 = Key_6_q1;
    end else begin
        RoundKey_6_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_6_we0 = 1'b1;
    end else begin
        RoundKey_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        RoundKey_6_we1 = 1'b1;
    end else begin
        RoundKey_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_7_address0 = zext_ln207_1_fu_1397_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_7_address0 = 64'd0;
    end else begin
        RoundKey_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_7_address1 = zext_ln204_1_fu_1788_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_7_address1 = 64'd1;
    end else begin
        RoundKey_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_7_ce0 = 1'b1;
    end else begin
        RoundKey_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_7_ce1 = 1'b1;
    end else begin
        RoundKey_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_7_d1 = xor_ln207_1_fu_1835_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_7_d1 = Key_7_q1;
    end else begin
        RoundKey_7_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_7_we0 = 1'b1;
    end else begin
        RoundKey_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        RoundKey_7_we1 = 1'b1;
    end else begin
        RoundKey_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_a_1_0_phi_fu_1104_p4 = xor_ln188_reg_2045;
    end else begin
        ap_phi_mux_a_1_0_phi_fu_1104_p4 = a_1_0_reg_1101;
    end
end

always @ (*) begin
    if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_b_1_0_phi_fu_1094_p4 = select_ln25_13_reg_2130;
    end else begin
        ap_phi_mux_b_1_0_phi_fu_1094_p4 = b_1_0_reg_1091;
    end
end

always @ (*) begin
    if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_c_1_0_phi_fu_1084_p4 = select_ln25_20_reg_2175;
    end else begin
        ap_phi_mux_c_1_0_phi_fu_1084_p4 = c_1_0_reg_1081;
    end
end

always @ (*) begin
    if (((icmp_ln183_reg_1951 == 1'd1) & (icmp_ln176_reg_1947 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_d_1_0_phi_fu_1074_p4 = grp_fu_1163_p3;
    end else begin
        ap_phi_mux_d_1_0_phi_fu_1074_p4 = d_1_0_reg_1071;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1121_p0 = icmp_ln25_27_fu_1748_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_1121_p0 = icmp_ln25_20_fu_1649_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_1121_p0 = icmp_ln25_13_fu_1550_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1121_p0 = icmp_ln25_6_fu_1445_p2;
    end else begin
        grp_fu_1121_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1128_p0 = icmp_ln25_25_fu_1735_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_1128_p0 = icmp_ln25_18_fu_1636_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_1128_p0 = icmp_ln25_11_fu_1537_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1128_p0 = icmp_ln25_4_fu_1432_p2;
    end else begin
        grp_fu_1128_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1135_p0 = icmp_ln25_23_fu_1722_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_1135_p0 = icmp_ln25_16_fu_1623_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_1135_p0 = icmp_ln25_9_fu_1524_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1135_p0 = icmp_ln25_2_fu_1419_p2;
    end else begin
        grp_fu_1135_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1142_p0 = icmp_ln25_21_fu_1709_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_1142_p0 = icmp_ln25_14_fu_1610_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_1142_p0 = icmp_ln25_7_fu_1511_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1142_p0 = icmp_ln25_fu_1406_p2;
    end else begin
        grp_fu_1142_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1149_p0 = or_ln25_12_fu_1755_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_1149_p0 = or_ln25_8_fu_1656_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_1149_p0 = or_ln25_4_fu_1557_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1149_p0 = or_ln25_fu_1452_p2;
    end else begin
        grp_fu_1149_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1156_p0 = or_ln25_14_fu_1768_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_1156_p0 = or_ln25_10_fu_1669_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_1156_p0 = or_ln25_6_fu_1570_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1156_p0 = or_ln25_2_fu_1465_p2;
    end else begin
        grp_fu_1156_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1163_p0 = or_ln25_15_fu_1775_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_1163_p0 = or_ln25_11_fu_1676_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_1163_p0 = or_ln25_7_fu_1577_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_1163_p0 = or_ln25_3_fu_1472_p2;
    end else begin
        grp_fu_1163_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_0_address0 = zext_ln191_fu_1693_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_0_address0 = zext_ln190_fu_1594_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_0_address0 = zext_ln189_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_0_address0 = zext_ln188_fu_1197_p1;
    end else begin
        sbox_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sbox_0_ce0 = 1'b1;
    end else begin
        sbox_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_1_address0 = zext_ln191_fu_1693_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_1_address0 = zext_ln190_fu_1594_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_1_address0 = zext_ln189_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_1_address0 = zext_ln188_fu_1197_p1;
    end else begin
        sbox_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sbox_1_ce0 = 1'b1;
    end else begin
        sbox_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_2_address0 = zext_ln191_fu_1693_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_2_address0 = zext_ln190_fu_1594_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_2_address0 = zext_ln189_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_2_address0 = zext_ln188_fu_1197_p1;
    end else begin
        sbox_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sbox_2_ce0 = 1'b1;
    end else begin
        sbox_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_3_address0 = zext_ln191_fu_1693_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_3_address0 = zext_ln190_fu_1594_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_3_address0 = zext_ln189_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_3_address0 = zext_ln188_fu_1197_p1;
    end else begin
        sbox_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sbox_3_ce0 = 1'b1;
    end else begin
        sbox_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_4_address0 = zext_ln191_fu_1693_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_4_address0 = zext_ln190_fu_1594_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_4_address0 = zext_ln189_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_4_address0 = zext_ln188_fu_1197_p1;
    end else begin
        sbox_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sbox_4_ce0 = 1'b1;
    end else begin
        sbox_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_5_address0 = zext_ln191_fu_1693_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_5_address0 = zext_ln190_fu_1594_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_5_address0 = zext_ln189_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_5_address0 = zext_ln188_fu_1197_p1;
    end else begin
        sbox_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sbox_5_ce0 = 1'b1;
    end else begin
        sbox_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_6_address0 = zext_ln191_fu_1693_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_6_address0 = zext_ln190_fu_1594_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_6_address0 = zext_ln189_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_6_address0 = zext_ln188_fu_1197_p1;
    end else begin
        sbox_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sbox_6_ce0 = 1'b1;
    end else begin
        sbox_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_7_address0 = zext_ln191_fu_1693_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_7_address0 = zext_ln190_fu_1594_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_7_address0 = zext_ln189_fu_1495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sbox_7_address0 = zext_ln188_fu_1197_p1;
    end else begin
        sbox_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sbox_7_ce0 = 1'b1;
    end else begin
        sbox_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln176_fu_1171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Key_0_address0 = 64'd0;

assign Key_0_address1 = 64'd1;

assign Key_1_address0 = 64'd0;

assign Key_1_address1 = 64'd1;

assign Key_2_address0 = 64'd0;

assign Key_2_address1 = 64'd1;

assign Key_3_address0 = 64'd0;

assign Key_3_address1 = 64'd1;

assign Key_4_address0 = 64'd0;

assign Key_4_address1 = 64'd1;

assign Key_5_address0 = 64'd0;

assign Key_5_address1 = 64'd1;

assign Key_6_address0 = 64'd0;

assign Key_6_address1 = 64'd1;

assign Key_7_address0 = 64'd0;

assign Key_7_address1 = 64'd1;

assign Rcon_address0 = zext_ln188_1_fu_1219_p1;

assign RoundKey_0_d0 = Key_0_q0;

assign RoundKey_1_d0 = Key_1_q0;

assign RoundKey_2_d0 = Key_2_q0;

assign RoundKey_3_d0 = Key_3_q0;

assign RoundKey_4_d0 = Key_4_q0;

assign RoundKey_5_d0 = Key_5_q0;

assign RoundKey_6_d0 = Key_6_q0;

assign RoundKey_7_d0 = Key_7_q0;

assign add_ln176_fu_1841_p2 = (s_0_0_reg_1059 + 8'd8);

assign add_ln204_1_fu_1318_p2 = ($signed(s_0_0_reg_1059) + $signed(8'd244));

assign add_ln204_fu_1224_p2 = ($signed(s_0_0_reg_1059) + $signed(8'd240));

assign add_ln205_1_fu_1339_p2 = ($signed(s_0_0_reg_1059) + $signed(8'd245));

assign add_ln205_fu_1255_p2 = ($signed(s_0_0_reg_1059) + $signed(8'd241));

assign add_ln206_1_fu_1360_p2 = ($signed(s_0_0_reg_1059) + $signed(8'd246));

assign add_ln206_fu_1276_p2 = ($signed(s_0_0_reg_1059) + $signed(8'd242));

assign add_ln207_1_fu_1381_p2 = ($signed(s_0_0_reg_1059) + $signed(8'd247));

assign add_ln207_fu_1297_p2 = ($signed(s_0_0_reg_1059) + $signed(8'd243));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign empty_7_fu_1177_p1 = s_0_0_reg_1059[3:0];

assign grp_fu_1121_p3 = ((grp_fu_1121_p0[0:0] === 1'b1) ? sbox_6_q0 : sbox_5_q0);

assign grp_fu_1128_p3 = ((grp_fu_1128_p0[0:0] === 1'b1) ? sbox_4_q0 : sbox_3_q0);

assign grp_fu_1135_p3 = ((grp_fu_1135_p0[0:0] === 1'b1) ? sbox_2_q0 : sbox_1_q0);

assign grp_fu_1142_p3 = ((grp_fu_1142_p0[0:0] === 1'b1) ? sbox_0_q0 : sbox_7_q0);

assign grp_fu_1149_p3 = ((grp_fu_1149_p0[0:0] === 1'b1) ? grp_fu_1121_p3 : grp_fu_1128_p3);

assign grp_fu_1156_p3 = ((grp_fu_1156_p0[0:0] === 1'b1) ? grp_fu_1135_p3 : grp_fu_1142_p3);

assign grp_fu_1163_p3 = ((grp_fu_1163_p0[0:0] === 1'b1) ? grp_fu_1149_p3 : grp_fu_1156_p3);

assign icmp_ln176_fu_1171_p2 = ((s_0_0_reg_1059 < 8'd176) ? 1'b1 : 1'b0);

assign icmp_ln183_fu_1181_p2 = ((empty_7_fu_1177_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_10_fu_1531_p2 = ((trunc_ln189_fu_1507_p1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln25_11_fu_1537_p2 = ((trunc_ln189_fu_1507_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln25_12_fu_1544_p2 = ((trunc_ln189_fu_1507_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln25_13_fu_1550_p2 = ((trunc_ln189_fu_1507_p1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln25_14_fu_1610_p2 = ((trunc_ln190_fu_1606_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_15_fu_1617_p2 = ((trunc_ln190_fu_1606_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln25_16_fu_1623_p2 = ((trunc_ln190_fu_1606_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln25_17_fu_1630_p2 = ((trunc_ln190_fu_1606_p1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln25_18_fu_1636_p2 = ((trunc_ln190_fu_1606_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln25_19_fu_1643_p2 = ((trunc_ln190_fu_1606_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln25_1_fu_1413_p2 = ((trunc_ln188_fu_1402_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln25_20_fu_1649_p2 = ((trunc_ln190_fu_1606_p1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln25_21_fu_1709_p2 = ((trunc_ln191_fu_1705_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_22_fu_1716_p2 = ((trunc_ln191_fu_1705_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln25_23_fu_1722_p2 = ((trunc_ln191_fu_1705_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln25_24_fu_1729_p2 = ((trunc_ln191_fu_1705_p1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln25_25_fu_1735_p2 = ((trunc_ln191_fu_1705_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln25_26_fu_1742_p2 = ((trunc_ln191_fu_1705_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln25_27_fu_1748_p2 = ((trunc_ln191_fu_1705_p1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln25_2_fu_1419_p2 = ((trunc_ln188_fu_1402_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln25_3_fu_1426_p2 = ((trunc_ln188_fu_1402_p1 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln25_4_fu_1432_p2 = ((trunc_ln188_fu_1402_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln25_5_fu_1439_p2 = ((trunc_ln188_fu_1402_p1 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln25_6_fu_1445_p2 = ((trunc_ln188_fu_1402_p1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln25_7_fu_1511_p2 = ((trunc_ln189_fu_1507_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_8_fu_1518_p2 = ((trunc_ln189_fu_1507_p1 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln25_9_fu_1524_p2 = ((trunc_ln189_fu_1507_p1 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_1406_p2 = ((trunc_ln188_fu_1402_p1 == 3'd0) ? 1'b1 : 1'b0);

assign lshr_ln188_1_fu_1209_p4 = {{s_0_0_reg_1059[7:4]}};

assign lshr_ln1_fu_1485_p4 = {{c_0_0_reg_1029[7:3]}};

assign lshr_ln204_2_fu_1324_p4 = {{add_ln204_1_fu_1318_p2[7:3]}};

assign lshr_ln205_1_fu_1345_p4 = {{add_ln205_1_fu_1339_p2[7:3]}};

assign lshr_ln206_1_fu_1366_p4 = {{add_ln206_1_fu_1360_p2[7:3]}};

assign lshr_ln207_1_fu_1387_p4 = {{add_ln207_1_fu_1381_p2[7:3]}};

assign lshr_ln2_fu_1584_p4 = {{d_0_0_reg_1019[7:3]}};

assign lshr_ln3_fu_1683_p4 = {{e_0_reg_1049[7:3]}};

assign lshr_ln4_fu_1230_p4 = {{add_ln204_fu_1224_p2[7:3]}};

assign lshr_ln5_fu_1261_p4 = {{add_ln205_fu_1255_p2[7:3]}};

assign lshr_ln6_fu_1282_p4 = {{add_ln206_fu_1276_p2[7:3]}};

assign lshr_ln7_fu_1303_p4 = {{add_ln207_fu_1297_p2[7:3]}};

assign lshr_ln_fu_1187_p4 = {{b_0_0_reg_1039[7:3]}};

assign or_ln25_10_fu_1669_p2 = (icmp_ln25_16_fu_1623_p2 | icmp_ln25_15_fu_1617_p2);

assign or_ln25_11_fu_1676_p2 = (or_ln25_9_fu_1663_p2 | or_ln25_8_fu_1656_p2);

assign or_ln25_12_fu_1755_p2 = (icmp_ln25_27_fu_1748_p2 | icmp_ln25_26_fu_1742_p2);

assign or_ln25_13_fu_1762_p2 = (icmp_ln25_25_fu_1735_p2 | icmp_ln25_24_fu_1729_p2);

assign or_ln25_14_fu_1768_p2 = (icmp_ln25_23_fu_1722_p2 | icmp_ln25_22_fu_1716_p2);

assign or_ln25_15_fu_1775_p2 = (or_ln25_13_fu_1762_p2 | or_ln25_12_fu_1755_p2);

assign or_ln25_1_fu_1459_p2 = (icmp_ln25_4_fu_1432_p2 | icmp_ln25_3_fu_1426_p2);

assign or_ln25_2_fu_1465_p2 = (icmp_ln25_2_fu_1419_p2 | icmp_ln25_1_fu_1413_p2);

assign or_ln25_3_fu_1472_p2 = (or_ln25_fu_1452_p2 | or_ln25_1_fu_1459_p2);

assign or_ln25_4_fu_1557_p2 = (icmp_ln25_13_fu_1550_p2 | icmp_ln25_12_fu_1544_p2);

assign or_ln25_5_fu_1564_p2 = (icmp_ln25_11_fu_1537_p2 | icmp_ln25_10_fu_1531_p2);

assign or_ln25_6_fu_1570_p2 = (icmp_ln25_9_fu_1524_p2 | icmp_ln25_8_fu_1518_p2);

assign or_ln25_7_fu_1577_p2 = (or_ln25_5_fu_1564_p2 | or_ln25_4_fu_1557_p2);

assign or_ln25_8_fu_1656_p2 = (icmp_ln25_20_fu_1649_p2 | icmp_ln25_19_fu_1643_p2);

assign or_ln25_9_fu_1663_p2 = (icmp_ln25_18_fu_1636_p2 | icmp_ln25_17_fu_1630_p2);

assign or_ln25_fu_1452_p2 = (icmp_ln25_6_fu_1445_p2 | icmp_ln25_5_fu_1439_p2);

assign trunc_ln188_fu_1402_p1 = b_0_0_reg_1039[2:0];

assign trunc_ln189_fu_1507_p1 = c_0_0_reg_1029[2:0];

assign trunc_ln190_fu_1606_p1 = d_0_0_reg_1019[2:0];

assign trunc_ln191_fu_1705_p1 = e_0_reg_1049[2:0];

assign xor_ln188_fu_1479_p2 = (grp_fu_1163_p3 ^ Rcon_q0);

assign xor_ln204_1_fu_1817_p2 = (xor_ln204_fu_1782_p2 ^ RoundKey_4_load_reg_2110);

assign xor_ln204_fu_1782_p2 = (ap_phi_mux_a_1_0_phi_fu_1104_p4 ^ RoundKey_0_load_reg_2090);

assign xor_ln205_1_fu_1823_p2 = (xor_ln205_fu_1799_p2 ^ RoundKey_5_load_reg_2115);

assign xor_ln205_fu_1799_p2 = (ap_phi_mux_b_1_0_phi_fu_1094_p4 ^ RoundKey_1_load_reg_2095);

assign xor_ln206_1_fu_1829_p2 = (xor_ln206_fu_1805_p2 ^ RoundKey_6_load_reg_2120);

assign xor_ln206_fu_1805_p2 = (ap_phi_mux_c_1_0_phi_fu_1084_p4 ^ RoundKey_2_load_reg_2100);

assign xor_ln207_1_fu_1835_p2 = (xor_ln207_fu_1811_p2 ^ RoundKey_7_load_reg_2125);

assign xor_ln207_fu_1811_p2 = (ap_phi_mux_d_1_0_phi_fu_1074_p4 ^ RoundKey_3_load_reg_2105);

assign zext_ln188_1_fu_1219_p1 = lshr_ln188_1_fu_1209_p4;

assign zext_ln188_fu_1197_p1 = lshr_ln_fu_1187_p4;

assign zext_ln189_fu_1495_p1 = lshr_ln1_fu_1485_p4;

assign zext_ln190_fu_1594_p1 = lshr_ln2_fu_1584_p4;

assign zext_ln191_fu_1693_p1 = lshr_ln3_fu_1683_p4;

assign zext_ln204_1_fu_1788_p1 = lshr_ln204_1_reg_2005;

assign zext_ln204_2_fu_1334_p1 = lshr_ln204_2_fu_1324_p4;

assign zext_ln204_fu_1240_p1 = lshr_ln4_fu_1230_p4;

assign zext_ln205_1_fu_1355_p1 = lshr_ln205_1_fu_1345_p4;

assign zext_ln205_fu_1271_p1 = lshr_ln5_fu_1261_p4;

assign zext_ln206_1_fu_1376_p1 = lshr_ln206_1_fu_1366_p4;

assign zext_ln206_fu_1292_p1 = lshr_ln6_fu_1282_p4;

assign zext_ln207_1_fu_1397_p1 = lshr_ln207_1_fu_1387_p4;

assign zext_ln207_fu_1313_p1 = lshr_ln7_fu_1303_p4;

endmodule //KeyExpansion
