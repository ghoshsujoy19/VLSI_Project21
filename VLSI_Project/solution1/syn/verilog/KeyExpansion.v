// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="KeyExpansion,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.344444,HLS_SYN_LAT=130,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=75,HLS_SYN_LUT=1635,HLS_VERSION=2019_2}" *)

module KeyExpansion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RoundKey_0_address0,
        RoundKey_0_ce0,
        RoundKey_0_we0,
        RoundKey_0_d0,
        RoundKey_0_q0,
        RoundKey_1_address0,
        RoundKey_1_ce0,
        RoundKey_1_we0,
        RoundKey_1_d0,
        RoundKey_1_q0,
        RoundKey_2_address0,
        RoundKey_2_ce0,
        RoundKey_2_we0,
        RoundKey_2_d0,
        RoundKey_2_q0,
        RoundKey_3_address0,
        RoundKey_3_ce0,
        RoundKey_3_we0,
        RoundKey_3_d0,
        RoundKey_3_q0,
        Key_0_address0,
        Key_0_ce0,
        Key_0_q0,
        Key_1_address0,
        Key_1_ce0,
        Key_1_q0,
        Key_2_address0,
        Key_2_ce0,
        Key_2_q0,
        Key_3_address0,
        Key_3_ce0,
        Key_3_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] RoundKey_0_address0;
output   RoundKey_0_ce0;
output   RoundKey_0_we0;
output  [7:0] RoundKey_0_d0;
input  [7:0] RoundKey_0_q0;
output  [5:0] RoundKey_1_address0;
output   RoundKey_1_ce0;
output   RoundKey_1_we0;
output  [7:0] RoundKey_1_d0;
input  [7:0] RoundKey_1_q0;
output  [5:0] RoundKey_2_address0;
output   RoundKey_2_ce0;
output   RoundKey_2_we0;
output  [7:0] RoundKey_2_d0;
input  [7:0] RoundKey_2_q0;
output  [5:0] RoundKey_3_address0;
output   RoundKey_3_ce0;
output   RoundKey_3_we0;
output  [7:0] RoundKey_3_d0;
input  [7:0] RoundKey_3_q0;
output  [1:0] Key_0_address0;
output   Key_0_ce0;
input  [7:0] Key_0_q0;
output  [1:0] Key_1_address0;
output   Key_1_ce0;
input  [7:0] Key_1_q0;
output  [1:0] Key_2_address0;
output   Key_2_ce0;
input  [7:0] Key_2_q0;
output  [1:0] Key_3_address0;
output   Key_3_ce0;
input  [7:0] Key_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] RoundKey_0_address0;
reg RoundKey_0_ce0;
reg RoundKey_0_we0;
reg[7:0] RoundKey_0_d0;
reg[5:0] RoundKey_1_address0;
reg RoundKey_1_ce0;
reg RoundKey_1_we0;
reg[7:0] RoundKey_1_d0;
reg[5:0] RoundKey_2_address0;
reg RoundKey_2_ce0;
reg RoundKey_2_we0;
reg[7:0] RoundKey_2_d0;
reg[5:0] RoundKey_3_address0;
reg RoundKey_3_ce0;
reg RoundKey_3_we0;
reg[7:0] RoundKey_3_d0;
reg Key_0_ce0;
reg Key_1_ce0;
reg Key_2_ce0;
reg Key_3_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] sbox_address0;
reg    sbox_ce0;
wire   [31:0] sbox_q0;
wire   [5:0] sbox_address1;
reg    sbox_ce1;
wire   [31:0] sbox_q1;
wire   [5:0] sbox_address2;
reg    sbox_ce2;
wire   [31:0] sbox_q2;
wire   [5:0] sbox_address3;
reg    sbox_ce3;
wire   [31:0] sbox_q3;
wire   [3:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
wire   [2:0] i_fu_373_p2;
reg   [2:0] i_reg_1088;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln167_fu_379_p1;
reg   [63:0] zext_ln167_reg_1093;
wire   [0:0] icmp_ln164_fu_367_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln177_fu_387_p2;
reg   [5:0] lshr_ln6_reg_1144;
reg   [7:0] tempa_0_3_reg_1149;
wire    ap_CS_fsm_state5;
reg   [7:0] tempa_1_reg_1154;
reg   [7:0] tempa_2_reg_1159;
reg   [7:0] tempa_3_reg_1164;
wire   [1:0] empty_17_fu_456_p1;
reg   [1:0] empty_17_reg_1174;
wire   [1:0] empty_19_fu_475_p1;
reg   [1:0] empty_19_reg_1184;
wire   [1:0] empty_21_fu_494_p1;
reg   [1:0] empty_21_reg_1194;
wire   [1:0] empty_23_fu_513_p1;
reg   [1:0] empty_23_reg_1204;
wire   [5:0] i_2_fu_1079_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] i_0_reg_344;
wire    ap_CS_fsm_state3;
reg   [5:0] i_1_reg_355;
wire   [63:0] zext_ln181_fu_417_p1;
wire   [63:0] zext_ln207_fu_451_p1;
wire   [63:0] zext_ln208_fu_470_p1;
wire   [63:0] zext_ln209_fu_489_p1;
wire   [63:0] zext_ln210_fu_508_p1;
wire   [63:0] zext_ln212_fu_527_p1;
wire   [63:0] zext_ln227_fu_532_p1;
wire   [63:0] zext_ln227_1_fu_1050_p1;
wire   [7:0] xor_ln227_fu_1043_p2;
wire   [7:0] xor_ln228_fu_1058_p2;
wire   [7:0] xor_ln229_fu_1065_p2;
wire   [7:0] xor_ln230_fu_1072_p2;
wire   [7:0] j_fu_393_p3;
wire   [7:0] add_ln181_fu_401_p2;
wire   [5:0] lshr_ln_fu_407_p4;
wire   [7:0] add_ln227_fu_425_p2;
wire   [5:0] lshr_ln1_fu_441_p4;
wire   [5:0] lshr_ln2_fu_460_p4;
wire   [5:0] lshr_ln3_fu_479_p4;
wire   [5:0] lshr_ln4_fu_498_p4;
wire   [3:0] lshr_ln5_fu_517_p4;
wire   [1:0] trunc_ln177_fu_539_p1;
wire   [4:0] tmp_2_fu_549_p3;
wire   [4:0] empty_18_fu_556_p2;
wire   [5:0] zext_ln207_1_fu_568_p1;
wire   [5:0] zext_ln207_2_fu_572_p1;
wire   [0:0] icmp_ln207_fu_562_p2;
wire   [5:0] sub_ln207_fu_586_p2;
wire   [5:0] sub_ln207_1_fu_598_p2;
reg   [31:0] tmp_fu_576_p4;
wire   [5:0] xor_ln207_fu_592_p2;
wire   [5:0] select_ln207_fu_604_p3;
wire   [5:0] select_ln207_2_fu_620_p3;
wire   [5:0] sub_ln207_2_fu_628_p2;
wire   [31:0] select_ln207_1_fu_612_p3;
wire   [31:0] zext_ln207_3_fu_634_p1;
wire   [31:0] zext_ln207_4_fu_638_p1;
wire   [31:0] lshr_ln207_fu_642_p2;
wire   [31:0] lshr_ln207_1_fu_648_p2;
wire   [31:0] and_ln207_fu_654_p2;
wire   [4:0] tmp_4_fu_664_p3;
wire   [4:0] empty_20_fu_671_p2;
wire   [5:0] zext_ln208_1_fu_683_p1;
wire   [5:0] zext_ln208_2_fu_687_p1;
wire   [0:0] icmp_ln208_fu_677_p2;
wire   [5:0] sub_ln208_fu_701_p2;
wire   [5:0] sub_ln208_1_fu_713_p2;
reg   [31:0] tmp_1_fu_691_p4;
wire   [5:0] xor_ln208_fu_707_p2;
wire   [5:0] select_ln208_fu_719_p3;
wire   [5:0] select_ln208_2_fu_735_p3;
wire   [5:0] sub_ln208_2_fu_743_p2;
wire   [31:0] select_ln208_1_fu_727_p3;
wire   [31:0] zext_ln208_3_fu_749_p1;
wire   [31:0] zext_ln208_4_fu_753_p1;
wire   [31:0] lshr_ln208_fu_757_p2;
wire   [31:0] lshr_ln208_1_fu_763_p2;
wire   [31:0] and_ln208_fu_769_p2;
wire   [4:0] tmp_6_fu_779_p3;
wire   [4:0] empty_22_fu_786_p2;
wire   [5:0] zext_ln209_1_fu_798_p1;
wire   [5:0] zext_ln209_2_fu_802_p1;
wire   [0:0] icmp_ln209_fu_792_p2;
wire   [5:0] sub_ln209_fu_816_p2;
wire   [5:0] sub_ln209_1_fu_828_p2;
reg   [31:0] tmp_3_fu_806_p4;
wire   [5:0] xor_ln209_fu_822_p2;
wire   [5:0] select_ln209_fu_834_p3;
wire   [5:0] select_ln209_2_fu_850_p3;
wire   [5:0] sub_ln209_2_fu_858_p2;
wire   [31:0] select_ln209_1_fu_842_p3;
wire   [31:0] zext_ln209_3_fu_864_p1;
wire   [31:0] zext_ln209_4_fu_868_p1;
wire   [31:0] lshr_ln209_fu_872_p2;
wire   [31:0] lshr_ln209_1_fu_878_p2;
wire   [31:0] and_ln209_fu_884_p2;
wire   [4:0] tmp_8_fu_894_p3;
wire   [4:0] empty_24_fu_901_p2;
wire   [5:0] zext_ln210_1_fu_913_p1;
wire   [5:0] zext_ln210_2_fu_917_p1;
wire   [0:0] icmp_ln210_fu_907_p2;
wire   [5:0] sub_ln210_fu_931_p2;
wire   [5:0] sub_ln210_1_fu_943_p2;
reg   [31:0] tmp_5_fu_921_p4;
wire   [5:0] xor_ln210_fu_937_p2;
wire   [5:0] select_ln210_fu_949_p3;
wire   [5:0] select_ln210_2_fu_965_p3;
wire   [5:0] sub_ln210_2_fu_973_p2;
wire   [31:0] select_ln210_1_fu_957_p3;
wire   [31:0] zext_ln210_3_fu_979_p1;
wire   [31:0] zext_ln210_4_fu_983_p1;
wire   [31:0] lshr_ln210_fu_987_p2;
wire   [31:0] lshr_ln210_1_fu_993_p2;
wire   [31:0] and_ln210_fu_999_p2;
wire   [7:0] trunc_ln207_fu_660_p1;
wire   [0:0] icmp_ln188_fu_543_p2;
wire   [7:0] tempa_3_1_fu_1005_p1;
wire   [7:0] tempa_2_1_fu_890_p1;
wire   [7:0] tempa_1_1_fu_775_p1;
wire   [7:0] tempa_0_fu_1009_p2;
wire   [7:0] tempa_0_2_fu_1036_p3;
wire   [7:0] tempa_1_2_fu_1029_p3;
wire   [7:0] tempa_2_2_fu_1022_p3;
wire   [7:0] tempa_3_2_fu_1015_p3;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

KeyExpansion_sbox #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1),
    .address2(sbox_address2),
    .ce2(sbox_ce2),
    .q2(sbox_q2),
    .address3(sbox_address3),
    .ce3(sbox_ce3),
    .q3(sbox_q3)
);

KeyExpansion_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_344 <= i_reg_1088;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_344 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln164_fu_367_p2 == 1'd1))) begin
        i_1_reg_355 <= 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_355 <= i_2_fu_1079_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_17_reg_1174 <= empty_17_fu_456_p1;
        empty_19_reg_1184 <= empty_19_fu_475_p1;
        empty_21_reg_1194 <= empty_21_fu_494_p1;
        empty_23_reg_1204 <= empty_23_fu_513_p1;
        tempa_0_3_reg_1149 <= RoundKey_0_q0;
        tempa_1_reg_1154 <= RoundKey_1_q0;
        tempa_2_reg_1159 <= RoundKey_2_q0;
        tempa_3_reg_1164 <= RoundKey_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1088 <= i_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln177_fu_387_p2 == 1'd0))) begin
        lshr_ln6_reg_1144 <= {{add_ln227_fu_425_p2[7:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln164_fu_367_p2 == 1'd0))) begin
        zext_ln167_reg_1093[2 : 0] <= zext_ln167_fu_379_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_0_ce0 = 1'b1;
    end else begin
        Key_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_1_ce0 = 1'b1;
    end else begin
        Key_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_2_ce0 = 1'b1;
    end else begin
        Key_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_3_ce0 = 1'b1;
    end else begin
        Key_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_0_address0 = zext_ln227_1_fu_1050_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_0_address0 = zext_ln227_fu_532_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_0_address0 = zext_ln181_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_0_address0 = zext_ln167_reg_1093;
    end else begin
        RoundKey_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_0_ce0 = 1'b1;
    end else begin
        RoundKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_0_d0 = xor_ln227_fu_1043_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_0_d0 = Key_0_q0;
    end else begin
        RoundKey_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        RoundKey_0_we0 = 1'b1;
    end else begin
        RoundKey_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_1_address0 = zext_ln227_1_fu_1050_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_1_address0 = zext_ln227_fu_532_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_1_address0 = zext_ln181_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_1_address0 = zext_ln167_reg_1093;
    end else begin
        RoundKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_1_ce0 = 1'b1;
    end else begin
        RoundKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_1_d0 = xor_ln228_fu_1058_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_1_d0 = Key_1_q0;
    end else begin
        RoundKey_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        RoundKey_1_we0 = 1'b1;
    end else begin
        RoundKey_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_2_address0 = zext_ln227_1_fu_1050_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_2_address0 = zext_ln227_fu_532_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_2_address0 = zext_ln181_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_2_address0 = zext_ln167_reg_1093;
    end else begin
        RoundKey_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_2_ce0 = 1'b1;
    end else begin
        RoundKey_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_2_d0 = xor_ln229_fu_1065_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_2_d0 = Key_2_q0;
    end else begin
        RoundKey_2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        RoundKey_2_we0 = 1'b1;
    end else begin
        RoundKey_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_3_address0 = zext_ln227_1_fu_1050_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_3_address0 = zext_ln227_fu_532_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_3_address0 = zext_ln181_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_3_address0 = zext_ln167_reg_1093;
    end else begin
        RoundKey_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_3_ce0 = 1'b1;
    end else begin
        RoundKey_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_3_d0 = xor_ln230_fu_1072_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_3_d0 = Key_3_q0;
    end else begin
        RoundKey_3_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        RoundKey_3_we0 = 1'b1;
    end else begin
        RoundKey_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln177_fu_387_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln177_fu_387_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_ce2 = 1'b1;
    end else begin
        sbox_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sbox_ce3 = 1'b1;
    end else begin
        sbox_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln164_fu_367_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln177_fu_387_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Key_0_address0 = zext_ln167_fu_379_p1;

assign Key_1_address0 = zext_ln167_fu_379_p1;

assign Key_2_address0 = zext_ln167_fu_379_p1;

assign Key_3_address0 = zext_ln167_fu_379_p1;

assign Rcon_address0 = zext_ln212_fu_527_p1;

assign add_ln181_fu_401_p2 = ($signed(8'd252) + $signed(j_fu_393_p3));

assign add_ln227_fu_425_p2 = ($signed(8'd240) + $signed(j_fu_393_p3));

assign and_ln207_fu_654_p2 = (lshr_ln207_fu_642_p2 & lshr_ln207_1_fu_648_p2);

assign and_ln208_fu_769_p2 = (lshr_ln208_fu_757_p2 & lshr_ln208_1_fu_763_p2);

assign and_ln209_fu_884_p2 = (lshr_ln209_fu_872_p2 & lshr_ln209_1_fu_878_p2);

assign and_ln210_fu_999_p2 = (lshr_ln210_fu_987_p2 & lshr_ln210_1_fu_993_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign empty_17_fu_456_p1 = RoundKey_1_q0[1:0];

assign empty_18_fu_556_p2 = (tmp_2_fu_549_p3 | 5'd7);

assign empty_19_fu_475_p1 = RoundKey_2_q0[1:0];

assign empty_20_fu_671_p2 = (tmp_4_fu_664_p3 | 5'd7);

assign empty_21_fu_494_p1 = RoundKey_3_q0[1:0];

assign empty_22_fu_786_p2 = (tmp_6_fu_779_p3 | 5'd7);

assign empty_23_fu_513_p1 = RoundKey_0_q0[1:0];

assign empty_24_fu_901_p2 = (tmp_8_fu_894_p3 | 5'd7);

assign i_2_fu_1079_p2 = (6'd1 + i_1_reg_355);

assign i_fu_373_p2 = (i_0_reg_344 + 3'd1);

assign icmp_ln164_fu_367_p2 = ((i_0_reg_344 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_387_p2 = ((i_1_reg_355 == 6'd44) ? 1'b1 : 1'b0);

assign icmp_ln188_fu_543_p2 = ((trunc_ln177_fu_539_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_562_p2 = ((tmp_2_fu_549_p3 > empty_18_fu_556_p2) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_677_p2 = ((tmp_4_fu_664_p3 > empty_20_fu_671_p2) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_792_p2 = ((tmp_6_fu_779_p3 > empty_22_fu_786_p2) ? 1'b1 : 1'b0);

assign icmp_ln210_fu_907_p2 = ((tmp_8_fu_894_p3 > empty_24_fu_901_p2) ? 1'b1 : 1'b0);

assign j_fu_393_p3 = {{i_1_reg_355}, {2'd0}};

assign lshr_ln1_fu_441_p4 = {{RoundKey_1_q0[7:2]}};

assign lshr_ln207_1_fu_648_p2 = 32'd4294967295 >> zext_ln207_4_fu_638_p1;

assign lshr_ln207_fu_642_p2 = select_ln207_1_fu_612_p3 >> zext_ln207_3_fu_634_p1;

assign lshr_ln208_1_fu_763_p2 = 32'd4294967295 >> zext_ln208_4_fu_753_p1;

assign lshr_ln208_fu_757_p2 = select_ln208_1_fu_727_p3 >> zext_ln208_3_fu_749_p1;

assign lshr_ln209_1_fu_878_p2 = 32'd4294967295 >> zext_ln209_4_fu_868_p1;

assign lshr_ln209_fu_872_p2 = select_ln209_1_fu_842_p3 >> zext_ln209_3_fu_864_p1;

assign lshr_ln210_1_fu_993_p2 = 32'd4294967295 >> zext_ln210_4_fu_983_p1;

assign lshr_ln210_fu_987_p2 = select_ln210_1_fu_957_p3 >> zext_ln210_3_fu_979_p1;

assign lshr_ln2_fu_460_p4 = {{RoundKey_2_q0[7:2]}};

assign lshr_ln3_fu_479_p4 = {{RoundKey_3_q0[7:2]}};

assign lshr_ln4_fu_498_p4 = {{RoundKey_0_q0[7:2]}};

assign lshr_ln5_fu_517_p4 = {{i_1_reg_355[5:2]}};

assign lshr_ln_fu_407_p4 = {{add_ln181_fu_401_p2[7:2]}};

assign sbox_address0 = zext_ln207_fu_451_p1;

assign sbox_address1 = zext_ln208_fu_470_p1;

assign sbox_address2 = zext_ln209_fu_489_p1;

assign sbox_address3 = zext_ln210_fu_508_p1;

assign select_ln207_1_fu_612_p3 = ((icmp_ln207_fu_562_p2[0:0] === 1'b1) ? tmp_fu_576_p4 : sbox_q0);

assign select_ln207_2_fu_620_p3 = ((icmp_ln207_fu_562_p2[0:0] === 1'b1) ? xor_ln207_fu_592_p2 : zext_ln207_1_fu_568_p1);

assign select_ln207_fu_604_p3 = ((icmp_ln207_fu_562_p2[0:0] === 1'b1) ? sub_ln207_fu_586_p2 : sub_ln207_1_fu_598_p2);

assign select_ln208_1_fu_727_p3 = ((icmp_ln208_fu_677_p2[0:0] === 1'b1) ? tmp_1_fu_691_p4 : sbox_q1);

assign select_ln208_2_fu_735_p3 = ((icmp_ln208_fu_677_p2[0:0] === 1'b1) ? xor_ln208_fu_707_p2 : zext_ln208_1_fu_683_p1);

assign select_ln208_fu_719_p3 = ((icmp_ln208_fu_677_p2[0:0] === 1'b1) ? sub_ln208_fu_701_p2 : sub_ln208_1_fu_713_p2);

assign select_ln209_1_fu_842_p3 = ((icmp_ln209_fu_792_p2[0:0] === 1'b1) ? tmp_3_fu_806_p4 : sbox_q2);

assign select_ln209_2_fu_850_p3 = ((icmp_ln209_fu_792_p2[0:0] === 1'b1) ? xor_ln209_fu_822_p2 : zext_ln209_1_fu_798_p1);

assign select_ln209_fu_834_p3 = ((icmp_ln209_fu_792_p2[0:0] === 1'b1) ? sub_ln209_fu_816_p2 : sub_ln209_1_fu_828_p2);

assign select_ln210_1_fu_957_p3 = ((icmp_ln210_fu_907_p2[0:0] === 1'b1) ? tmp_5_fu_921_p4 : sbox_q3);

assign select_ln210_2_fu_965_p3 = ((icmp_ln210_fu_907_p2[0:0] === 1'b1) ? xor_ln210_fu_937_p2 : zext_ln210_1_fu_913_p1);

assign select_ln210_fu_949_p3 = ((icmp_ln210_fu_907_p2[0:0] === 1'b1) ? sub_ln210_fu_931_p2 : sub_ln210_1_fu_943_p2);

assign sub_ln207_1_fu_598_p2 = (zext_ln207_2_fu_572_p1 - zext_ln207_1_fu_568_p1);

assign sub_ln207_2_fu_628_p2 = (6'd31 - select_ln207_fu_604_p3);

assign sub_ln207_fu_586_p2 = (zext_ln207_1_fu_568_p1 - zext_ln207_2_fu_572_p1);

assign sub_ln208_1_fu_713_p2 = (zext_ln208_2_fu_687_p1 - zext_ln208_1_fu_683_p1);

assign sub_ln208_2_fu_743_p2 = (6'd31 - select_ln208_fu_719_p3);

assign sub_ln208_fu_701_p2 = (zext_ln208_1_fu_683_p1 - zext_ln208_2_fu_687_p1);

assign sub_ln209_1_fu_828_p2 = (zext_ln209_2_fu_802_p1 - zext_ln209_1_fu_798_p1);

assign sub_ln209_2_fu_858_p2 = (6'd31 - select_ln209_fu_834_p3);

assign sub_ln209_fu_816_p2 = (zext_ln209_1_fu_798_p1 - zext_ln209_2_fu_802_p1);

assign sub_ln210_1_fu_943_p2 = (zext_ln210_2_fu_917_p1 - zext_ln210_1_fu_913_p1);

assign sub_ln210_2_fu_973_p2 = (6'd31 - select_ln210_fu_949_p3);

assign sub_ln210_fu_931_p2 = (zext_ln210_1_fu_913_p1 - zext_ln210_2_fu_917_p1);

assign tempa_0_2_fu_1036_p3 = ((icmp_ln188_fu_543_p2[0:0] === 1'b1) ? tempa_0_fu_1009_p2 : tempa_0_3_reg_1149);

assign tempa_0_fu_1009_p2 = (trunc_ln207_fu_660_p1 ^ Rcon_q0);

assign tempa_1_1_fu_775_p1 = and_ln208_fu_769_p2[7:0];

assign tempa_1_2_fu_1029_p3 = ((icmp_ln188_fu_543_p2[0:0] === 1'b1) ? tempa_1_1_fu_775_p1 : tempa_1_reg_1154);

assign tempa_2_1_fu_890_p1 = and_ln209_fu_884_p2[7:0];

assign tempa_2_2_fu_1022_p3 = ((icmp_ln188_fu_543_p2[0:0] === 1'b1) ? tempa_2_1_fu_890_p1 : tempa_2_reg_1159);

assign tempa_3_1_fu_1005_p1 = and_ln210_fu_999_p2[7:0];

assign tempa_3_2_fu_1015_p3 = ((icmp_ln188_fu_543_p2[0:0] === 1'b1) ? tempa_3_1_fu_1005_p1 : tempa_3_reg_1164);

integer ap_tvar_int_0;

always @ (sbox_q1) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_1_fu_691_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_691_p4[ap_tvar_int_0] = sbox_q1[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_2_fu_549_p3 = {{empty_17_reg_1174}, {3'd0}};

integer ap_tvar_int_1;

always @ (sbox_q2) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_3_fu_806_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_3_fu_806_p4[ap_tvar_int_1] = sbox_q2[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_4_fu_664_p3 = {{empty_19_reg_1184}, {3'd0}};

integer ap_tvar_int_2;

always @ (sbox_q3) begin
    for (ap_tvar_int_2 = 32 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 31 - 0) begin
            tmp_5_fu_921_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_5_fu_921_p4[ap_tvar_int_2] = sbox_q3[31 - ap_tvar_int_2];
        end
    end
end

assign tmp_6_fu_779_p3 = {{empty_21_reg_1194}, {3'd0}};

assign tmp_8_fu_894_p3 = {{empty_23_reg_1204}, {3'd0}};

integer ap_tvar_int_3;

always @ (sbox_q0) begin
    for (ap_tvar_int_3 = 32 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 31 - 0) begin
            tmp_fu_576_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_fu_576_p4[ap_tvar_int_3] = sbox_q0[31 - ap_tvar_int_3];
        end
    end
end

assign trunc_ln177_fu_539_p1 = i_1_reg_355[1:0];

assign trunc_ln207_fu_660_p1 = and_ln207_fu_654_p2[7:0];

assign xor_ln207_fu_592_p2 = (zext_ln207_1_fu_568_p1 ^ 6'd31);

assign xor_ln208_fu_707_p2 = (zext_ln208_1_fu_683_p1 ^ 6'd31);

assign xor_ln209_fu_822_p2 = (zext_ln209_1_fu_798_p1 ^ 6'd31);

assign xor_ln210_fu_937_p2 = (zext_ln210_1_fu_913_p1 ^ 6'd31);

assign xor_ln227_fu_1043_p2 = (tempa_0_2_fu_1036_p3 ^ RoundKey_0_q0);

assign xor_ln228_fu_1058_p2 = (tempa_1_2_fu_1029_p3 ^ RoundKey_1_q0);

assign xor_ln229_fu_1065_p2 = (tempa_2_2_fu_1022_p3 ^ RoundKey_2_q0);

assign xor_ln230_fu_1072_p2 = (tempa_3_2_fu_1015_p3 ^ RoundKey_3_q0);

assign zext_ln167_fu_379_p1 = i_0_reg_344;

assign zext_ln181_fu_417_p1 = lshr_ln_fu_407_p4;

assign zext_ln207_1_fu_568_p1 = tmp_2_fu_549_p3;

assign zext_ln207_2_fu_572_p1 = empty_18_fu_556_p2;

assign zext_ln207_3_fu_634_p1 = select_ln207_2_fu_620_p3;

assign zext_ln207_4_fu_638_p1 = sub_ln207_2_fu_628_p2;

assign zext_ln207_fu_451_p1 = lshr_ln1_fu_441_p4;

assign zext_ln208_1_fu_683_p1 = tmp_4_fu_664_p3;

assign zext_ln208_2_fu_687_p1 = empty_20_fu_671_p2;

assign zext_ln208_3_fu_749_p1 = select_ln208_2_fu_735_p3;

assign zext_ln208_4_fu_753_p1 = sub_ln208_2_fu_743_p2;

assign zext_ln208_fu_470_p1 = lshr_ln2_fu_460_p4;

assign zext_ln209_1_fu_798_p1 = tmp_6_fu_779_p3;

assign zext_ln209_2_fu_802_p1 = empty_22_fu_786_p2;

assign zext_ln209_3_fu_864_p1 = select_ln209_2_fu_850_p3;

assign zext_ln209_4_fu_868_p1 = sub_ln209_2_fu_858_p2;

assign zext_ln209_fu_489_p1 = lshr_ln3_fu_479_p4;

assign zext_ln210_1_fu_913_p1 = tmp_8_fu_894_p3;

assign zext_ln210_2_fu_917_p1 = empty_24_fu_901_p2;

assign zext_ln210_3_fu_979_p1 = select_ln210_2_fu_965_p3;

assign zext_ln210_4_fu_983_p1 = sub_ln210_2_fu_973_p2;

assign zext_ln210_fu_508_p1 = lshr_ln4_fu_498_p4;

assign zext_ln212_fu_527_p1 = lshr_ln5_fu_517_p4;

assign zext_ln227_1_fu_1050_p1 = i_1_reg_355;

assign zext_ln227_fu_532_p1 = lshr_ln6_reg_1144;

always @ (posedge ap_clk) begin
    zext_ln167_reg_1093[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //KeyExpansion
