// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Multiply (
        ap_ready,
        x,
        y,
        ap_return
);


output   ap_ready;
input  [7:0] x;
input  [4:0] y;
output  [7:0] ap_return;

wire   [0:0] trunc_ln349_fu_40_p1;
wire   [7:0] select_ln349_fu_44_p3;
wire   [0:0] tmp_1_fu_72_p3;
wire   [7:0] select_ln309_fu_80_p3;
wire   [7:0] shl_ln309_fu_66_p2;
wire   [0:0] tmp_fu_58_p3;
wire   [7:0] xor_ln309_fu_88_p2;
wire   [7:0] select_ln349_1_fu_94_p3;
wire   [0:0] tmp_3_fu_122_p3;
wire   [7:0] select_ln309_1_fu_130_p3;
wire   [7:0] shl_ln309_1_fu_116_p2;
wire   [0:0] tmp_2_fu_108_p3;
wire   [7:0] xor_ln309_1_fu_138_p2;
wire   [7:0] select_ln349_2_fu_144_p3;
wire   [0:0] tmp_5_fu_172_p3;
wire   [7:0] select_ln309_2_fu_180_p3;
wire   [7:0] shl_ln309_2_fu_166_p2;
wire   [0:0] tmp_4_fu_158_p3;
wire   [7:0] xor_ln309_2_fu_188_p2;
wire   [7:0] select_ln349_3_fu_194_p3;
wire   [7:0] and_ln349_1_fu_102_p2;
wire   [7:0] and_ln349_fu_52_p2;
wire   [7:0] and_ln349_3_fu_202_p2;
wire   [7:0] and_ln349_2_fu_152_p2;
wire   [7:0] xor_ln349_1_fu_214_p2;
wire   [7:0] xor_ln349_fu_208_p2;

assign and_ln349_1_fu_102_p2 = (xor_ln309_fu_88_p2 & select_ln349_1_fu_94_p3);

assign and_ln349_2_fu_152_p2 = (xor_ln309_1_fu_138_p2 & select_ln349_2_fu_144_p3);

assign and_ln349_3_fu_202_p2 = (xor_ln309_2_fu_188_p2 & select_ln349_3_fu_194_p3);

assign and_ln349_fu_52_p2 = (x & select_ln349_fu_44_p3);

assign ap_ready = 1'b1;

assign ap_return = (xor_ln349_fu_208_p2 ^ xor_ln349_1_fu_214_p2);

assign select_ln309_1_fu_130_p3 = ((tmp_3_fu_122_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln309_2_fu_180_p3 = ((tmp_5_fu_172_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln309_fu_80_p3 = ((tmp_1_fu_72_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln349_1_fu_94_p3 = ((tmp_fu_58_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln349_2_fu_144_p3 = ((tmp_2_fu_108_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln349_3_fu_194_p3 = ((tmp_4_fu_158_p3[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln349_fu_44_p3 = ((trunc_ln349_fu_40_p1[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign shl_ln309_1_fu_116_p2 = xor_ln309_fu_88_p2 << 8'd1;

assign shl_ln309_2_fu_166_p2 = xor_ln309_1_fu_138_p2 << 8'd1;

assign shl_ln309_fu_66_p2 = x << 8'd1;

assign tmp_1_fu_72_p3 = x[32'd7];

assign tmp_2_fu_108_p3 = y[32'd2];

assign tmp_3_fu_122_p3 = xor_ln309_fu_88_p2[32'd7];

assign tmp_4_fu_158_p3 = y[32'd3];

assign tmp_5_fu_172_p3 = xor_ln309_1_fu_138_p2[32'd7];

assign tmp_fu_58_p3 = y[32'd1];

assign trunc_ln349_fu_40_p1 = y[0:0];

assign xor_ln309_1_fu_138_p2 = (shl_ln309_1_fu_116_p2 ^ select_ln309_1_fu_130_p3);

assign xor_ln309_2_fu_188_p2 = (shl_ln309_2_fu_166_p2 ^ select_ln309_2_fu_180_p3);

assign xor_ln309_fu_88_p2 = (shl_ln309_fu_66_p2 ^ select_ln309_fu_80_p3);

assign xor_ln349_1_fu_214_p2 = (and_ln349_3_fu_202_p2 ^ and_ln349_2_fu_152_p2);

assign xor_ln349_fu_208_p2 = (and_ln349_fu_52_p2 ^ and_ln349_1_fu_102_p2);

endmodule //Multiply
