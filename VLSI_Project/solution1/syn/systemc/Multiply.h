// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Multiply_HH_
#define _Multiply_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Multiply : public sc_module {
    // Port declarations 4
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > x;
    sc_in< sc_lv<5> > y;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    Multiply(sc_module_name name);
    SC_HAS_PROCESS(Multiply);

    ~Multiply();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > trunc_ln349_fu_40_p1;
    sc_signal< sc_lv<8> > select_ln349_fu_44_p3;
    sc_signal< sc_lv<1> > tmp_1_fu_72_p3;
    sc_signal< sc_lv<8> > select_ln309_fu_80_p3;
    sc_signal< sc_lv<8> > shl_ln309_fu_66_p2;
    sc_signal< sc_lv<1> > tmp_fu_58_p3;
    sc_signal< sc_lv<8> > xor_ln309_fu_88_p2;
    sc_signal< sc_lv<8> > select_ln349_1_fu_94_p3;
    sc_signal< sc_lv<1> > tmp_3_fu_122_p3;
    sc_signal< sc_lv<8> > select_ln309_1_fu_130_p3;
    sc_signal< sc_lv<8> > shl_ln309_1_fu_116_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_108_p3;
    sc_signal< sc_lv<8> > xor_ln309_1_fu_138_p2;
    sc_signal< sc_lv<8> > select_ln349_2_fu_144_p3;
    sc_signal< sc_lv<1> > tmp_5_fu_172_p3;
    sc_signal< sc_lv<8> > select_ln309_2_fu_180_p3;
    sc_signal< sc_lv<8> > shl_ln309_2_fu_166_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_158_p3;
    sc_signal< sc_lv<8> > xor_ln309_2_fu_188_p2;
    sc_signal< sc_lv<8> > select_ln349_3_fu_194_p3;
    sc_signal< sc_lv<8> > and_ln349_1_fu_102_p2;
    sc_signal< sc_lv<8> > and_ln349_fu_52_p2;
    sc_signal< sc_lv<8> > and_ln349_3_fu_202_p2;
    sc_signal< sc_lv<8> > and_ln349_2_fu_152_p2;
    sc_signal< sc_lv<8> > xor_ln349_1_fu_214_p2;
    sc_signal< sc_lv<8> > xor_ln349_fu_208_p2;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_1B;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_and_ln349_1_fu_102_p2();
    void thread_and_ln349_2_fu_152_p2();
    void thread_and_ln349_3_fu_202_p2();
    void thread_and_ln349_fu_52_p2();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_select_ln309_1_fu_130_p3();
    void thread_select_ln309_2_fu_180_p3();
    void thread_select_ln309_fu_80_p3();
    void thread_select_ln349_1_fu_94_p3();
    void thread_select_ln349_2_fu_144_p3();
    void thread_select_ln349_3_fu_194_p3();
    void thread_select_ln349_fu_44_p3();
    void thread_shl_ln309_1_fu_116_p2();
    void thread_shl_ln309_2_fu_166_p2();
    void thread_shl_ln309_fu_66_p2();
    void thread_tmp_1_fu_72_p3();
    void thread_tmp_2_fu_108_p3();
    void thread_tmp_3_fu_122_p3();
    void thread_tmp_4_fu_158_p3();
    void thread_tmp_5_fu_172_p3();
    void thread_tmp_fu_58_p3();
    void thread_trunc_ln349_fu_40_p1();
    void thread_xor_ln309_1_fu_138_p2();
    void thread_xor_ln309_2_fu_188_p2();
    void thread_xor_ln309_fu_88_p2();
    void thread_xor_ln349_1_fu_214_p2();
    void thread_xor_ln349_fu_208_p2();
};

}

using namespace ap_rtl;

#endif
