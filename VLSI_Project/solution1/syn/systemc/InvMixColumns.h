// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _InvMixColumns_HH_
#define _InvMixColumns_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Multiply.h"
#include "InvCipher_mux_42_cud.h"

namespace ap_rtl {

struct InvMixColumns : public sc_module {
    // Port declarations 38
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > state_0_0_read;
    sc_in< sc_lv<8> > state_0_1_read;
    sc_in< sc_lv<8> > state_0_2_read;
    sc_in< sc_lv<8> > state_0_3_read;
    sc_in< sc_lv<8> > state_1_0_read;
    sc_in< sc_lv<8> > state_1_1_read;
    sc_in< sc_lv<8> > state_1_2_read;
    sc_in< sc_lv<8> > state_1_3_read;
    sc_in< sc_lv<8> > state_2_0_read;
    sc_in< sc_lv<8> > state_2_1_read;
    sc_in< sc_lv<8> > state_2_2_read;
    sc_in< sc_lv<8> > state_2_3_read;
    sc_in< sc_lv<8> > state_3_0_read;
    sc_in< sc_lv<8> > state_3_1_read;
    sc_in< sc_lv<8> > state_3_2_read;
    sc_in< sc_lv<8> > state_3_3_read;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;
    sc_out< sc_lv<8> > ap_return_12;
    sc_out< sc_lv<8> > ap_return_13;
    sc_out< sc_lv<8> > ap_return_14;
    sc_out< sc_lv<8> > ap_return_15;
    sc_signal< sc_lv<5> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;
    sc_signal< sc_lv<5> > ap_var_for_const2;
    sc_signal< sc_lv<5> > ap_var_for_const3;


    // Module declarations
    InvMixColumns(sc_module_name name);
    SC_HAS_PROCESS(InvMixColumns);

    ~InvMixColumns();

    sc_trace_file* mVcdFile;

    Multiply* tmp_Multiply_fu_309;
    Multiply* tmp_s_Multiply_fu_316;
    Multiply* tmp_1_Multiply_fu_323;
    Multiply* tmp_2_Multiply_fu_330;
    Multiply* tmp_3_Multiply_fu_337;
    Multiply* tmp_4_Multiply_fu_344;
    Multiply* tmp_5_Multiply_fu_351;
    Multiply* tmp_6_Multiply_fu_358;
    Multiply* tmp_7_Multiply_fu_365;
    Multiply* tmp_8_Multiply_fu_372;
    Multiply* tmp_9_Multiply_fu_379;
    Multiply* tmp_10_Multiply_fu_386;
    Multiply* tmp_11_Multiply_fu_393;
    Multiply* tmp_12_Multiply_fu_400;
    Multiply* tmp_13_Multiply_fu_407;
    Multiply* tmp_14_Multiply_fu_414;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U39;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U40;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U41;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U42;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U43;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U44;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U45;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U46;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U47;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U48;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U49;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U50;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U51;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U52;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U53;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U54;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U55;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U56;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U57;
    InvCipher_mux_42_cud<1,1,8,8,8,8,2,8>* InvCipher_mux_42_cud_U58;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_fu_427_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > state_3_3_1_fu_581_p6;
    sc_signal< sc_lv<1> > icmp_ln369_fu_421_p2;
    sc_signal< sc_lv<8> > state_3_2_1_fu_595_p6;
    sc_signal< sc_lv<8> > state_3_1_1_fu_609_p6;
    sc_signal< sc_lv<8> > state_3_0_1_fu_623_p6;
    sc_signal< sc_lv<8> > state_2_3_1_fu_637_p6;
    sc_signal< sc_lv<8> > state_2_2_1_fu_651_p6;
    sc_signal< sc_lv<8> > state_2_1_1_fu_665_p6;
    sc_signal< sc_lv<8> > state_2_0_1_fu_679_p6;
    sc_signal< sc_lv<8> > state_1_3_1_fu_693_p6;
    sc_signal< sc_lv<8> > state_1_2_1_fu_707_p6;
    sc_signal< sc_lv<8> > state_1_1_1_fu_721_p6;
    sc_signal< sc_lv<8> > state_1_0_1_fu_735_p6;
    sc_signal< sc_lv<8> > state_0_3_1_fu_749_p6;
    sc_signal< sc_lv<8> > state_0_2_1_fu_763_p6;
    sc_signal< sc_lv<8> > state_0_1_1_fu_777_p6;
    sc_signal< sc_lv<8> > state_0_0_1_fu_791_p6;
    sc_signal< sc_logic > tmp_Multiply_fu_309_ap_ready;
    sc_signal< sc_lv<8> > tmp_Multiply_fu_309_ap_return;
    sc_signal< sc_logic > tmp_s_Multiply_fu_316_ap_ready;
    sc_signal< sc_lv<8> > tmp_s_Multiply_fu_316_ap_return;
    sc_signal< sc_logic > tmp_1_Multiply_fu_323_ap_ready;
    sc_signal< sc_lv<8> > tmp_1_Multiply_fu_323_ap_return;
    sc_signal< sc_logic > tmp_2_Multiply_fu_330_ap_ready;
    sc_signal< sc_lv<8> > tmp_2_Multiply_fu_330_ap_return;
    sc_signal< sc_logic > tmp_3_Multiply_fu_337_ap_ready;
    sc_signal< sc_lv<8> > tmp_3_Multiply_fu_337_ap_return;
    sc_signal< sc_logic > tmp_4_Multiply_fu_344_ap_ready;
    sc_signal< sc_lv<8> > tmp_4_Multiply_fu_344_ap_return;
    sc_signal< sc_logic > tmp_5_Multiply_fu_351_ap_ready;
    sc_signal< sc_lv<8> > tmp_5_Multiply_fu_351_ap_return;
    sc_signal< sc_logic > tmp_6_Multiply_fu_358_ap_ready;
    sc_signal< sc_lv<8> > tmp_6_Multiply_fu_358_ap_return;
    sc_signal< sc_logic > tmp_7_Multiply_fu_365_ap_ready;
    sc_signal< sc_lv<8> > tmp_7_Multiply_fu_365_ap_return;
    sc_signal< sc_logic > tmp_8_Multiply_fu_372_ap_ready;
    sc_signal< sc_lv<8> > tmp_8_Multiply_fu_372_ap_return;
    sc_signal< sc_logic > tmp_9_Multiply_fu_379_ap_ready;
    sc_signal< sc_lv<8> > tmp_9_Multiply_fu_379_ap_return;
    sc_signal< sc_logic > tmp_10_Multiply_fu_386_ap_ready;
    sc_signal< sc_lv<8> > tmp_10_Multiply_fu_386_ap_return;
    sc_signal< sc_logic > tmp_11_Multiply_fu_393_ap_ready;
    sc_signal< sc_lv<8> > tmp_11_Multiply_fu_393_ap_return;
    sc_signal< sc_logic > tmp_12_Multiply_fu_400_ap_ready;
    sc_signal< sc_lv<8> > tmp_12_Multiply_fu_400_ap_return;
    sc_signal< sc_logic > tmp_13_Multiply_fu_407_ap_ready;
    sc_signal< sc_lv<8> > tmp_13_Multiply_fu_407_ap_return;
    sc_signal< sc_logic > tmp_14_Multiply_fu_414_ap_ready;
    sc_signal< sc_lv<8> > tmp_14_Multiply_fu_414_ap_return;
    sc_signal< sc_lv<8> > state_0_0_0_reg_154;
    sc_signal< sc_lv<8> > state_0_1_0_reg_163;
    sc_signal< sc_lv<8> > state_0_2_0_reg_172;
    sc_signal< sc_lv<8> > state_0_3_0_reg_181;
    sc_signal< sc_lv<8> > state_1_0_0_reg_190;
    sc_signal< sc_lv<8> > state_1_1_0_reg_199;
    sc_signal< sc_lv<8> > state_1_2_0_reg_208;
    sc_signal< sc_lv<8> > state_1_3_0_reg_217;
    sc_signal< sc_lv<8> > state_2_0_0_reg_226;
    sc_signal< sc_lv<8> > state_2_1_0_reg_235;
    sc_signal< sc_lv<8> > state_2_2_0_reg_244;
    sc_signal< sc_lv<8> > state_2_3_0_reg_253;
    sc_signal< sc_lv<8> > state_3_0_0_reg_262;
    sc_signal< sc_lv<8> > state_3_1_0_reg_271;
    sc_signal< sc_lv<8> > state_3_2_0_reg_280;
    sc_signal< sc_lv<8> > state_3_3_0_reg_289;
    sc_signal< sc_lv<3> > i_0_reg_298;
    sc_signal< sc_lv<8> > a_fu_437_p6;
    sc_signal< sc_lv<8> > b_fu_455_p6;
    sc_signal< sc_lv<8> > c_fu_473_p6;
    sc_signal< sc_lv<8> > d_fu_491_p6;
    sc_signal< sc_lv<2> > trunc_ln371_fu_433_p1;
    sc_signal< sc_lv<8> > xor_ln376_1_fu_515_p2;
    sc_signal< sc_lv<8> > xor_ln376_fu_509_p2;
    sc_signal< sc_lv<8> > xor_ln377_1_fu_533_p2;
    sc_signal< sc_lv<8> > xor_ln377_fu_527_p2;
    sc_signal< sc_lv<8> > xor_ln378_1_fu_551_p2;
    sc_signal< sc_lv<8> > xor_ln378_fu_545_p2;
    sc_signal< sc_lv<8> > xor_ln379_1_fu_569_p2;
    sc_signal< sc_lv<8> > xor_ln379_fu_563_p2;
    sc_signal< sc_lv<8> > xor_ln379_2_fu_575_p2;
    sc_signal< sc_lv<8> > xor_ln378_2_fu_557_p2;
    sc_signal< sc_lv<8> > xor_ln377_2_fu_539_p2;
    sc_signal< sc_lv<8> > xor_ln376_2_fu_521_p2;
    sc_signal< sc_lv<8> > ap_return_0_preg;
    sc_signal< sc_lv<8> > ap_return_1_preg;
    sc_signal< sc_lv<8> > ap_return_2_preg;
    sc_signal< sc_lv<8> > ap_return_3_preg;
    sc_signal< sc_lv<8> > ap_return_4_preg;
    sc_signal< sc_lv<8> > ap_return_5_preg;
    sc_signal< sc_lv<8> > ap_return_6_preg;
    sc_signal< sc_lv<8> > ap_return_7_preg;
    sc_signal< sc_lv<8> > ap_return_8_preg;
    sc_signal< sc_lv<8> > ap_return_9_preg;
    sc_signal< sc_lv<8> > ap_return_10_preg;
    sc_signal< sc_lv<8> > ap_return_11_preg;
    sc_signal< sc_lv<8> > ap_return_12_preg;
    sc_signal< sc_lv<8> > ap_return_13_preg;
    sc_signal< sc_lv<8> > ap_return_14_preg;
    sc_signal< sc_lv<8> > ap_return_15_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_E;
    static const sc_lv<5> ap_const_lv5_B;
    static const sc_lv<5> ap_const_lv5_D;
    static const sc_lv<5> ap_const_lv5_9;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_i_fu_427_p2();
    void thread_icmp_ln369_fu_421_p2();
    void thread_trunc_ln371_fu_433_p1();
    void thread_xor_ln376_1_fu_515_p2();
    void thread_xor_ln376_2_fu_521_p2();
    void thread_xor_ln376_fu_509_p2();
    void thread_xor_ln377_1_fu_533_p2();
    void thread_xor_ln377_2_fu_539_p2();
    void thread_xor_ln377_fu_527_p2();
    void thread_xor_ln378_1_fu_551_p2();
    void thread_xor_ln378_2_fu_557_p2();
    void thread_xor_ln378_fu_545_p2();
    void thread_xor_ln379_1_fu_569_p2();
    void thread_xor_ln379_2_fu_575_p2();
    void thread_xor_ln379_fu_563_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
