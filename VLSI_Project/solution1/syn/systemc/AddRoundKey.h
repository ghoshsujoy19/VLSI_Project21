// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddRoundKey_HH_
#define _AddRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AddRoundKey : public sc_module {
    // Port declarations 87
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<6> > round;
    sc_in< sc_lv<8> > state_0_0_read;
    sc_in< sc_lv<8> > state_0_1_read;
    sc_in< sc_lv<8> > state_0_2_read;
    sc_in< sc_lv<8> > state_0_3_read;
    sc_in< sc_lv<8> > state_1_0_read;
    sc_in< sc_lv<8> > state_1_1_read;
    sc_in< sc_lv<8> > state_1_2_read;
    sc_in< sc_lv<8> > state_1_3_read;
    sc_in< sc_lv<8> > state_2_0_read;
    sc_in< sc_lv<8> > state_2_1_read;
    sc_in< sc_lv<8> > state_2_2_read;
    sc_in< sc_lv<8> > state_2_3_read;
    sc_in< sc_lv<8> > state_3_0_read;
    sc_in< sc_lv<8> > state_3_1_read;
    sc_in< sc_lv<8> > state_3_2_read;
    sc_in< sc_lv<8> > state_3_3_read;
    sc_out< sc_lv<4> > RoundKey_0_address0;
    sc_out< sc_logic > RoundKey_0_ce0;
    sc_in< sc_lv<8> > RoundKey_0_q0;
    sc_out< sc_lv<4> > RoundKey_1_address0;
    sc_out< sc_logic > RoundKey_1_ce0;
    sc_in< sc_lv<8> > RoundKey_1_q0;
    sc_out< sc_lv<4> > RoundKey_2_address0;
    sc_out< sc_logic > RoundKey_2_ce0;
    sc_in< sc_lv<8> > RoundKey_2_q0;
    sc_out< sc_lv<4> > RoundKey_3_address0;
    sc_out< sc_logic > RoundKey_3_ce0;
    sc_in< sc_lv<8> > RoundKey_3_q0;
    sc_out< sc_lv<4> > RoundKey_4_address0;
    sc_out< sc_logic > RoundKey_4_ce0;
    sc_in< sc_lv<8> > RoundKey_4_q0;
    sc_out< sc_lv<4> > RoundKey_5_address0;
    sc_out< sc_logic > RoundKey_5_ce0;
    sc_in< sc_lv<8> > RoundKey_5_q0;
    sc_out< sc_lv<4> > RoundKey_6_address0;
    sc_out< sc_logic > RoundKey_6_ce0;
    sc_in< sc_lv<8> > RoundKey_6_q0;
    sc_out< sc_lv<4> > RoundKey_7_address0;
    sc_out< sc_logic > RoundKey_7_ce0;
    sc_in< sc_lv<8> > RoundKey_7_q0;
    sc_out< sc_lv<4> > RoundKey_8_address0;
    sc_out< sc_logic > RoundKey_8_ce0;
    sc_in< sc_lv<8> > RoundKey_8_q0;
    sc_out< sc_lv<4> > RoundKey_9_address0;
    sc_out< sc_logic > RoundKey_9_ce0;
    sc_in< sc_lv<8> > RoundKey_9_q0;
    sc_out< sc_lv<4> > RoundKey_10_address0;
    sc_out< sc_logic > RoundKey_10_ce0;
    sc_in< sc_lv<8> > RoundKey_10_q0;
    sc_out< sc_lv<4> > RoundKey_11_address0;
    sc_out< sc_logic > RoundKey_11_ce0;
    sc_in< sc_lv<8> > RoundKey_11_q0;
    sc_out< sc_lv<4> > RoundKey_12_address0;
    sc_out< sc_logic > RoundKey_12_ce0;
    sc_in< sc_lv<8> > RoundKey_12_q0;
    sc_out< sc_lv<4> > RoundKey_13_address0;
    sc_out< sc_logic > RoundKey_13_ce0;
    sc_in< sc_lv<8> > RoundKey_13_q0;
    sc_out< sc_lv<4> > RoundKey_14_address0;
    sc_out< sc_logic > RoundKey_14_ce0;
    sc_in< sc_lv<8> > RoundKey_14_q0;
    sc_out< sc_lv<4> > RoundKey_15_address0;
    sc_out< sc_logic > RoundKey_15_ce0;
    sc_in< sc_lv<8> > RoundKey_15_q0;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;
    sc_out< sc_lv<8> > ap_return_12;
    sc_out< sc_lv<8> > ap_return_13;
    sc_out< sc_lv<8> > ap_return_14;
    sc_out< sc_lv<8> > ap_return_15;


    // Module declarations
    AddRoundKey(sc_module_name name);
    SC_HAS_PROCESS(AddRoundKey);

    ~AddRoundKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > zext_ln251_fu_400_p1;
    sc_signal< sc_lv<64> > zext_ln251_1_fu_405_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > trunc_ln251_fu_388_p1;
    sc_signal< sc_lv<8> > and_ln_fu_392_p3;
    sc_signal< sc_lv<8> > xor_ln251_fu_424_p2;
    sc_signal< sc_lv<8> > xor_ln251_1_fu_430_p2;
    sc_signal< sc_lv<8> > xor_ln251_2_fu_436_p2;
    sc_signal< sc_lv<8> > xor_ln251_3_fu_442_p2;
    sc_signal< sc_lv<8> > xor_ln251_4_fu_448_p2;
    sc_signal< sc_lv<8> > xor_ln251_5_fu_454_p2;
    sc_signal< sc_lv<8> > xor_ln251_6_fu_460_p2;
    sc_signal< sc_lv<8> > xor_ln251_7_fu_466_p2;
    sc_signal< sc_lv<8> > xor_ln251_8_fu_472_p2;
    sc_signal< sc_lv<8> > xor_ln251_9_fu_478_p2;
    sc_signal< sc_lv<8> > xor_ln251_10_fu_484_p2;
    sc_signal< sc_lv<8> > xor_ln251_11_fu_490_p2;
    sc_signal< sc_lv<8> > xor_ln251_12_fu_496_p2;
    sc_signal< sc_lv<8> > xor_ln251_13_fu_502_p2;
    sc_signal< sc_lv<8> > xor_ln251_14_fu_508_p2;
    sc_signal< sc_lv<8> > xor_ln251_15_fu_514_p2;
    sc_signal< sc_lv<8> > ap_return_0_preg;
    sc_signal< sc_lv<8> > ap_return_1_preg;
    sc_signal< sc_lv<8> > ap_return_2_preg;
    sc_signal< sc_lv<8> > ap_return_3_preg;
    sc_signal< sc_lv<8> > ap_return_4_preg;
    sc_signal< sc_lv<8> > ap_return_5_preg;
    sc_signal< sc_lv<8> > ap_return_6_preg;
    sc_signal< sc_lv<8> > ap_return_7_preg;
    sc_signal< sc_lv<8> > ap_return_8_preg;
    sc_signal< sc_lv<8> > ap_return_9_preg;
    sc_signal< sc_lv<8> > ap_return_10_preg;
    sc_signal< sc_lv<8> > ap_return_11_preg;
    sc_signal< sc_lv<8> > ap_return_12_preg;
    sc_signal< sc_lv<8> > ap_return_13_preg;
    sc_signal< sc_lv<8> > ap_return_14_preg;
    sc_signal< sc_lv<8> > ap_return_15_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_RoundKey_0_address0();
    void thread_RoundKey_0_ce0();
    void thread_RoundKey_10_address0();
    void thread_RoundKey_10_ce0();
    void thread_RoundKey_11_address0();
    void thread_RoundKey_11_ce0();
    void thread_RoundKey_12_address0();
    void thread_RoundKey_12_ce0();
    void thread_RoundKey_13_address0();
    void thread_RoundKey_13_ce0();
    void thread_RoundKey_14_address0();
    void thread_RoundKey_14_ce0();
    void thread_RoundKey_15_address0();
    void thread_RoundKey_15_ce0();
    void thread_RoundKey_1_address0();
    void thread_RoundKey_1_ce0();
    void thread_RoundKey_2_address0();
    void thread_RoundKey_2_ce0();
    void thread_RoundKey_3_address0();
    void thread_RoundKey_3_ce0();
    void thread_RoundKey_4_address0();
    void thread_RoundKey_4_ce0();
    void thread_RoundKey_5_address0();
    void thread_RoundKey_5_ce0();
    void thread_RoundKey_6_address0();
    void thread_RoundKey_6_ce0();
    void thread_RoundKey_7_address0();
    void thread_RoundKey_7_ce0();
    void thread_RoundKey_8_address0();
    void thread_RoundKey_8_ce0();
    void thread_RoundKey_9_address0();
    void thread_RoundKey_9_ce0();
    void thread_and_ln_fu_392_p3();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_trunc_ln251_fu_388_p1();
    void thread_xor_ln251_10_fu_484_p2();
    void thread_xor_ln251_11_fu_490_p2();
    void thread_xor_ln251_12_fu_496_p2();
    void thread_xor_ln251_13_fu_502_p2();
    void thread_xor_ln251_14_fu_508_p2();
    void thread_xor_ln251_15_fu_514_p2();
    void thread_xor_ln251_1_fu_430_p2();
    void thread_xor_ln251_2_fu_436_p2();
    void thread_xor_ln251_3_fu_442_p2();
    void thread_xor_ln251_4_fu_448_p2();
    void thread_xor_ln251_5_fu_454_p2();
    void thread_xor_ln251_6_fu_460_p2();
    void thread_xor_ln251_7_fu_466_p2();
    void thread_xor_ln251_8_fu_472_p2();
    void thread_xor_ln251_9_fu_478_p2();
    void thread_xor_ln251_fu_424_p2();
    void thread_zext_ln251_1_fu_405_p1();
    void thread_zext_ln251_fu_400_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
