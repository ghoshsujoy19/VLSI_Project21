// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _SubBytes_HH_
#define _SubBytes_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Cipher_mux_165_8_bkb.h"
#include "Cipher_mux_42_8_1_1.h"
#include "SubBytes_sbox.h"

namespace ap_rtl {

struct SubBytes : public sc_module {
    // Port declarations 38
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > state_0_0_read;
    sc_in< sc_lv<8> > state_0_1_read;
    sc_in< sc_lv<8> > state_0_2_read;
    sc_in< sc_lv<8> > state_0_3_read;
    sc_in< sc_lv<8> > state_1_0_read;
    sc_in< sc_lv<8> > state_1_1_read;
    sc_in< sc_lv<8> > state_1_2_read;
    sc_in< sc_lv<8> > state_1_3_read;
    sc_in< sc_lv<8> > state_2_0_read;
    sc_in< sc_lv<8> > state_2_1_read;
    sc_in< sc_lv<8> > state_2_2_read;
    sc_in< sc_lv<8> > state_2_3_read;
    sc_in< sc_lv<8> > state_3_0_read;
    sc_in< sc_lv<8> > state_3_1_read;
    sc_in< sc_lv<8> > state_3_2_read;
    sc_in< sc_lv<8> > state_3_3_read;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;
    sc_out< sc_lv<8> > ap_return_12;
    sc_out< sc_lv<8> > ap_return_13;
    sc_out< sc_lv<8> > ap_return_14;
    sc_out< sc_lv<8> > ap_return_15;


    // Module declarations
    SubBytes(sc_module_name name);
    SC_HAS_PROCESS(SubBytes);

    ~SubBytes();

    sc_trace_file* mVcdFile;

    SubBytes_sbox* sbox_U;
    Cipher_mux_165_8_bkb<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* Cipher_mux_165_8_bkb_U34;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U35;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U36;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U37;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U38;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U39;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U40;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U41;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U42;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U43;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U44;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U45;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U46;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U47;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U48;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U49;
    Cipher_mux_42_8_1_1<1,1,8,8,8,8,2,8>* Cipher_mux_42_8_1_1_U50;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > sbox_address0;
    sc_signal< sc_logic > sbox_ce0;
    sc_signal< sc_lv<8> > sbox_q0;
    sc_signal< sc_lv<3> > i_fu_403_p2;
    sc_signal< sc_lv<3> > i_reg_934;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > trunc_ln265_fu_409_p1;
    sc_signal< sc_lv<2> > trunc_ln265_reg_939;
    sc_signal< sc_lv<1> > icmp_ln261_fu_397_p2;
    sc_signal< sc_lv<3> > j_fu_515_p2;
    sc_signal< sc_lv<3> > j_reg_963;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > state_3_3_0_load_1_reg_968;
    sc_signal< sc_lv<1> > icmp_ln263_fu_509_p2;
    sc_signal< sc_lv<8> > state_3_2_0_load_1_reg_975;
    sc_signal< sc_lv<8> > state_3_1_0_load_1_reg_982;
    sc_signal< sc_lv<8> > state_3_0_0_load_1_reg_989;
    sc_signal< sc_lv<8> > state_2_3_0_load_1_reg_996;
    sc_signal< sc_lv<8> > state_2_2_0_load_1_reg_1003;
    sc_signal< sc_lv<8> > state_2_1_0_load_1_reg_1010;
    sc_signal< sc_lv<8> > state_2_0_0_load_1_reg_1017;
    sc_signal< sc_lv<8> > state_1_3_0_load_1_reg_1024;
    sc_signal< sc_lv<8> > state_1_2_0_load_1_reg_1031;
    sc_signal< sc_lv<8> > state_1_1_0_load_1_reg_1038;
    sc_signal< sc_lv<8> > state_1_0_0_load_1_reg_1045;
    sc_signal< sc_lv<8> > state_0_3_0_load_1_reg_1052;
    sc_signal< sc_lv<8> > state_0_2_0_load_1_reg_1059;
    sc_signal< sc_lv<8> > state_0_1_0_load_1_reg_1066;
    sc_signal< sc_lv<8> > state_0_0_0_load_1_reg_1073;
    sc_signal< sc_lv<2> > trunc_ln265_1_fu_521_p1;
    sc_signal< sc_lv<2> > trunc_ln265_1_reg_1080;
    sc_signal< sc_lv<3> > i_0_reg_247;
    sc_signal< sc_lv<3> > j_0_reg_258;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln265_1_fu_574_p1;
    sc_signal< sc_lv<8> > state_3_3_0_fu_74;
    sc_signal< sc_lv<8> > state_3_3_3_fu_759_p6;
    sc_signal< sc_lv<8> > state_3_2_0_fu_78;
    sc_signal< sc_lv<8> > state_3_2_3_fu_769_p6;
    sc_signal< sc_lv<8> > state_3_1_0_fu_82;
    sc_signal< sc_lv<8> > state_3_1_3_fu_779_p6;
    sc_signal< sc_lv<8> > state_3_0_0_fu_86;
    sc_signal< sc_lv<8> > state_3_0_3_fu_789_p6;
    sc_signal< sc_lv<8> > state_2_3_0_fu_90;
    sc_signal< sc_lv<8> > state_2_3_3_fu_579_p6;
    sc_signal< sc_lv<8> > state_2_2_0_fu_94;
    sc_signal< sc_lv<8> > state_2_2_3_fu_589_p6;
    sc_signal< sc_lv<8> > state_2_1_0_fu_98;
    sc_signal< sc_lv<8> > state_2_1_3_fu_599_p6;
    sc_signal< sc_lv<8> > state_2_0_0_fu_102;
    sc_signal< sc_lv<8> > state_2_0_3_fu_609_p6;
    sc_signal< sc_lv<8> > state_1_3_0_fu_106;
    sc_signal< sc_lv<8> > state_1_3_3_fu_639_p6;
    sc_signal< sc_lv<8> > state_1_2_0_fu_110;
    sc_signal< sc_lv<8> > state_1_2_3_fu_649_p6;
    sc_signal< sc_lv<8> > state_1_1_0_fu_114;
    sc_signal< sc_lv<8> > state_1_1_3_fu_659_p6;
    sc_signal< sc_lv<8> > state_1_0_0_fu_118;
    sc_signal< sc_lv<8> > state_1_0_3_fu_669_p6;
    sc_signal< sc_lv<8> > state_0_3_0_fu_122;
    sc_signal< sc_lv<8> > state_0_3_3_fu_699_p6;
    sc_signal< sc_lv<8> > state_0_2_0_fu_126;
    sc_signal< sc_lv<8> > state_0_2_3_fu_709_p6;
    sc_signal< sc_lv<8> > state_0_1_0_fu_130;
    sc_signal< sc_lv<8> > state_0_1_3_fu_719_p6;
    sc_signal< sc_lv<8> > state_0_0_0_fu_134;
    sc_signal< sc_lv<8> > state_0_0_3_fu_729_p6;
    sc_signal< sc_lv<4> > tmp_2_fu_525_p3;
    sc_signal< sc_lv<5> > tmp_1_fu_536_p17;
    sc_signal< sc_lv<8> > tmp_1_fu_536_p18;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_i_fu_403_p2();
    void thread_icmp_ln261_fu_397_p2();
    void thread_icmp_ln263_fu_509_p2();
    void thread_j_fu_515_p2();
    void thread_sbox_address0();
    void thread_sbox_ce0();
    void thread_tmp_1_fu_536_p17();
    void thread_tmp_2_fu_525_p3();
    void thread_trunc_ln265_1_fu_521_p1();
    void thread_trunc_ln265_fu_409_p1();
    void thread_zext_ln265_1_fu_574_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
