// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> AddRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<2> AddRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<32> AddRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_1 = "1";
const sc_lv<4> AddRoundKey::ap_const_lv4_0 = "0000";
const sc_lv<8> AddRoundKey::ap_const_lv8_0 = "00000000";
const bool AddRoundKey::ap_const_boolean_1 = true;

AddRoundKey::AddRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_fu_400_p1 );

    SC_METHOD(thread_RoundKey_0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_10_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_10_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_11_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_11_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_12_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_12_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_13_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_13_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_14_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_14_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_15_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_15_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_3_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_3_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_4_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_4_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_5_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_5_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_6_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_6_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_7_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_7_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_8_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_8_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_RoundKey_9_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln251_1_fu_405_p1 );

    SC_METHOD(thread_RoundKey_9_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_and_ln_fu_392_p3);
    sensitive << ( trunc_ln251_fu_388_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_fu_424_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_1_fu_430_p2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_10_fu_484_p2 );
    sensitive << ( ap_return_10_preg );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_11_fu_490_p2 );
    sensitive << ( ap_return_11_preg );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_12_fu_496_p2 );
    sensitive << ( ap_return_12_preg );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_13_fu_502_p2 );
    sensitive << ( ap_return_13_preg );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_14_fu_508_p2 );
    sensitive << ( ap_return_14_preg );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_15_fu_514_p2 );
    sensitive << ( ap_return_15_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_2_fu_436_p2 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_3_fu_442_p2 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_4_fu_448_p2 );
    sensitive << ( ap_return_4_preg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_5_fu_454_p2 );
    sensitive << ( ap_return_5_preg );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_6_fu_460_p2 );
    sensitive << ( ap_return_6_preg );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_7_fu_466_p2 );
    sensitive << ( ap_return_7_preg );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_8_fu_472_p2 );
    sensitive << ( ap_return_8_preg );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln251_9_fu_478_p2 );
    sensitive << ( ap_return_9_preg );

    SC_METHOD(thread_trunc_ln251_fu_388_p1);
    sensitive << ( round );

    SC_METHOD(thread_xor_ln251_10_fu_484_p2);
    sensitive << ( state_2_2_read );
    sensitive << ( RoundKey_10_q0 );

    SC_METHOD(thread_xor_ln251_11_fu_490_p2);
    sensitive << ( state_2_3_read );
    sensitive << ( RoundKey_11_q0 );

    SC_METHOD(thread_xor_ln251_12_fu_496_p2);
    sensitive << ( state_3_0_read );
    sensitive << ( RoundKey_12_q0 );

    SC_METHOD(thread_xor_ln251_13_fu_502_p2);
    sensitive << ( state_3_1_read );
    sensitive << ( RoundKey_13_q0 );

    SC_METHOD(thread_xor_ln251_14_fu_508_p2);
    sensitive << ( state_3_2_read );
    sensitive << ( RoundKey_14_q0 );

    SC_METHOD(thread_xor_ln251_15_fu_514_p2);
    sensitive << ( state_3_3_read );
    sensitive << ( RoundKey_15_q0 );

    SC_METHOD(thread_xor_ln251_1_fu_430_p2);
    sensitive << ( state_0_1_read );
    sensitive << ( RoundKey_1_q0 );

    SC_METHOD(thread_xor_ln251_2_fu_436_p2);
    sensitive << ( state_0_2_read );
    sensitive << ( RoundKey_2_q0 );

    SC_METHOD(thread_xor_ln251_3_fu_442_p2);
    sensitive << ( state_0_3_read );
    sensitive << ( RoundKey_3_q0 );

    SC_METHOD(thread_xor_ln251_4_fu_448_p2);
    sensitive << ( state_1_0_read );
    sensitive << ( RoundKey_4_q0 );

    SC_METHOD(thread_xor_ln251_5_fu_454_p2);
    sensitive << ( state_1_1_read );
    sensitive << ( RoundKey_5_q0 );

    SC_METHOD(thread_xor_ln251_6_fu_460_p2);
    sensitive << ( state_1_2_read );
    sensitive << ( RoundKey_6_q0 );

    SC_METHOD(thread_xor_ln251_7_fu_466_p2);
    sensitive << ( state_1_3_read );
    sensitive << ( RoundKey_7_q0 );

    SC_METHOD(thread_xor_ln251_8_fu_472_p2);
    sensitive << ( state_2_0_read );
    sensitive << ( RoundKey_8_q0 );

    SC_METHOD(thread_xor_ln251_9_fu_478_p2);
    sensitive << ( state_2_1_read );
    sensitive << ( RoundKey_9_q0 );

    SC_METHOD(thread_xor_ln251_fu_424_p2);
    sensitive << ( state_0_0_read );
    sensitive << ( RoundKey_0_q0 );

    SC_METHOD(thread_zext_ln251_1_fu_405_p1);
    sensitive << ( and_ln_fu_392_p3 );

    SC_METHOD(thread_zext_ln251_fu_400_p1);
    sensitive << ( trunc_ln251_fu_388_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "01";
    ap_return_0_preg = "00000000";
    ap_return_1_preg = "00000000";
    ap_return_2_preg = "00000000";
    ap_return_3_preg = "00000000";
    ap_return_4_preg = "00000000";
    ap_return_5_preg = "00000000";
    ap_return_6_preg = "00000000";
    ap_return_7_preg = "00000000";
    ap_return_8_preg = "00000000";
    ap_return_9_preg = "00000000";
    ap_return_10_preg = "00000000";
    ap_return_11_preg = "00000000";
    ap_return_12_preg = "00000000";
    ap_return_13_preg = "00000000";
    ap_return_14_preg = "00000000";
    ap_return_15_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, round, "(port)round");
    sc_trace(mVcdFile, state_0_0_read, "(port)state_0_0_read");
    sc_trace(mVcdFile, state_0_1_read, "(port)state_0_1_read");
    sc_trace(mVcdFile, state_0_2_read, "(port)state_0_2_read");
    sc_trace(mVcdFile, state_0_3_read, "(port)state_0_3_read");
    sc_trace(mVcdFile, state_1_0_read, "(port)state_1_0_read");
    sc_trace(mVcdFile, state_1_1_read, "(port)state_1_1_read");
    sc_trace(mVcdFile, state_1_2_read, "(port)state_1_2_read");
    sc_trace(mVcdFile, state_1_3_read, "(port)state_1_3_read");
    sc_trace(mVcdFile, state_2_0_read, "(port)state_2_0_read");
    sc_trace(mVcdFile, state_2_1_read, "(port)state_2_1_read");
    sc_trace(mVcdFile, state_2_2_read, "(port)state_2_2_read");
    sc_trace(mVcdFile, state_2_3_read, "(port)state_2_3_read");
    sc_trace(mVcdFile, state_3_0_read, "(port)state_3_0_read");
    sc_trace(mVcdFile, state_3_1_read, "(port)state_3_1_read");
    sc_trace(mVcdFile, state_3_2_read, "(port)state_3_2_read");
    sc_trace(mVcdFile, state_3_3_read, "(port)state_3_3_read");
    sc_trace(mVcdFile, RoundKey_0_address0, "(port)RoundKey_0_address0");
    sc_trace(mVcdFile, RoundKey_0_ce0, "(port)RoundKey_0_ce0");
    sc_trace(mVcdFile, RoundKey_0_q0, "(port)RoundKey_0_q0");
    sc_trace(mVcdFile, RoundKey_1_address0, "(port)RoundKey_1_address0");
    sc_trace(mVcdFile, RoundKey_1_ce0, "(port)RoundKey_1_ce0");
    sc_trace(mVcdFile, RoundKey_1_q0, "(port)RoundKey_1_q0");
    sc_trace(mVcdFile, RoundKey_2_address0, "(port)RoundKey_2_address0");
    sc_trace(mVcdFile, RoundKey_2_ce0, "(port)RoundKey_2_ce0");
    sc_trace(mVcdFile, RoundKey_2_q0, "(port)RoundKey_2_q0");
    sc_trace(mVcdFile, RoundKey_3_address0, "(port)RoundKey_3_address0");
    sc_trace(mVcdFile, RoundKey_3_ce0, "(port)RoundKey_3_ce0");
    sc_trace(mVcdFile, RoundKey_3_q0, "(port)RoundKey_3_q0");
    sc_trace(mVcdFile, RoundKey_4_address0, "(port)RoundKey_4_address0");
    sc_trace(mVcdFile, RoundKey_4_ce0, "(port)RoundKey_4_ce0");
    sc_trace(mVcdFile, RoundKey_4_q0, "(port)RoundKey_4_q0");
    sc_trace(mVcdFile, RoundKey_5_address0, "(port)RoundKey_5_address0");
    sc_trace(mVcdFile, RoundKey_5_ce0, "(port)RoundKey_5_ce0");
    sc_trace(mVcdFile, RoundKey_5_q0, "(port)RoundKey_5_q0");
    sc_trace(mVcdFile, RoundKey_6_address0, "(port)RoundKey_6_address0");
    sc_trace(mVcdFile, RoundKey_6_ce0, "(port)RoundKey_6_ce0");
    sc_trace(mVcdFile, RoundKey_6_q0, "(port)RoundKey_6_q0");
    sc_trace(mVcdFile, RoundKey_7_address0, "(port)RoundKey_7_address0");
    sc_trace(mVcdFile, RoundKey_7_ce0, "(port)RoundKey_7_ce0");
    sc_trace(mVcdFile, RoundKey_7_q0, "(port)RoundKey_7_q0");
    sc_trace(mVcdFile, RoundKey_8_address0, "(port)RoundKey_8_address0");
    sc_trace(mVcdFile, RoundKey_8_ce0, "(port)RoundKey_8_ce0");
    sc_trace(mVcdFile, RoundKey_8_q0, "(port)RoundKey_8_q0");
    sc_trace(mVcdFile, RoundKey_9_address0, "(port)RoundKey_9_address0");
    sc_trace(mVcdFile, RoundKey_9_ce0, "(port)RoundKey_9_ce0");
    sc_trace(mVcdFile, RoundKey_9_q0, "(port)RoundKey_9_q0");
    sc_trace(mVcdFile, RoundKey_10_address0, "(port)RoundKey_10_address0");
    sc_trace(mVcdFile, RoundKey_10_ce0, "(port)RoundKey_10_ce0");
    sc_trace(mVcdFile, RoundKey_10_q0, "(port)RoundKey_10_q0");
    sc_trace(mVcdFile, RoundKey_11_address0, "(port)RoundKey_11_address0");
    sc_trace(mVcdFile, RoundKey_11_ce0, "(port)RoundKey_11_ce0");
    sc_trace(mVcdFile, RoundKey_11_q0, "(port)RoundKey_11_q0");
    sc_trace(mVcdFile, RoundKey_12_address0, "(port)RoundKey_12_address0");
    sc_trace(mVcdFile, RoundKey_12_ce0, "(port)RoundKey_12_ce0");
    sc_trace(mVcdFile, RoundKey_12_q0, "(port)RoundKey_12_q0");
    sc_trace(mVcdFile, RoundKey_13_address0, "(port)RoundKey_13_address0");
    sc_trace(mVcdFile, RoundKey_13_ce0, "(port)RoundKey_13_ce0");
    sc_trace(mVcdFile, RoundKey_13_q0, "(port)RoundKey_13_q0");
    sc_trace(mVcdFile, RoundKey_14_address0, "(port)RoundKey_14_address0");
    sc_trace(mVcdFile, RoundKey_14_ce0, "(port)RoundKey_14_ce0");
    sc_trace(mVcdFile, RoundKey_14_q0, "(port)RoundKey_14_q0");
    sc_trace(mVcdFile, RoundKey_15_address0, "(port)RoundKey_15_address0");
    sc_trace(mVcdFile, RoundKey_15_ce0, "(port)RoundKey_15_ce0");
    sc_trace(mVcdFile, RoundKey_15_q0, "(port)RoundKey_15_q0");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, zext_ln251_fu_400_p1, "zext_ln251_fu_400_p1");
    sc_trace(mVcdFile, zext_ln251_1_fu_405_p1, "zext_ln251_1_fu_405_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, trunc_ln251_fu_388_p1, "trunc_ln251_fu_388_p1");
    sc_trace(mVcdFile, and_ln_fu_392_p3, "and_ln_fu_392_p3");
    sc_trace(mVcdFile, xor_ln251_fu_424_p2, "xor_ln251_fu_424_p2");
    sc_trace(mVcdFile, xor_ln251_1_fu_430_p2, "xor_ln251_1_fu_430_p2");
    sc_trace(mVcdFile, xor_ln251_2_fu_436_p2, "xor_ln251_2_fu_436_p2");
    sc_trace(mVcdFile, xor_ln251_3_fu_442_p2, "xor_ln251_3_fu_442_p2");
    sc_trace(mVcdFile, xor_ln251_4_fu_448_p2, "xor_ln251_4_fu_448_p2");
    sc_trace(mVcdFile, xor_ln251_5_fu_454_p2, "xor_ln251_5_fu_454_p2");
    sc_trace(mVcdFile, xor_ln251_6_fu_460_p2, "xor_ln251_6_fu_460_p2");
    sc_trace(mVcdFile, xor_ln251_7_fu_466_p2, "xor_ln251_7_fu_466_p2");
    sc_trace(mVcdFile, xor_ln251_8_fu_472_p2, "xor_ln251_8_fu_472_p2");
    sc_trace(mVcdFile, xor_ln251_9_fu_478_p2, "xor_ln251_9_fu_478_p2");
    sc_trace(mVcdFile, xor_ln251_10_fu_484_p2, "xor_ln251_10_fu_484_p2");
    sc_trace(mVcdFile, xor_ln251_11_fu_490_p2, "xor_ln251_11_fu_490_p2");
    sc_trace(mVcdFile, xor_ln251_12_fu_496_p2, "xor_ln251_12_fu_496_p2");
    sc_trace(mVcdFile, xor_ln251_13_fu_502_p2, "xor_ln251_13_fu_502_p2");
    sc_trace(mVcdFile, xor_ln251_14_fu_508_p2, "xor_ln251_14_fu_508_p2");
    sc_trace(mVcdFile, xor_ln251_15_fu_514_p2, "xor_ln251_15_fu_514_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_return_4_preg, "ap_return_4_preg");
    sc_trace(mVcdFile, ap_return_5_preg, "ap_return_5_preg");
    sc_trace(mVcdFile, ap_return_6_preg, "ap_return_6_preg");
    sc_trace(mVcdFile, ap_return_7_preg, "ap_return_7_preg");
    sc_trace(mVcdFile, ap_return_8_preg, "ap_return_8_preg");
    sc_trace(mVcdFile, ap_return_9_preg, "ap_return_9_preg");
    sc_trace(mVcdFile, ap_return_10_preg, "ap_return_10_preg");
    sc_trace(mVcdFile, ap_return_11_preg, "ap_return_11_preg");
    sc_trace(mVcdFile, ap_return_12_preg, "ap_return_12_preg");
    sc_trace(mVcdFile, ap_return_13_preg, "ap_return_13_preg");
    sc_trace(mVcdFile, ap_return_14_preg, "ap_return_14_preg");
    sc_trace(mVcdFile, ap_return_15_preg, "ap_return_15_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AddRoundKey::~AddRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AddRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_0_preg = xor_ln251_fu_424_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_10_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_10_preg = xor_ln251_10_fu_484_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_11_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_11_preg = xor_ln251_11_fu_490_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_12_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_12_preg = xor_ln251_12_fu_496_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_13_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_13_preg = xor_ln251_13_fu_502_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_14_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_14_preg = xor_ln251_14_fu_508_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_15_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_15_preg = xor_ln251_15_fu_514_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_1_preg = xor_ln251_1_fu_430_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_2_preg = xor_ln251_2_fu_436_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_3_preg = xor_ln251_3_fu_442_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_4_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_4_preg = xor_ln251_4_fu_448_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_5_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_5_preg = xor_ln251_5_fu_454_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_6_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_6_preg = xor_ln251_6_fu_460_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_7_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_7_preg = xor_ln251_7_fu_466_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_8_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_8_preg = xor_ln251_8_fu_472_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_9_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_9_preg = xor_ln251_9_fu_478_p2.read();
        }
    }
}

void AddRoundKey::thread_RoundKey_0_address0() {
    RoundKey_0_address0 =  (sc_lv<4>) (zext_ln251_fu_400_p1.read());
}

void AddRoundKey::thread_RoundKey_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_0_ce0 = ap_const_logic_1;
    } else {
        RoundKey_0_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_10_address0() {
    RoundKey_10_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_10_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_10_ce0 = ap_const_logic_1;
    } else {
        RoundKey_10_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_11_address0() {
    RoundKey_11_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_11_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_11_ce0 = ap_const_logic_1;
    } else {
        RoundKey_11_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_12_address0() {
    RoundKey_12_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_12_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_12_ce0 = ap_const_logic_1;
    } else {
        RoundKey_12_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_13_address0() {
    RoundKey_13_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_13_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_13_ce0 = ap_const_logic_1;
    } else {
        RoundKey_13_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_14_address0() {
    RoundKey_14_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_14_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_14_ce0 = ap_const_logic_1;
    } else {
        RoundKey_14_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_15_address0() {
    RoundKey_15_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_15_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_15_ce0 = ap_const_logic_1;
    } else {
        RoundKey_15_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_1_address0() {
    RoundKey_1_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_1_ce0 = ap_const_logic_1;
    } else {
        RoundKey_1_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_2_address0() {
    RoundKey_2_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_2_ce0 = ap_const_logic_1;
    } else {
        RoundKey_2_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_3_address0() {
    RoundKey_3_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_3_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_3_ce0 = ap_const_logic_1;
    } else {
        RoundKey_3_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_4_address0() {
    RoundKey_4_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_4_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_4_ce0 = ap_const_logic_1;
    } else {
        RoundKey_4_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_5_address0() {
    RoundKey_5_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_5_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_5_ce0 = ap_const_logic_1;
    } else {
        RoundKey_5_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_6_address0() {
    RoundKey_6_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_6_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_6_ce0 = ap_const_logic_1;
    } else {
        RoundKey_6_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_7_address0() {
    RoundKey_7_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_7_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_7_ce0 = ap_const_logic_1;
    } else {
        RoundKey_7_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_8_address0() {
    RoundKey_8_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_8_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_8_ce0 = ap_const_logic_1;
    } else {
        RoundKey_8_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_9_address0() {
    RoundKey_9_address0 =  (sc_lv<4>) (zext_ln251_1_fu_405_p1.read());
}

void AddRoundKey::thread_RoundKey_9_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        RoundKey_9_ce0 = ap_const_logic_1;
    } else {
        RoundKey_9_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_and_ln_fu_392_p3() {
    and_ln_fu_392_p3 = esl_concat<4,4>(ap_const_lv4_0, trunc_ln251_fu_388_p1.read());
}

void AddRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AddRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AddRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_0 = xor_ln251_fu_424_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void AddRoundKey::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_1 = xor_ln251_1_fu_430_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void AddRoundKey::thread_ap_return_10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_10 = xor_ln251_10_fu_484_p2.read();
    } else {
        ap_return_10 = ap_return_10_preg.read();
    }
}

void AddRoundKey::thread_ap_return_11() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_11 = xor_ln251_11_fu_490_p2.read();
    } else {
        ap_return_11 = ap_return_11_preg.read();
    }
}

void AddRoundKey::thread_ap_return_12() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_12 = xor_ln251_12_fu_496_p2.read();
    } else {
        ap_return_12 = ap_return_12_preg.read();
    }
}

void AddRoundKey::thread_ap_return_13() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_13 = xor_ln251_13_fu_502_p2.read();
    } else {
        ap_return_13 = ap_return_13_preg.read();
    }
}

void AddRoundKey::thread_ap_return_14() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_14 = xor_ln251_14_fu_508_p2.read();
    } else {
        ap_return_14 = ap_return_14_preg.read();
    }
}

void AddRoundKey::thread_ap_return_15() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_15 = xor_ln251_15_fu_514_p2.read();
    } else {
        ap_return_15 = ap_return_15_preg.read();
    }
}

void AddRoundKey::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_2 = xor_ln251_2_fu_436_p2.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void AddRoundKey::thread_ap_return_3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_3 = xor_ln251_3_fu_442_p2.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void AddRoundKey::thread_ap_return_4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_4 = xor_ln251_4_fu_448_p2.read();
    } else {
        ap_return_4 = ap_return_4_preg.read();
    }
}

void AddRoundKey::thread_ap_return_5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_5 = xor_ln251_5_fu_454_p2.read();
    } else {
        ap_return_5 = ap_return_5_preg.read();
    }
}

void AddRoundKey::thread_ap_return_6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_6 = xor_ln251_6_fu_460_p2.read();
    } else {
        ap_return_6 = ap_return_6_preg.read();
    }
}

void AddRoundKey::thread_ap_return_7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_7 = xor_ln251_7_fu_466_p2.read();
    } else {
        ap_return_7 = ap_return_7_preg.read();
    }
}

void AddRoundKey::thread_ap_return_8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_8 = xor_ln251_8_fu_472_p2.read();
    } else {
        ap_return_8 = ap_return_8_preg.read();
    }
}

void AddRoundKey::thread_ap_return_9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_9 = xor_ln251_9_fu_478_p2.read();
    } else {
        ap_return_9 = ap_return_9_preg.read();
    }
}

void AddRoundKey::thread_trunc_ln251_fu_388_p1() {
    trunc_ln251_fu_388_p1 = round.read().range(4-1, 0);
}

void AddRoundKey::thread_xor_ln251_10_fu_484_p2() {
    xor_ln251_10_fu_484_p2 = (RoundKey_10_q0.read() ^ state_2_2_read.read());
}

void AddRoundKey::thread_xor_ln251_11_fu_490_p2() {
    xor_ln251_11_fu_490_p2 = (RoundKey_11_q0.read() ^ state_2_3_read.read());
}

void AddRoundKey::thread_xor_ln251_12_fu_496_p2() {
    xor_ln251_12_fu_496_p2 = (RoundKey_12_q0.read() ^ state_3_0_read.read());
}

void AddRoundKey::thread_xor_ln251_13_fu_502_p2() {
    xor_ln251_13_fu_502_p2 = (RoundKey_13_q0.read() ^ state_3_1_read.read());
}

void AddRoundKey::thread_xor_ln251_14_fu_508_p2() {
    xor_ln251_14_fu_508_p2 = (RoundKey_14_q0.read() ^ state_3_2_read.read());
}

void AddRoundKey::thread_xor_ln251_15_fu_514_p2() {
    xor_ln251_15_fu_514_p2 = (RoundKey_15_q0.read() ^ state_3_3_read.read());
}

void AddRoundKey::thread_xor_ln251_1_fu_430_p2() {
    xor_ln251_1_fu_430_p2 = (RoundKey_1_q0.read() ^ state_0_1_read.read());
}

void AddRoundKey::thread_xor_ln251_2_fu_436_p2() {
    xor_ln251_2_fu_436_p2 = (RoundKey_2_q0.read() ^ state_0_2_read.read());
}

void AddRoundKey::thread_xor_ln251_3_fu_442_p2() {
    xor_ln251_3_fu_442_p2 = (RoundKey_3_q0.read() ^ state_0_3_read.read());
}

void AddRoundKey::thread_xor_ln251_4_fu_448_p2() {
    xor_ln251_4_fu_448_p2 = (RoundKey_4_q0.read() ^ state_1_0_read.read());
}

void AddRoundKey::thread_xor_ln251_5_fu_454_p2() {
    xor_ln251_5_fu_454_p2 = (RoundKey_5_q0.read() ^ state_1_1_read.read());
}

void AddRoundKey::thread_xor_ln251_6_fu_460_p2() {
    xor_ln251_6_fu_460_p2 = (RoundKey_6_q0.read() ^ state_1_2_read.read());
}

void AddRoundKey::thread_xor_ln251_7_fu_466_p2() {
    xor_ln251_7_fu_466_p2 = (RoundKey_7_q0.read() ^ state_1_3_read.read());
}

void AddRoundKey::thread_xor_ln251_8_fu_472_p2() {
    xor_ln251_8_fu_472_p2 = (RoundKey_8_q0.read() ^ state_2_0_read.read());
}

void AddRoundKey::thread_xor_ln251_9_fu_478_p2() {
    xor_ln251_9_fu_478_p2 = (RoundKey_9_q0.read() ^ state_2_1_read.read());
}

void AddRoundKey::thread_xor_ln251_fu_424_p2() {
    xor_ln251_fu_424_p2 = (RoundKey_0_q0.read() ^ state_0_0_read.read());
}

void AddRoundKey::thread_zext_ln251_1_fu_405_p1() {
    zext_ln251_1_fu_405_p1 = esl_zext<64,8>(and_ln_fu_392_p3.read());
}

void AddRoundKey::thread_zext_ln251_fu_400_p1() {
    zext_ln251_fu_400_p1 = esl_zext<64,4>(trunc_ln251_fu_388_p1.read());
}

void AddRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

