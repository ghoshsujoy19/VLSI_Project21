// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Multiply::ap_const_logic_1 = sc_dt::Log_1;
const bool Multiply::ap_const_boolean_1 = true;
const sc_lv<8> Multiply::ap_const_lv8_FF = "11111111";
const sc_lv<8> Multiply::ap_const_lv8_0 = "00000000";
const sc_lv<32> Multiply::ap_const_lv32_1 = "1";
const sc_lv<8> Multiply::ap_const_lv8_1 = "1";
const sc_lv<32> Multiply::ap_const_lv32_7 = "111";
const sc_lv<8> Multiply::ap_const_lv8_1B = "11011";
const sc_lv<32> Multiply::ap_const_lv32_2 = "10";
const sc_lv<32> Multiply::ap_const_lv32_3 = "11";
const sc_logic Multiply::ap_const_logic_0 = sc_dt::Log_0;

Multiply::Multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_and_ln349_1_fu_102_p2);
    sensitive << ( xor_ln309_fu_88_p2 );
    sensitive << ( select_ln349_1_fu_94_p3 );

    SC_METHOD(thread_and_ln349_2_fu_152_p2);
    sensitive << ( xor_ln309_1_fu_138_p2 );
    sensitive << ( select_ln349_2_fu_144_p3 );

    SC_METHOD(thread_and_ln349_3_fu_202_p2);
    sensitive << ( xor_ln309_2_fu_188_p2 );
    sensitive << ( select_ln349_3_fu_194_p3 );

    SC_METHOD(thread_and_ln349_fu_52_p2);
    sensitive << ( x );
    sensitive << ( select_ln349_fu_44_p3 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( xor_ln349_1_fu_214_p2 );
    sensitive << ( xor_ln349_fu_208_p2 );

    SC_METHOD(thread_select_ln309_1_fu_130_p3);
    sensitive << ( tmp_3_fu_122_p3 );

    SC_METHOD(thread_select_ln309_2_fu_180_p3);
    sensitive << ( tmp_5_fu_172_p3 );

    SC_METHOD(thread_select_ln309_fu_80_p3);
    sensitive << ( tmp_1_fu_72_p3 );

    SC_METHOD(thread_select_ln349_1_fu_94_p3);
    sensitive << ( tmp_fu_58_p3 );

    SC_METHOD(thread_select_ln349_2_fu_144_p3);
    sensitive << ( tmp_2_fu_108_p3 );

    SC_METHOD(thread_select_ln349_3_fu_194_p3);
    sensitive << ( tmp_4_fu_158_p3 );

    SC_METHOD(thread_select_ln349_fu_44_p3);
    sensitive << ( trunc_ln349_fu_40_p1 );

    SC_METHOD(thread_shl_ln309_1_fu_116_p2);
    sensitive << ( xor_ln309_fu_88_p2 );

    SC_METHOD(thread_shl_ln309_2_fu_166_p2);
    sensitive << ( xor_ln309_1_fu_138_p2 );

    SC_METHOD(thread_shl_ln309_fu_66_p2);
    sensitive << ( x );

    SC_METHOD(thread_tmp_1_fu_72_p3);
    sensitive << ( x );

    SC_METHOD(thread_tmp_2_fu_108_p3);
    sensitive << ( y );

    SC_METHOD(thread_tmp_3_fu_122_p3);
    sensitive << ( xor_ln309_fu_88_p2 );

    SC_METHOD(thread_tmp_4_fu_158_p3);
    sensitive << ( y );

    SC_METHOD(thread_tmp_5_fu_172_p3);
    sensitive << ( xor_ln309_1_fu_138_p2 );

    SC_METHOD(thread_tmp_fu_58_p3);
    sensitive << ( y );

    SC_METHOD(thread_trunc_ln349_fu_40_p1);
    sensitive << ( y );

    SC_METHOD(thread_xor_ln309_1_fu_138_p2);
    sensitive << ( select_ln309_1_fu_130_p3 );
    sensitive << ( shl_ln309_1_fu_116_p2 );

    SC_METHOD(thread_xor_ln309_2_fu_188_p2);
    sensitive << ( select_ln309_2_fu_180_p3 );
    sensitive << ( shl_ln309_2_fu_166_p2 );

    SC_METHOD(thread_xor_ln309_fu_88_p2);
    sensitive << ( select_ln309_fu_80_p3 );
    sensitive << ( shl_ln309_fu_66_p2 );

    SC_METHOD(thread_xor_ln349_1_fu_214_p2);
    sensitive << ( and_ln349_3_fu_202_p2 );
    sensitive << ( and_ln349_2_fu_152_p2 );

    SC_METHOD(thread_xor_ln349_fu_208_p2);
    sensitive << ( and_ln349_1_fu_102_p2 );
    sensitive << ( and_ln349_fu_52_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, trunc_ln349_fu_40_p1, "trunc_ln349_fu_40_p1");
    sc_trace(mVcdFile, select_ln349_fu_44_p3, "select_ln349_fu_44_p3");
    sc_trace(mVcdFile, tmp_1_fu_72_p3, "tmp_1_fu_72_p3");
    sc_trace(mVcdFile, select_ln309_fu_80_p3, "select_ln309_fu_80_p3");
    sc_trace(mVcdFile, shl_ln309_fu_66_p2, "shl_ln309_fu_66_p2");
    sc_trace(mVcdFile, tmp_fu_58_p3, "tmp_fu_58_p3");
    sc_trace(mVcdFile, xor_ln309_fu_88_p2, "xor_ln309_fu_88_p2");
    sc_trace(mVcdFile, select_ln349_1_fu_94_p3, "select_ln349_1_fu_94_p3");
    sc_trace(mVcdFile, tmp_3_fu_122_p3, "tmp_3_fu_122_p3");
    sc_trace(mVcdFile, select_ln309_1_fu_130_p3, "select_ln309_1_fu_130_p3");
    sc_trace(mVcdFile, shl_ln309_1_fu_116_p2, "shl_ln309_1_fu_116_p2");
    sc_trace(mVcdFile, tmp_2_fu_108_p3, "tmp_2_fu_108_p3");
    sc_trace(mVcdFile, xor_ln309_1_fu_138_p2, "xor_ln309_1_fu_138_p2");
    sc_trace(mVcdFile, select_ln349_2_fu_144_p3, "select_ln349_2_fu_144_p3");
    sc_trace(mVcdFile, tmp_5_fu_172_p3, "tmp_5_fu_172_p3");
    sc_trace(mVcdFile, select_ln309_2_fu_180_p3, "select_ln309_2_fu_180_p3");
    sc_trace(mVcdFile, shl_ln309_2_fu_166_p2, "shl_ln309_2_fu_166_p2");
    sc_trace(mVcdFile, tmp_4_fu_158_p3, "tmp_4_fu_158_p3");
    sc_trace(mVcdFile, xor_ln309_2_fu_188_p2, "xor_ln309_2_fu_188_p2");
    sc_trace(mVcdFile, select_ln349_3_fu_194_p3, "select_ln349_3_fu_194_p3");
    sc_trace(mVcdFile, and_ln349_1_fu_102_p2, "and_ln349_1_fu_102_p2");
    sc_trace(mVcdFile, and_ln349_fu_52_p2, "and_ln349_fu_52_p2");
    sc_trace(mVcdFile, and_ln349_3_fu_202_p2, "and_ln349_3_fu_202_p2");
    sc_trace(mVcdFile, and_ln349_2_fu_152_p2, "and_ln349_2_fu_152_p2");
    sc_trace(mVcdFile, xor_ln349_1_fu_214_p2, "xor_ln349_1_fu_214_p2");
    sc_trace(mVcdFile, xor_ln349_fu_208_p2, "xor_ln349_fu_208_p2");
#endif

    }
}

Multiply::~Multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Multiply::thread_and_ln349_1_fu_102_p2() {
    and_ln349_1_fu_102_p2 = (xor_ln309_fu_88_p2.read() & select_ln349_1_fu_94_p3.read());
}

void Multiply::thread_and_ln349_2_fu_152_p2() {
    and_ln349_2_fu_152_p2 = (xor_ln309_1_fu_138_p2.read() & select_ln349_2_fu_144_p3.read());
}

void Multiply::thread_and_ln349_3_fu_202_p2() {
    and_ln349_3_fu_202_p2 = (xor_ln309_2_fu_188_p2.read() & select_ln349_3_fu_194_p3.read());
}

void Multiply::thread_and_ln349_fu_52_p2() {
    and_ln349_fu_52_p2 = (select_ln349_fu_44_p3.read() & x.read());
}

void Multiply::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void Multiply::thread_ap_return() {
    ap_return = (xor_ln349_1_fu_214_p2.read() ^ xor_ln349_fu_208_p2.read());
}

void Multiply::thread_select_ln309_1_fu_130_p3() {
    select_ln309_1_fu_130_p3 = (!tmp_3_fu_122_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_3_fu_122_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Multiply::thread_select_ln309_2_fu_180_p3() {
    select_ln309_2_fu_180_p3 = (!tmp_5_fu_172_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_5_fu_172_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Multiply::thread_select_ln309_fu_80_p3() {
    select_ln309_fu_80_p3 = (!tmp_1_fu_72_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_1_fu_72_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Multiply::thread_select_ln349_1_fu_94_p3() {
    select_ln349_1_fu_94_p3 = (!tmp_fu_58_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_fu_58_p3.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void Multiply::thread_select_ln349_2_fu_144_p3() {
    select_ln349_2_fu_144_p3 = (!tmp_2_fu_108_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_2_fu_108_p3.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void Multiply::thread_select_ln349_3_fu_194_p3() {
    select_ln349_3_fu_194_p3 = (!tmp_4_fu_158_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_4_fu_158_p3.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void Multiply::thread_select_ln349_fu_44_p3() {
    select_ln349_fu_44_p3 = (!trunc_ln349_fu_40_p1.read()[0].is_01())? sc_lv<8>(): ((trunc_ln349_fu_40_p1.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void Multiply::thread_shl_ln309_1_fu_116_p2() {
    shl_ln309_1_fu_116_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): xor_ln309_fu_88_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Multiply::thread_shl_ln309_2_fu_166_p2() {
    shl_ln309_2_fu_166_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): xor_ln309_1_fu_138_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Multiply::thread_shl_ln309_fu_66_p2() {
    shl_ln309_fu_66_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Multiply::thread_tmp_1_fu_72_p3() {
    tmp_1_fu_72_p3 = x.read().range(7, 7);
}

void Multiply::thread_tmp_2_fu_108_p3() {
    tmp_2_fu_108_p3 = y.read().range(2, 2);
}

void Multiply::thread_tmp_3_fu_122_p3() {
    tmp_3_fu_122_p3 = xor_ln309_fu_88_p2.read().range(7, 7);
}

void Multiply::thread_tmp_4_fu_158_p3() {
    tmp_4_fu_158_p3 = y.read().range(3, 3);
}

void Multiply::thread_tmp_5_fu_172_p3() {
    tmp_5_fu_172_p3 = xor_ln309_1_fu_138_p2.read().range(7, 7);
}

void Multiply::thread_tmp_fu_58_p3() {
    tmp_fu_58_p3 = y.read().range(1, 1);
}

void Multiply::thread_trunc_ln349_fu_40_p1() {
    trunc_ln349_fu_40_p1 = y.read().range(1-1, 0);
}

void Multiply::thread_xor_ln309_1_fu_138_p2() {
    xor_ln309_1_fu_138_p2 = (select_ln309_1_fu_130_p3.read() ^ shl_ln309_1_fu_116_p2.read());
}

void Multiply::thread_xor_ln309_2_fu_188_p2() {
    xor_ln309_2_fu_188_p2 = (select_ln309_2_fu_180_p3.read() ^ shl_ln309_2_fu_166_p2.read());
}

void Multiply::thread_xor_ln309_fu_88_p2() {
    xor_ln309_fu_88_p2 = (select_ln309_fu_80_p3.read() ^ shl_ln309_fu_66_p2.read());
}

void Multiply::thread_xor_ln349_1_fu_214_p2() {
    xor_ln349_1_fu_214_p2 = (and_ln349_3_fu_202_p2.read() ^ and_ln349_2_fu_152_p2.read());
}

void Multiply::thread_xor_ln349_fu_208_p2() {
    xor_ln349_fu_208_p2 = (and_ln349_1_fu_102_p2.read() ^ and_ln349_fu_52_p2.read());
}

}

