// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Cipher_HH_
#define _Cipher_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "MixColumns.h"
#include "Cipher_sbox.h"

namespace ap_rtl {

struct Cipher : public sc_module {
    // Port declarations 102
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > state_0_0_i;
    sc_out< sc_lv<8> > state_0_0_o;
    sc_out< sc_logic > state_0_0_o_ap_vld;
    sc_in< sc_lv<8> > state_0_1_i;
    sc_out< sc_lv<8> > state_0_1_o;
    sc_out< sc_logic > state_0_1_o_ap_vld;
    sc_in< sc_lv<8> > state_0_2_i;
    sc_out< sc_lv<8> > state_0_2_o;
    sc_out< sc_logic > state_0_2_o_ap_vld;
    sc_in< sc_lv<8> > state_0_3_i;
    sc_out< sc_lv<8> > state_0_3_o;
    sc_out< sc_logic > state_0_3_o_ap_vld;
    sc_in< sc_lv<8> > state_1_0_i;
    sc_out< sc_lv<8> > state_1_0_o;
    sc_out< sc_logic > state_1_0_o_ap_vld;
    sc_in< sc_lv<8> > state_1_1_i;
    sc_out< sc_lv<8> > state_1_1_o;
    sc_out< sc_logic > state_1_1_o_ap_vld;
    sc_in< sc_lv<8> > state_1_2_i;
    sc_out< sc_lv<8> > state_1_2_o;
    sc_out< sc_logic > state_1_2_o_ap_vld;
    sc_in< sc_lv<8> > state_1_3_i;
    sc_out< sc_lv<8> > state_1_3_o;
    sc_out< sc_logic > state_1_3_o_ap_vld;
    sc_in< sc_lv<8> > state_2_0_i;
    sc_out< sc_lv<8> > state_2_0_o;
    sc_out< sc_logic > state_2_0_o_ap_vld;
    sc_in< sc_lv<8> > state_2_1_i;
    sc_out< sc_lv<8> > state_2_1_o;
    sc_out< sc_logic > state_2_1_o_ap_vld;
    sc_in< sc_lv<8> > state_2_2_i;
    sc_out< sc_lv<8> > state_2_2_o;
    sc_out< sc_logic > state_2_2_o_ap_vld;
    sc_in< sc_lv<8> > state_2_3_i;
    sc_out< sc_lv<8> > state_2_3_o;
    sc_out< sc_logic > state_2_3_o_ap_vld;
    sc_in< sc_lv<8> > state_3_0_i;
    sc_out< sc_lv<8> > state_3_0_o;
    sc_out< sc_logic > state_3_0_o_ap_vld;
    sc_in< sc_lv<8> > state_3_1_i;
    sc_out< sc_lv<8> > state_3_1_o;
    sc_out< sc_logic > state_3_1_o_ap_vld;
    sc_in< sc_lv<8> > state_3_2_i;
    sc_out< sc_lv<8> > state_3_2_o;
    sc_out< sc_logic > state_3_2_o_ap_vld;
    sc_in< sc_lv<8> > state_3_3_i;
    sc_out< sc_lv<8> > state_3_3_o;
    sc_out< sc_logic > state_3_3_o_ap_vld;
    sc_out< sc_lv<4> > RoundKey_0_address0;
    sc_out< sc_logic > RoundKey_0_ce0;
    sc_in< sc_lv<8> > RoundKey_0_q0;
    sc_out< sc_lv<4> > RoundKey_1_address0;
    sc_out< sc_logic > RoundKey_1_ce0;
    sc_in< sc_lv<8> > RoundKey_1_q0;
    sc_out< sc_lv<4> > RoundKey_2_address0;
    sc_out< sc_logic > RoundKey_2_ce0;
    sc_in< sc_lv<8> > RoundKey_2_q0;
    sc_out< sc_lv<4> > RoundKey_3_address0;
    sc_out< sc_logic > RoundKey_3_ce0;
    sc_in< sc_lv<8> > RoundKey_3_q0;
    sc_out< sc_lv<4> > RoundKey_4_address0;
    sc_out< sc_logic > RoundKey_4_ce0;
    sc_in< sc_lv<8> > RoundKey_4_q0;
    sc_out< sc_lv<4> > RoundKey_5_address0;
    sc_out< sc_logic > RoundKey_5_ce0;
    sc_in< sc_lv<8> > RoundKey_5_q0;
    sc_out< sc_lv<4> > RoundKey_6_address0;
    sc_out< sc_logic > RoundKey_6_ce0;
    sc_in< sc_lv<8> > RoundKey_6_q0;
    sc_out< sc_lv<4> > RoundKey_7_address0;
    sc_out< sc_logic > RoundKey_7_ce0;
    sc_in< sc_lv<8> > RoundKey_7_q0;
    sc_out< sc_lv<4> > RoundKey_8_address0;
    sc_out< sc_logic > RoundKey_8_ce0;
    sc_in< sc_lv<8> > RoundKey_8_q0;
    sc_out< sc_lv<4> > RoundKey_9_address0;
    sc_out< sc_logic > RoundKey_9_ce0;
    sc_in< sc_lv<8> > RoundKey_9_q0;
    sc_out< sc_lv<4> > RoundKey_10_address0;
    sc_out< sc_logic > RoundKey_10_ce0;
    sc_in< sc_lv<8> > RoundKey_10_q0;
    sc_out< sc_lv<4> > RoundKey_11_address0;
    sc_out< sc_logic > RoundKey_11_ce0;
    sc_in< sc_lv<8> > RoundKey_11_q0;
    sc_out< sc_lv<4> > RoundKey_12_address0;
    sc_out< sc_logic > RoundKey_12_ce0;
    sc_in< sc_lv<8> > RoundKey_12_q0;
    sc_out< sc_lv<4> > RoundKey_13_address0;
    sc_out< sc_logic > RoundKey_13_ce0;
    sc_in< sc_lv<8> > RoundKey_13_q0;
    sc_out< sc_lv<4> > RoundKey_14_address0;
    sc_out< sc_logic > RoundKey_14_ce0;
    sc_in< sc_lv<8> > RoundKey_14_q0;
    sc_out< sc_lv<4> > RoundKey_15_address0;
    sc_out< sc_logic > RoundKey_15_ce0;
    sc_in< sc_lv<8> > RoundKey_15_q0;


    // Module declarations
    Cipher(sc_module_name name);
    SC_HAS_PROCESS(Cipher);

    ~Cipher();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Cipher_sbox* sbox_U;
    MixColumns* call_ret_MixColumns_fu_1304;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > sbox_address0;
    sc_signal< sc_logic > sbox_ce0;
    sc_signal< sc_lv<8> > sbox_q0;
    sc_signal< sc_lv<8> > sbox_address1;
    sc_signal< sc_logic > sbox_ce1;
    sc_signal< sc_lv<8> > sbox_q1;
    sc_signal< sc_lv<8> > sbox_address2;
    sc_signal< sc_logic > sbox_ce2;
    sc_signal< sc_lv<8> > sbox_q2;
    sc_signal< sc_lv<8> > sbox_address3;
    sc_signal< sc_logic > sbox_ce3;
    sc_signal< sc_lv<8> > sbox_q3;
    sc_signal< sc_lv<8> > sbox_address4;
    sc_signal< sc_logic > sbox_ce4;
    sc_signal< sc_lv<8> > sbox_q4;
    sc_signal< sc_lv<8> > sbox_address5;
    sc_signal< sc_logic > sbox_ce5;
    sc_signal< sc_lv<8> > sbox_q5;
    sc_signal< sc_lv<8> > sbox_address6;
    sc_signal< sc_logic > sbox_ce6;
    sc_signal< sc_lv<8> > sbox_q6;
    sc_signal< sc_lv<8> > sbox_address7;
    sc_signal< sc_logic > sbox_ce7;
    sc_signal< sc_lv<8> > sbox_q7;
    sc_signal< sc_lv<8> > sbox_address8;
    sc_signal< sc_logic > sbox_ce8;
    sc_signal< sc_lv<8> > sbox_q8;
    sc_signal< sc_lv<8> > sbox_address9;
    sc_signal< sc_logic > sbox_ce9;
    sc_signal< sc_lv<8> > sbox_q9;
    sc_signal< sc_lv<8> > sbox_address10;
    sc_signal< sc_logic > sbox_ce10;
    sc_signal< sc_lv<8> > sbox_q10;
    sc_signal< sc_lv<8> > sbox_address11;
    sc_signal< sc_logic > sbox_ce11;
    sc_signal< sc_lv<8> > sbox_q11;
    sc_signal< sc_lv<8> > sbox_address12;
    sc_signal< sc_logic > sbox_ce12;
    sc_signal< sc_lv<8> > sbox_q12;
    sc_signal< sc_lv<8> > sbox_address13;
    sc_signal< sc_logic > sbox_ce13;
    sc_signal< sc_lv<8> > sbox_q13;
    sc_signal< sc_lv<8> > sbox_address14;
    sc_signal< sc_logic > sbox_ce14;
    sc_signal< sc_lv<8> > sbox_q14;
    sc_signal< sc_lv<8> > sbox_address15;
    sc_signal< sc_logic > sbox_ce15;
    sc_signal< sc_lv<8> > sbox_q15;
    sc_signal< sc_lv<8> > state_load_33_3_3_reg_1133;
    sc_signal< sc_lv<8> > state_load_33_3_2_reg_1143;
    sc_signal< sc_lv<8> > state_load_33_3_1_reg_1153;
    sc_signal< sc_lv<8> > state_load_33_3_0_reg_1163;
    sc_signal< sc_lv<8> > state_load_33_2_3_reg_1173;
    sc_signal< sc_lv<8> > state_load_33_2_2_reg_1183;
    sc_signal< sc_lv<8> > state_load_33_2_1_reg_1193;
    sc_signal< sc_lv<8> > state_load_33_2_0_reg_1203;
    sc_signal< sc_lv<8> > state_load_33_1_3_reg_1213;
    sc_signal< sc_lv<8> > state_load_33_1_2_reg_1223;
    sc_signal< sc_lv<8> > state_load_33_1_1_reg_1233;
    sc_signal< sc_lv<8> > state_load_33_1_0_reg_1243;
    sc_signal< sc_lv<8> > state_load_33_0_3_reg_1253;
    sc_signal< sc_lv<8> > state_load_33_0_2_reg_1263;
    sc_signal< sc_lv<8> > state_load_33_0_1_reg_1273;
    sc_signal< sc_lv<8> > state_load_33_0_0_reg_1283;
    sc_signal< sc_lv<4> > round_assign_reg_1293;
    sc_signal< sc_lv<8> > xor_ln252_fu_1340_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > xor_ln252_1_fu_1346_p2;
    sc_signal< sc_lv<8> > xor_ln252_2_fu_1352_p2;
    sc_signal< sc_lv<8> > xor_ln252_3_fu_1358_p2;
    sc_signal< sc_lv<8> > xor_ln252_4_fu_1364_p2;
    sc_signal< sc_lv<8> > xor_ln252_5_fu_1370_p2;
    sc_signal< sc_lv<8> > xor_ln252_6_fu_1376_p2;
    sc_signal< sc_lv<8> > xor_ln252_7_fu_1382_p2;
    sc_signal< sc_lv<8> > xor_ln252_8_fu_1388_p2;
    sc_signal< sc_lv<8> > xor_ln252_9_fu_1394_p2;
    sc_signal< sc_lv<8> > xor_ln252_10_fu_1400_p2;
    sc_signal< sc_lv<8> > xor_ln252_11_fu_1406_p2;
    sc_signal< sc_lv<8> > xor_ln252_12_fu_1412_p2;
    sc_signal< sc_lv<8> > xor_ln252_13_fu_1418_p2;
    sc_signal< sc_lv<8> > xor_ln252_14_fu_1424_p2;
    sc_signal< sc_lv<8> > xor_ln252_15_fu_1430_p2;
    sc_signal< sc_lv<1> > icmp_ln436_fu_1436_p2;
    sc_signal< sc_lv<1> > icmp_ln436_reg_2060;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > round_fu_1542_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > xor_ln252_32_fu_1612_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<8> > xor_ln252_33_fu_1618_p2;
    sc_signal< sc_lv<8> > xor_ln252_34_fu_1624_p2;
    sc_signal< sc_lv<8> > xor_ln252_35_fu_1630_p2;
    sc_signal< sc_lv<8> > xor_ln252_36_fu_1636_p2;
    sc_signal< sc_lv<8> > xor_ln252_37_fu_1642_p2;
    sc_signal< sc_lv<8> > xor_ln252_38_fu_1648_p2;
    sc_signal< sc_lv<8> > xor_ln252_39_fu_1654_p2;
    sc_signal< sc_lv<8> > xor_ln252_40_fu_1660_p2;
    sc_signal< sc_lv<8> > xor_ln252_41_fu_1666_p2;
    sc_signal< sc_lv<8> > xor_ln252_42_fu_1672_p2;
    sc_signal< sc_lv<8> > xor_ln252_43_fu_1678_p2;
    sc_signal< sc_lv<8> > xor_ln252_44_fu_1684_p2;
    sc_signal< sc_lv<8> > xor_ln252_45_fu_1690_p2;
    sc_signal< sc_lv<8> > xor_ln252_46_fu_1696_p2;
    sc_signal< sc_lv<8> > xor_ln252_47_fu_1702_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > call_ret_MixColumns_fu_1304_ap_ready;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_0;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_1;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_2;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_3;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_4;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_5;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_6;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_7;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_8;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_9;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_10;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_11;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_12;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_13;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_14;
    sc_signal< sc_lv<8> > call_ret_MixColumns_fu_1304_ap_return_15;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4;
    sc_signal< sc_lv<8> > ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4;
    sc_signal< sc_lv<64> > zext_ln270_16_fu_1442_p1;
    sc_signal< sc_lv<64> > zext_ln270_17_fu_1447_p1;
    sc_signal< sc_lv<64> > zext_ln270_18_fu_1452_p1;
    sc_signal< sc_lv<64> > zext_ln270_19_fu_1457_p1;
    sc_signal< sc_lv<64> > zext_ln270_20_fu_1462_p1;
    sc_signal< sc_lv<64> > zext_ln270_21_fu_1467_p1;
    sc_signal< sc_lv<64> > zext_ln270_22_fu_1472_p1;
    sc_signal< sc_lv<64> > zext_ln270_23_fu_1477_p1;
    sc_signal< sc_lv<64> > zext_ln270_24_fu_1482_p1;
    sc_signal< sc_lv<64> > zext_ln270_25_fu_1487_p1;
    sc_signal< sc_lv<64> > zext_ln270_26_fu_1492_p1;
    sc_signal< sc_lv<64> > zext_ln270_27_fu_1497_p1;
    sc_signal< sc_lv<64> > zext_ln270_28_fu_1502_p1;
    sc_signal< sc_lv<64> > zext_ln270_29_fu_1507_p1;
    sc_signal< sc_lv<64> > zext_ln270_30_fu_1512_p1;
    sc_signal< sc_lv<64> > zext_ln270_31_fu_1517_p1;
    sc_signal< sc_lv<64> > zext_ln252_fu_1522_p1;
    sc_signal< sc_lv<64> > zext_ln270_fu_1708_p1;
    sc_signal< sc_lv<64> > zext_ln270_1_fu_1713_p1;
    sc_signal< sc_lv<64> > zext_ln270_2_fu_1718_p1;
    sc_signal< sc_lv<64> > zext_ln270_3_fu_1723_p1;
    sc_signal< sc_lv<64> > zext_ln270_4_fu_1728_p1;
    sc_signal< sc_lv<64> > zext_ln270_5_fu_1733_p1;
    sc_signal< sc_lv<64> > zext_ln270_6_fu_1738_p1;
    sc_signal< sc_lv<64> > zext_ln270_7_fu_1743_p1;
    sc_signal< sc_lv<64> > zext_ln270_8_fu_1748_p1;
    sc_signal< sc_lv<64> > zext_ln270_9_fu_1753_p1;
    sc_signal< sc_lv<64> > zext_ln270_10_fu_1758_p1;
    sc_signal< sc_lv<64> > zext_ln270_11_fu_1763_p1;
    sc_signal< sc_lv<64> > zext_ln270_12_fu_1768_p1;
    sc_signal< sc_lv<64> > zext_ln270_13_fu_1773_p1;
    sc_signal< sc_lv<64> > zext_ln270_14_fu_1778_p1;
    sc_signal< sc_lv<64> > zext_ln270_15_fu_1783_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_RoundKey_0_address0();
    void thread_RoundKey_0_ce0();
    void thread_RoundKey_10_address0();
    void thread_RoundKey_10_ce0();
    void thread_RoundKey_11_address0();
    void thread_RoundKey_11_ce0();
    void thread_RoundKey_12_address0();
    void thread_RoundKey_12_ce0();
    void thread_RoundKey_13_address0();
    void thread_RoundKey_13_ce0();
    void thread_RoundKey_14_address0();
    void thread_RoundKey_14_ce0();
    void thread_RoundKey_15_address0();
    void thread_RoundKey_15_ce0();
    void thread_RoundKey_1_address0();
    void thread_RoundKey_1_ce0();
    void thread_RoundKey_2_address0();
    void thread_RoundKey_2_ce0();
    void thread_RoundKey_3_address0();
    void thread_RoundKey_3_ce0();
    void thread_RoundKey_4_address0();
    void thread_RoundKey_4_ce0();
    void thread_RoundKey_5_address0();
    void thread_RoundKey_5_ce0();
    void thread_RoundKey_6_address0();
    void thread_RoundKey_6_ce0();
    void thread_RoundKey_7_address0();
    void thread_RoundKey_7_ce0();
    void thread_RoundKey_8_address0();
    void thread_RoundKey_8_ce0();
    void thread_RoundKey_9_address0();
    void thread_RoundKey_9_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4();
    void thread_ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4();
    void thread_ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4();
    void thread_ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4();
    void thread_ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4();
    void thread_ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4();
    void thread_ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4();
    void thread_ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4();
    void thread_ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4();
    void thread_ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4();
    void thread_ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4();
    void thread_ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4();
    void thread_ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4();
    void thread_ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4();
    void thread_ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4();
    void thread_ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4();
    void thread_ap_ready();
    void thread_icmp_ln436_fu_1436_p2();
    void thread_round_fu_1542_p2();
    void thread_sbox_address0();
    void thread_sbox_address1();
    void thread_sbox_address10();
    void thread_sbox_address11();
    void thread_sbox_address12();
    void thread_sbox_address13();
    void thread_sbox_address14();
    void thread_sbox_address15();
    void thread_sbox_address2();
    void thread_sbox_address3();
    void thread_sbox_address4();
    void thread_sbox_address5();
    void thread_sbox_address6();
    void thread_sbox_address7();
    void thread_sbox_address8();
    void thread_sbox_address9();
    void thread_sbox_ce0();
    void thread_sbox_ce1();
    void thread_sbox_ce10();
    void thread_sbox_ce11();
    void thread_sbox_ce12();
    void thread_sbox_ce13();
    void thread_sbox_ce14();
    void thread_sbox_ce15();
    void thread_sbox_ce2();
    void thread_sbox_ce3();
    void thread_sbox_ce4();
    void thread_sbox_ce5();
    void thread_sbox_ce6();
    void thread_sbox_ce7();
    void thread_sbox_ce8();
    void thread_sbox_ce9();
    void thread_state_0_0_o();
    void thread_state_0_0_o_ap_vld();
    void thread_state_0_1_o();
    void thread_state_0_1_o_ap_vld();
    void thread_state_0_2_o();
    void thread_state_0_2_o_ap_vld();
    void thread_state_0_3_o();
    void thread_state_0_3_o_ap_vld();
    void thread_state_1_0_o();
    void thread_state_1_0_o_ap_vld();
    void thread_state_1_1_o();
    void thread_state_1_1_o_ap_vld();
    void thread_state_1_2_o();
    void thread_state_1_2_o_ap_vld();
    void thread_state_1_3_o();
    void thread_state_1_3_o_ap_vld();
    void thread_state_2_0_o();
    void thread_state_2_0_o_ap_vld();
    void thread_state_2_1_o();
    void thread_state_2_1_o_ap_vld();
    void thread_state_2_2_o();
    void thread_state_2_2_o_ap_vld();
    void thread_state_2_3_o();
    void thread_state_2_3_o_ap_vld();
    void thread_state_3_0_o();
    void thread_state_3_0_o_ap_vld();
    void thread_state_3_1_o();
    void thread_state_3_1_o_ap_vld();
    void thread_state_3_2_o();
    void thread_state_3_2_o_ap_vld();
    void thread_state_3_3_o();
    void thread_state_3_3_o_ap_vld();
    void thread_xor_ln252_10_fu_1400_p2();
    void thread_xor_ln252_11_fu_1406_p2();
    void thread_xor_ln252_12_fu_1412_p2();
    void thread_xor_ln252_13_fu_1418_p2();
    void thread_xor_ln252_14_fu_1424_p2();
    void thread_xor_ln252_15_fu_1430_p2();
    void thread_xor_ln252_1_fu_1346_p2();
    void thread_xor_ln252_2_fu_1352_p2();
    void thread_xor_ln252_32_fu_1612_p2();
    void thread_xor_ln252_33_fu_1618_p2();
    void thread_xor_ln252_34_fu_1624_p2();
    void thread_xor_ln252_35_fu_1630_p2();
    void thread_xor_ln252_36_fu_1636_p2();
    void thread_xor_ln252_37_fu_1642_p2();
    void thread_xor_ln252_38_fu_1648_p2();
    void thread_xor_ln252_39_fu_1654_p2();
    void thread_xor_ln252_3_fu_1358_p2();
    void thread_xor_ln252_40_fu_1660_p2();
    void thread_xor_ln252_41_fu_1666_p2();
    void thread_xor_ln252_42_fu_1672_p2();
    void thread_xor_ln252_43_fu_1678_p2();
    void thread_xor_ln252_44_fu_1684_p2();
    void thread_xor_ln252_45_fu_1690_p2();
    void thread_xor_ln252_46_fu_1696_p2();
    void thread_xor_ln252_47_fu_1702_p2();
    void thread_xor_ln252_4_fu_1364_p2();
    void thread_xor_ln252_5_fu_1370_p2();
    void thread_xor_ln252_6_fu_1376_p2();
    void thread_xor_ln252_7_fu_1382_p2();
    void thread_xor_ln252_8_fu_1388_p2();
    void thread_xor_ln252_9_fu_1394_p2();
    void thread_xor_ln252_fu_1340_p2();
    void thread_zext_ln252_fu_1522_p1();
    void thread_zext_ln270_10_fu_1758_p1();
    void thread_zext_ln270_11_fu_1763_p1();
    void thread_zext_ln270_12_fu_1768_p1();
    void thread_zext_ln270_13_fu_1773_p1();
    void thread_zext_ln270_14_fu_1778_p1();
    void thread_zext_ln270_15_fu_1783_p1();
    void thread_zext_ln270_16_fu_1442_p1();
    void thread_zext_ln270_17_fu_1447_p1();
    void thread_zext_ln270_18_fu_1452_p1();
    void thread_zext_ln270_19_fu_1457_p1();
    void thread_zext_ln270_1_fu_1713_p1();
    void thread_zext_ln270_20_fu_1462_p1();
    void thread_zext_ln270_21_fu_1467_p1();
    void thread_zext_ln270_22_fu_1472_p1();
    void thread_zext_ln270_23_fu_1477_p1();
    void thread_zext_ln270_24_fu_1482_p1();
    void thread_zext_ln270_25_fu_1487_p1();
    void thread_zext_ln270_26_fu_1492_p1();
    void thread_zext_ln270_27_fu_1497_p1();
    void thread_zext_ln270_28_fu_1502_p1();
    void thread_zext_ln270_29_fu_1507_p1();
    void thread_zext_ln270_2_fu_1718_p1();
    void thread_zext_ln270_30_fu_1512_p1();
    void thread_zext_ln270_31_fu_1517_p1();
    void thread_zext_ln270_3_fu_1723_p1();
    void thread_zext_ln270_4_fu_1728_p1();
    void thread_zext_ln270_5_fu_1733_p1();
    void thread_zext_ln270_6_fu_1738_p1();
    void thread_zext_ln270_7_fu_1743_p1();
    void thread_zext_ln270_8_fu_1748_p1();
    void thread_zext_ln270_9_fu_1753_p1();
    void thread_zext_ln270_fu_1708_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
