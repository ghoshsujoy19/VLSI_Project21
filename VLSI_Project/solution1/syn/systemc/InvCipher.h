// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _InvCipher_HH_
#define _InvCipher_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "InvMixColumns.h"
#include "InvSubBytes.h"

namespace ap_rtl {

struct InvCipher : public sc_module {
    // Port declarations 102
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > state_0_0_i;
    sc_out< sc_lv<8> > state_0_0_o;
    sc_out< sc_logic > state_0_0_o_ap_vld;
    sc_in< sc_lv<8> > state_0_1_i;
    sc_out< sc_lv<8> > state_0_1_o;
    sc_out< sc_logic > state_0_1_o_ap_vld;
    sc_in< sc_lv<8> > state_0_2_i;
    sc_out< sc_lv<8> > state_0_2_o;
    sc_out< sc_logic > state_0_2_o_ap_vld;
    sc_in< sc_lv<8> > state_0_3_i;
    sc_out< sc_lv<8> > state_0_3_o;
    sc_out< sc_logic > state_0_3_o_ap_vld;
    sc_in< sc_lv<8> > state_1_0_i;
    sc_out< sc_lv<8> > state_1_0_o;
    sc_out< sc_logic > state_1_0_o_ap_vld;
    sc_in< sc_lv<8> > state_1_1_i;
    sc_out< sc_lv<8> > state_1_1_o;
    sc_out< sc_logic > state_1_1_o_ap_vld;
    sc_in< sc_lv<8> > state_1_2_i;
    sc_out< sc_lv<8> > state_1_2_o;
    sc_out< sc_logic > state_1_2_o_ap_vld;
    sc_in< sc_lv<8> > state_1_3_i;
    sc_out< sc_lv<8> > state_1_3_o;
    sc_out< sc_logic > state_1_3_o_ap_vld;
    sc_in< sc_lv<8> > state_2_0_i;
    sc_out< sc_lv<8> > state_2_0_o;
    sc_out< sc_logic > state_2_0_o_ap_vld;
    sc_in< sc_lv<8> > state_2_1_i;
    sc_out< sc_lv<8> > state_2_1_o;
    sc_out< sc_logic > state_2_1_o_ap_vld;
    sc_in< sc_lv<8> > state_2_2_i;
    sc_out< sc_lv<8> > state_2_2_o;
    sc_out< sc_logic > state_2_2_o_ap_vld;
    sc_in< sc_lv<8> > state_2_3_i;
    sc_out< sc_lv<8> > state_2_3_o;
    sc_out< sc_logic > state_2_3_o_ap_vld;
    sc_in< sc_lv<8> > state_3_0_i;
    sc_out< sc_lv<8> > state_3_0_o;
    sc_out< sc_logic > state_3_0_o_ap_vld;
    sc_in< sc_lv<8> > state_3_1_i;
    sc_out< sc_lv<8> > state_3_1_o;
    sc_out< sc_logic > state_3_1_o_ap_vld;
    sc_in< sc_lv<8> > state_3_2_i;
    sc_out< sc_lv<8> > state_3_2_o;
    sc_out< sc_logic > state_3_2_o_ap_vld;
    sc_in< sc_lv<8> > state_3_3_i;
    sc_out< sc_lv<8> > state_3_3_o;
    sc_out< sc_logic > state_3_3_o_ap_vld;
    sc_out< sc_lv<4> > RoundKey_0_address0;
    sc_out< sc_logic > RoundKey_0_ce0;
    sc_in< sc_lv<8> > RoundKey_0_q0;
    sc_out< sc_lv<4> > RoundKey_1_address0;
    sc_out< sc_logic > RoundKey_1_ce0;
    sc_in< sc_lv<8> > RoundKey_1_q0;
    sc_out< sc_lv<4> > RoundKey_2_address0;
    sc_out< sc_logic > RoundKey_2_ce0;
    sc_in< sc_lv<8> > RoundKey_2_q0;
    sc_out< sc_lv<4> > RoundKey_3_address0;
    sc_out< sc_logic > RoundKey_3_ce0;
    sc_in< sc_lv<8> > RoundKey_3_q0;
    sc_out< sc_lv<4> > RoundKey_4_address0;
    sc_out< sc_logic > RoundKey_4_ce0;
    sc_in< sc_lv<8> > RoundKey_4_q0;
    sc_out< sc_lv<4> > RoundKey_5_address0;
    sc_out< sc_logic > RoundKey_5_ce0;
    sc_in< sc_lv<8> > RoundKey_5_q0;
    sc_out< sc_lv<4> > RoundKey_6_address0;
    sc_out< sc_logic > RoundKey_6_ce0;
    sc_in< sc_lv<8> > RoundKey_6_q0;
    sc_out< sc_lv<4> > RoundKey_7_address0;
    sc_out< sc_logic > RoundKey_7_ce0;
    sc_in< sc_lv<8> > RoundKey_7_q0;
    sc_out< sc_lv<4> > RoundKey_8_address0;
    sc_out< sc_logic > RoundKey_8_ce0;
    sc_in< sc_lv<8> > RoundKey_8_q0;
    sc_out< sc_lv<4> > RoundKey_9_address0;
    sc_out< sc_logic > RoundKey_9_ce0;
    sc_in< sc_lv<8> > RoundKey_9_q0;
    sc_out< sc_lv<4> > RoundKey_10_address0;
    sc_out< sc_logic > RoundKey_10_ce0;
    sc_in< sc_lv<8> > RoundKey_10_q0;
    sc_out< sc_lv<4> > RoundKey_11_address0;
    sc_out< sc_logic > RoundKey_11_ce0;
    sc_in< sc_lv<8> > RoundKey_11_q0;
    sc_out< sc_lv<4> > RoundKey_12_address0;
    sc_out< sc_logic > RoundKey_12_ce0;
    sc_in< sc_lv<8> > RoundKey_12_q0;
    sc_out< sc_lv<4> > RoundKey_13_address0;
    sc_out< sc_logic > RoundKey_13_ce0;
    sc_in< sc_lv<8> > RoundKey_13_q0;
    sc_out< sc_lv<4> > RoundKey_14_address0;
    sc_out< sc_logic > RoundKey_14_ce0;
    sc_in< sc_lv<8> > RoundKey_14_q0;
    sc_out< sc_lv<4> > RoundKey_15_address0;
    sc_out< sc_logic > RoundKey_15_ce0;
    sc_in< sc_lv<8> > RoundKey_15_q0;


    // Module declarations
    InvCipher(sc_module_name name);
    SC_HAS_PROCESS(InvCipher);

    ~InvCipher();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    InvMixColumns* grp_InvMixColumns_fu_981;
    InvSubBytes* grp_InvSubBytes_fu_1001;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > xor_ln252_fu_1039_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > xor_ln252_1_fu_1046_p2;
    sc_signal< sc_lv<8> > xor_ln252_2_fu_1052_p2;
    sc_signal< sc_lv<8> > xor_ln252_3_fu_1058_p2;
    sc_signal< sc_lv<8> > xor_ln252_4_fu_1064_p2;
    sc_signal< sc_lv<8> > xor_ln252_5_fu_1071_p2;
    sc_signal< sc_lv<8> > xor_ln252_6_fu_1077_p2;
    sc_signal< sc_lv<8> > xor_ln252_7_fu_1083_p2;
    sc_signal< sc_lv<8> > xor_ln252_8_fu_1089_p2;
    sc_signal< sc_lv<8> > xor_ln252_9_fu_1096_p2;
    sc_signal< sc_lv<8> > xor_ln252_10_fu_1102_p2;
    sc_signal< sc_lv<8> > xor_ln252_11_fu_1108_p2;
    sc_signal< sc_lv<8> > xor_ln252_12_fu_1114_p2;
    sc_signal< sc_lv<8> > xor_ln252_13_fu_1121_p2;
    sc_signal< sc_lv<8> > xor_ln252_14_fu_1127_p2;
    sc_signal< sc_lv<8> > xor_ln252_15_fu_1133_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln464_fu_1139_p2;
    sc_signal< sc_lv<4> > round_fu_1165_p2;
    sc_signal< sc_lv<4> > round_reg_1850;
    sc_signal< sc_lv<8> > xor_ln252_32_fu_1235_p2;
    sc_signal< sc_lv<8> > xor_ln252_32_reg_1935;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > grp_InvSubBytes_fu_1001_ap_ready;
    sc_signal< sc_logic > grp_InvSubBytes_fu_1001_ap_done;
    sc_signal< sc_lv<8> > xor_ln252_33_fu_1243_p2;
    sc_signal< sc_lv<8> > xor_ln252_33_reg_1940;
    sc_signal< sc_lv<8> > xor_ln252_34_fu_1251_p2;
    sc_signal< sc_lv<8> > xor_ln252_34_reg_1945;
    sc_signal< sc_lv<8> > xor_ln252_35_fu_1259_p2;
    sc_signal< sc_lv<8> > xor_ln252_35_reg_1950;
    sc_signal< sc_lv<8> > xor_ln252_36_fu_1267_p2;
    sc_signal< sc_lv<8> > xor_ln252_36_reg_1955;
    sc_signal< sc_lv<8> > xor_ln252_37_fu_1275_p2;
    sc_signal< sc_lv<8> > xor_ln252_37_reg_1960;
    sc_signal< sc_lv<8> > xor_ln252_38_fu_1283_p2;
    sc_signal< sc_lv<8> > xor_ln252_38_reg_1965;
    sc_signal< sc_lv<8> > xor_ln252_39_fu_1291_p2;
    sc_signal< sc_lv<8> > xor_ln252_39_reg_1970;
    sc_signal< sc_lv<8> > xor_ln252_40_fu_1299_p2;
    sc_signal< sc_lv<8> > xor_ln252_40_reg_1975;
    sc_signal< sc_lv<8> > xor_ln252_41_fu_1307_p2;
    sc_signal< sc_lv<8> > xor_ln252_41_reg_1980;
    sc_signal< sc_lv<8> > xor_ln252_42_fu_1315_p2;
    sc_signal< sc_lv<8> > xor_ln252_42_reg_1985;
    sc_signal< sc_lv<8> > xor_ln252_43_fu_1323_p2;
    sc_signal< sc_lv<8> > xor_ln252_43_reg_1990;
    sc_signal< sc_lv<8> > xor_ln252_44_fu_1331_p2;
    sc_signal< sc_lv<8> > xor_ln252_44_reg_1995;
    sc_signal< sc_lv<8> > xor_ln252_45_fu_1339_p2;
    sc_signal< sc_lv<8> > xor_ln252_45_reg_2000;
    sc_signal< sc_lv<8> > xor_ln252_46_fu_1347_p2;
    sc_signal< sc_lv<8> > xor_ln252_46_reg_2005;
    sc_signal< sc_lv<8> > xor_ln252_47_fu_1355_p2;
    sc_signal< sc_lv<8> > xor_ln252_47_reg_2010;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > grp_InvMixColumns_fu_981_ap_ready;
    sc_signal< sc_logic > grp_InvMixColumns_fu_981_ap_done;
    sc_signal< sc_logic > grp_InvMixColumns_fu_981_ap_start;
    sc_signal< sc_logic > grp_InvMixColumns_fu_981_ap_idle;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_0;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_1;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_2;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_3;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_4;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_5;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_6;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_7;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_8;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_9;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_10;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_11;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_12;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_13;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_14;
    sc_signal< sc_lv<8> > grp_InvMixColumns_fu_981_ap_return_15;
    sc_signal< sc_logic > grp_InvSubBytes_fu_1001_ap_start;
    sc_signal< sc_logic > grp_InvSubBytes_fu_1001_ap_idle;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_0;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_1;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_2;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_3;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_4;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_5;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_6;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_7;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_8;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_9;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_10;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_11;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_12;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_13;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_14;
    sc_signal< sc_lv<8> > grp_InvSubBytes_fu_1001_ap_return_15;
    sc_signal< sc_lv<8> > state_3_0_load_4_reg_798;
    sc_signal< sc_lv<8> > state_2_0_load_4_reg_808;
    sc_signal< sc_lv<8> > state_1_0_load_4_reg_818;
    sc_signal< sc_lv<8> > state_0_0_load_4_reg_828;
    sc_signal< sc_lv<8> > state_3_2_read_ass_reg_838;
    sc_signal< sc_lv<8> > temp_reg_849;
    sc_signal< sc_lv<8> > state_2_3_read_ass_reg_860;
    sc_signal< sc_lv<8> > state_2_2_read_ass_reg_871;
    sc_signal< sc_lv<8> > state_2_1_read_ass_reg_882;
    sc_signal< sc_lv<8> > state_1_3_read_ass_reg_893;
    sc_signal< sc_lv<8> > temp_2_reg_904;
    sc_signal< sc_lv<8> > state_1_1_read_ass_reg_915;
    sc_signal< sc_lv<8> > temp_3_reg_926;
    sc_signal< sc_lv<8> > temp_1_reg_937;
    sc_signal< sc_lv<8> > state_0_1_read_ass_reg_948;
    sc_signal< sc_lv<8> > state_3_3_read_ass_reg_959;
    sc_signal< sc_lv<4> > round_assign_reg_970;
    sc_signal< sc_logic > grp_InvMixColumns_fu_981_ap_start_reg;
    sc_signal< sc_logic > grp_InvSubBytes_fu_1001_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln252_fu_1145_p1;
    sc_signal< sc_lv<8> > xor_ln252_16_fu_1495_p2;
    sc_signal< sc_lv<8> > xor_ln252_20_fu_1523_p2;
    sc_signal< sc_lv<8> > xor_ln252_24_fu_1551_p2;
    sc_signal< sc_lv<8> > xor_ln252_28_fu_1579_p2;
    sc_signal< sc_lv<8> > xor_ln252_17_fu_1502_p2;
    sc_signal< sc_lv<8> > xor_ln252_18_fu_1509_p2;
    sc_signal< sc_lv<8> > xor_ln252_19_fu_1516_p2;
    sc_signal< sc_lv<8> > xor_ln252_21_fu_1530_p2;
    sc_signal< sc_lv<8> > xor_ln252_22_fu_1537_p2;
    sc_signal< sc_lv<8> > xor_ln252_23_fu_1544_p2;
    sc_signal< sc_lv<8> > xor_ln252_25_fu_1558_p2;
    sc_signal< sc_lv<8> > xor_ln252_26_fu_1565_p2;
    sc_signal< sc_lv<8> > xor_ln252_27_fu_1572_p2;
    sc_signal< sc_lv<8> > xor_ln252_29_fu_1586_p2;
    sc_signal< sc_lv<8> > xor_ln252_30_fu_1593_p2;
    sc_signal< sc_lv<8> > xor_ln252_31_fu_1600_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_RoundKey_0_address0();
    void thread_RoundKey_0_ce0();
    void thread_RoundKey_10_address0();
    void thread_RoundKey_10_ce0();
    void thread_RoundKey_11_address0();
    void thread_RoundKey_11_ce0();
    void thread_RoundKey_12_address0();
    void thread_RoundKey_12_ce0();
    void thread_RoundKey_13_address0();
    void thread_RoundKey_13_ce0();
    void thread_RoundKey_14_address0();
    void thread_RoundKey_14_ce0();
    void thread_RoundKey_15_address0();
    void thread_RoundKey_15_ce0();
    void thread_RoundKey_1_address0();
    void thread_RoundKey_1_ce0();
    void thread_RoundKey_2_address0();
    void thread_RoundKey_2_ce0();
    void thread_RoundKey_3_address0();
    void thread_RoundKey_3_ce0();
    void thread_RoundKey_4_address0();
    void thread_RoundKey_4_ce0();
    void thread_RoundKey_5_address0();
    void thread_RoundKey_5_ce0();
    void thread_RoundKey_6_address0();
    void thread_RoundKey_6_ce0();
    void thread_RoundKey_7_address0();
    void thread_RoundKey_7_ce0();
    void thread_RoundKey_8_address0();
    void thread_RoundKey_8_ce0();
    void thread_RoundKey_9_address0();
    void thread_RoundKey_9_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_InvMixColumns_fu_981_ap_start();
    void thread_grp_InvSubBytes_fu_1001_ap_start();
    void thread_icmp_ln464_fu_1139_p2();
    void thread_round_fu_1165_p2();
    void thread_state_0_0_o();
    void thread_state_0_0_o_ap_vld();
    void thread_state_0_1_o();
    void thread_state_0_1_o_ap_vld();
    void thread_state_0_2_o();
    void thread_state_0_2_o_ap_vld();
    void thread_state_0_3_o();
    void thread_state_0_3_o_ap_vld();
    void thread_state_1_0_o();
    void thread_state_1_0_o_ap_vld();
    void thread_state_1_1_o();
    void thread_state_1_1_o_ap_vld();
    void thread_state_1_2_o();
    void thread_state_1_2_o_ap_vld();
    void thread_state_1_3_o();
    void thread_state_1_3_o_ap_vld();
    void thread_state_2_0_o();
    void thread_state_2_0_o_ap_vld();
    void thread_state_2_1_o();
    void thread_state_2_1_o_ap_vld();
    void thread_state_2_2_o();
    void thread_state_2_2_o_ap_vld();
    void thread_state_2_3_o();
    void thread_state_2_3_o_ap_vld();
    void thread_state_3_0_o();
    void thread_state_3_0_o_ap_vld();
    void thread_state_3_1_o();
    void thread_state_3_1_o_ap_vld();
    void thread_state_3_2_o();
    void thread_state_3_2_o_ap_vld();
    void thread_state_3_3_o();
    void thread_state_3_3_o_ap_vld();
    void thread_xor_ln252_10_fu_1102_p2();
    void thread_xor_ln252_11_fu_1108_p2();
    void thread_xor_ln252_12_fu_1114_p2();
    void thread_xor_ln252_13_fu_1121_p2();
    void thread_xor_ln252_14_fu_1127_p2();
    void thread_xor_ln252_15_fu_1133_p2();
    void thread_xor_ln252_16_fu_1495_p2();
    void thread_xor_ln252_17_fu_1502_p2();
    void thread_xor_ln252_18_fu_1509_p2();
    void thread_xor_ln252_19_fu_1516_p2();
    void thread_xor_ln252_1_fu_1046_p2();
    void thread_xor_ln252_20_fu_1523_p2();
    void thread_xor_ln252_21_fu_1530_p2();
    void thread_xor_ln252_22_fu_1537_p2();
    void thread_xor_ln252_23_fu_1544_p2();
    void thread_xor_ln252_24_fu_1551_p2();
    void thread_xor_ln252_25_fu_1558_p2();
    void thread_xor_ln252_26_fu_1565_p2();
    void thread_xor_ln252_27_fu_1572_p2();
    void thread_xor_ln252_28_fu_1579_p2();
    void thread_xor_ln252_29_fu_1586_p2();
    void thread_xor_ln252_2_fu_1052_p2();
    void thread_xor_ln252_30_fu_1593_p2();
    void thread_xor_ln252_31_fu_1600_p2();
    void thread_xor_ln252_32_fu_1235_p2();
    void thread_xor_ln252_33_fu_1243_p2();
    void thread_xor_ln252_34_fu_1251_p2();
    void thread_xor_ln252_35_fu_1259_p2();
    void thread_xor_ln252_36_fu_1267_p2();
    void thread_xor_ln252_37_fu_1275_p2();
    void thread_xor_ln252_38_fu_1283_p2();
    void thread_xor_ln252_39_fu_1291_p2();
    void thread_xor_ln252_3_fu_1058_p2();
    void thread_xor_ln252_40_fu_1299_p2();
    void thread_xor_ln252_41_fu_1307_p2();
    void thread_xor_ln252_42_fu_1315_p2();
    void thread_xor_ln252_43_fu_1323_p2();
    void thread_xor_ln252_44_fu_1331_p2();
    void thread_xor_ln252_45_fu_1339_p2();
    void thread_xor_ln252_46_fu_1347_p2();
    void thread_xor_ln252_47_fu_1355_p2();
    void thread_xor_ln252_4_fu_1064_p2();
    void thread_xor_ln252_5_fu_1071_p2();
    void thread_xor_ln252_6_fu_1077_p2();
    void thread_xor_ln252_7_fu_1083_p2();
    void thread_xor_ln252_8_fu_1089_p2();
    void thread_xor_ln252_9_fu_1096_p2();
    void thread_xor_ln252_fu_1039_p2();
    void thread_zext_ln252_fu_1145_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
