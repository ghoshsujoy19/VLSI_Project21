// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> Cipher::ap_ST_fsm_state1 = "1";
const sc_lv<8> Cipher::ap_ST_fsm_state2 = "10";
const sc_lv<8> Cipher::ap_ST_fsm_state3 = "100";
const sc_lv<8> Cipher::ap_ST_fsm_state4 = "1000";
const sc_lv<8> Cipher::ap_ST_fsm_state5 = "10000";
const sc_lv<8> Cipher::ap_ST_fsm_state6 = "100000";
const sc_lv<8> Cipher::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> Cipher::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> Cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_3 = "11";
const sc_lv<32> Cipher::ap_const_lv32_6 = "110";
const sc_lv<32> Cipher::ap_const_lv32_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_4 = "100";
const sc_lv<32> Cipher::ap_const_lv32_5 = "101";
const sc_lv<4> Cipher::ap_const_lv4_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_2 = "10";
const sc_lv<1> Cipher::ap_const_lv1_0 = "0";
const sc_lv<1> Cipher::ap_const_lv1_1 = "1";
const sc_lv<6> Cipher::ap_const_lv6_0 = "000000";
const sc_lv<6> Cipher::ap_const_lv6_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_7 = "111";
const sc_lv<4> Cipher::ap_const_lv4_A = "1010";
const bool Cipher::ap_const_boolean_1 = true;

Cipher::Cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_MixColumns_fu_478 = new MixColumns("grp_MixColumns_fu_478");
    grp_MixColumns_fu_478->ap_clk(ap_clk);
    grp_MixColumns_fu_478->ap_rst(ap_rst);
    grp_MixColumns_fu_478->ap_start(grp_MixColumns_fu_478_ap_start);
    grp_MixColumns_fu_478->ap_done(grp_MixColumns_fu_478_ap_done);
    grp_MixColumns_fu_478->ap_idle(grp_MixColumns_fu_478_ap_idle);
    grp_MixColumns_fu_478->ap_ready(grp_MixColumns_fu_478_ap_ready);
    grp_MixColumns_fu_478->state_0_0_read(reg_799);
    grp_MixColumns_fu_478->state_0_1_read(reg_829);
    grp_MixColumns_fu_478->state_0_2_read(reg_859);
    grp_MixColumns_fu_478->state_0_3_read(reg_889);
    grp_MixColumns_fu_478->state_1_0_read(reg_823);
    grp_MixColumns_fu_478->state_1_1_read(reg_853);
    grp_MixColumns_fu_478->state_1_2_read(reg_883);
    grp_MixColumns_fu_478->state_1_3_read(reg_817);
    grp_MixColumns_fu_478->state_2_0_read(reg_847);
    grp_MixColumns_fu_478->state_2_1_read(reg_877);
    grp_MixColumns_fu_478->state_2_2_read(reg_811);
    grp_MixColumns_fu_478->state_2_3_read(reg_841);
    grp_MixColumns_fu_478->state_3_0_read(reg_871);
    grp_MixColumns_fu_478->state_3_1_read(reg_805);
    grp_MixColumns_fu_478->state_3_2_read(reg_835);
    grp_MixColumns_fu_478->state_3_3_read(reg_865);
    grp_MixColumns_fu_478->ap_return_0(grp_MixColumns_fu_478_ap_return_0);
    grp_MixColumns_fu_478->ap_return_1(grp_MixColumns_fu_478_ap_return_1);
    grp_MixColumns_fu_478->ap_return_2(grp_MixColumns_fu_478_ap_return_2);
    grp_MixColumns_fu_478->ap_return_3(grp_MixColumns_fu_478_ap_return_3);
    grp_MixColumns_fu_478->ap_return_4(grp_MixColumns_fu_478_ap_return_4);
    grp_MixColumns_fu_478->ap_return_5(grp_MixColumns_fu_478_ap_return_5);
    grp_MixColumns_fu_478->ap_return_6(grp_MixColumns_fu_478_ap_return_6);
    grp_MixColumns_fu_478->ap_return_7(grp_MixColumns_fu_478_ap_return_7);
    grp_MixColumns_fu_478->ap_return_8(grp_MixColumns_fu_478_ap_return_8);
    grp_MixColumns_fu_478->ap_return_9(grp_MixColumns_fu_478_ap_return_9);
    grp_MixColumns_fu_478->ap_return_10(grp_MixColumns_fu_478_ap_return_10);
    grp_MixColumns_fu_478->ap_return_11(grp_MixColumns_fu_478_ap_return_11);
    grp_MixColumns_fu_478->ap_return_12(grp_MixColumns_fu_478_ap_return_12);
    grp_MixColumns_fu_478->ap_return_13(grp_MixColumns_fu_478_ap_return_13);
    grp_MixColumns_fu_478->ap_return_14(grp_MixColumns_fu_478_ap_return_14);
    grp_MixColumns_fu_478->ap_return_15(grp_MixColumns_fu_478_ap_return_15);
    grp_SubBytes_fu_498 = new SubBytes("grp_SubBytes_fu_498");
    grp_SubBytes_fu_498->ap_clk(ap_clk);
    grp_SubBytes_fu_498->ap_rst(ap_rst);
    grp_SubBytes_fu_498->ap_start(grp_SubBytes_fu_498_ap_start);
    grp_SubBytes_fu_498->ap_done(grp_SubBytes_fu_498_ap_done);
    grp_SubBytes_fu_498->ap_idle(grp_SubBytes_fu_498_ap_idle);
    grp_SubBytes_fu_498->ap_ready(grp_SubBytes_fu_498_ap_ready);
    grp_SubBytes_fu_498->state_0_0_read(state_0_0_load_4_reg_446);
    grp_SubBytes_fu_498->state_0_1_read(state_0_1_load_4_reg_436);
    grp_SubBytes_fu_498->state_0_2_read(state_0_2_load_4_reg_426);
    grp_SubBytes_fu_498->state_0_3_read(state_0_3_load_4_reg_416);
    grp_SubBytes_fu_498->state_1_0_read(state_1_0_load_4_reg_406);
    grp_SubBytes_fu_498->state_1_1_read(state_1_1_load_4_reg_396);
    grp_SubBytes_fu_498->state_1_2_read(state_1_2_load_4_reg_386);
    grp_SubBytes_fu_498->state_1_3_read(state_1_3_load_4_reg_376);
    grp_SubBytes_fu_498->state_2_0_read(state_2_0_load_4_reg_366);
    grp_SubBytes_fu_498->state_2_1_read(state_2_1_load_4_reg_356);
    grp_SubBytes_fu_498->state_2_2_read(state_2_2_load_4_reg_346);
    grp_SubBytes_fu_498->state_2_3_read(state_2_3_load_4_reg_336);
    grp_SubBytes_fu_498->state_3_0_read(state_3_0_load_4_reg_326);
    grp_SubBytes_fu_498->state_3_1_read(state_3_1_load_4_reg_316);
    grp_SubBytes_fu_498->state_3_2_read(state_3_2_load_4_reg_306);
    grp_SubBytes_fu_498->state_3_3_read(state_3_3_load_4_reg_456);
    grp_SubBytes_fu_498->ap_return_0(grp_SubBytes_fu_498_ap_return_0);
    grp_SubBytes_fu_498->ap_return_1(grp_SubBytes_fu_498_ap_return_1);
    grp_SubBytes_fu_498->ap_return_2(grp_SubBytes_fu_498_ap_return_2);
    grp_SubBytes_fu_498->ap_return_3(grp_SubBytes_fu_498_ap_return_3);
    grp_SubBytes_fu_498->ap_return_4(grp_SubBytes_fu_498_ap_return_4);
    grp_SubBytes_fu_498->ap_return_5(grp_SubBytes_fu_498_ap_return_5);
    grp_SubBytes_fu_498->ap_return_6(grp_SubBytes_fu_498_ap_return_6);
    grp_SubBytes_fu_498->ap_return_7(grp_SubBytes_fu_498_ap_return_7);
    grp_SubBytes_fu_498->ap_return_8(grp_SubBytes_fu_498_ap_return_8);
    grp_SubBytes_fu_498->ap_return_9(grp_SubBytes_fu_498_ap_return_9);
    grp_SubBytes_fu_498->ap_return_10(grp_SubBytes_fu_498_ap_return_10);
    grp_SubBytes_fu_498->ap_return_11(grp_SubBytes_fu_498_ap_return_11);
    grp_SubBytes_fu_498->ap_return_12(grp_SubBytes_fu_498_ap_return_12);
    grp_SubBytes_fu_498->ap_return_13(grp_SubBytes_fu_498_ap_return_13);
    grp_SubBytes_fu_498->ap_return_14(grp_SubBytes_fu_498_ap_return_14);
    grp_SubBytes_fu_498->ap_return_15(grp_SubBytes_fu_498_ap_return_15);
    grp_AddRoundKey_fu_536 = new AddRoundKey("grp_AddRoundKey_fu_536");
    grp_AddRoundKey_fu_536->ap_clk(ap_clk);
    grp_AddRoundKey_fu_536->ap_rst(ap_rst);
    grp_AddRoundKey_fu_536->ap_start(grp_AddRoundKey_fu_536_ap_start);
    grp_AddRoundKey_fu_536->ap_done(grp_AddRoundKey_fu_536_ap_done);
    grp_AddRoundKey_fu_536->ap_idle(grp_AddRoundKey_fu_536_ap_idle);
    grp_AddRoundKey_fu_536->ap_ready(grp_AddRoundKey_fu_536_ap_ready);
    grp_AddRoundKey_fu_536->round(grp_AddRoundKey_fu_536_round);
    grp_AddRoundKey_fu_536->state_0_0_read(grp_AddRoundKey_fu_536_state_0_0_read);
    grp_AddRoundKey_fu_536->state_0_1_read(grp_AddRoundKey_fu_536_state_0_1_read);
    grp_AddRoundKey_fu_536->state_0_2_read(grp_AddRoundKey_fu_536_state_0_2_read);
    grp_AddRoundKey_fu_536->state_0_3_read(grp_AddRoundKey_fu_536_state_0_3_read);
    grp_AddRoundKey_fu_536->state_1_0_read(grp_AddRoundKey_fu_536_state_1_0_read);
    grp_AddRoundKey_fu_536->state_1_1_read(grp_AddRoundKey_fu_536_state_1_1_read);
    grp_AddRoundKey_fu_536->state_1_2_read(grp_AddRoundKey_fu_536_state_1_2_read);
    grp_AddRoundKey_fu_536->state_1_3_read(grp_AddRoundKey_fu_536_state_1_3_read);
    grp_AddRoundKey_fu_536->state_2_0_read(grp_AddRoundKey_fu_536_state_2_0_read);
    grp_AddRoundKey_fu_536->state_2_1_read(grp_AddRoundKey_fu_536_state_2_1_read);
    grp_AddRoundKey_fu_536->state_2_2_read(grp_AddRoundKey_fu_536_state_2_2_read);
    grp_AddRoundKey_fu_536->state_2_3_read(grp_AddRoundKey_fu_536_state_2_3_read);
    grp_AddRoundKey_fu_536->state_3_0_read(grp_AddRoundKey_fu_536_state_3_0_read);
    grp_AddRoundKey_fu_536->state_3_1_read(grp_AddRoundKey_fu_536_state_3_1_read);
    grp_AddRoundKey_fu_536->state_3_2_read(grp_AddRoundKey_fu_536_state_3_2_read);
    grp_AddRoundKey_fu_536->state_3_3_read(grp_AddRoundKey_fu_536_state_3_3_read);
    grp_AddRoundKey_fu_536->RoundKey_0_address0(grp_AddRoundKey_fu_536_RoundKey_0_address0);
    grp_AddRoundKey_fu_536->RoundKey_0_ce0(grp_AddRoundKey_fu_536_RoundKey_0_ce0);
    grp_AddRoundKey_fu_536->RoundKey_0_q0(RoundKey_0_q0);
    grp_AddRoundKey_fu_536->RoundKey_1_address0(grp_AddRoundKey_fu_536_RoundKey_1_address0);
    grp_AddRoundKey_fu_536->RoundKey_1_ce0(grp_AddRoundKey_fu_536_RoundKey_1_ce0);
    grp_AddRoundKey_fu_536->RoundKey_1_q0(RoundKey_1_q0);
    grp_AddRoundKey_fu_536->RoundKey_2_address0(grp_AddRoundKey_fu_536_RoundKey_2_address0);
    grp_AddRoundKey_fu_536->RoundKey_2_ce0(grp_AddRoundKey_fu_536_RoundKey_2_ce0);
    grp_AddRoundKey_fu_536->RoundKey_2_q0(RoundKey_2_q0);
    grp_AddRoundKey_fu_536->RoundKey_3_address0(grp_AddRoundKey_fu_536_RoundKey_3_address0);
    grp_AddRoundKey_fu_536->RoundKey_3_ce0(grp_AddRoundKey_fu_536_RoundKey_3_ce0);
    grp_AddRoundKey_fu_536->RoundKey_3_q0(RoundKey_3_q0);
    grp_AddRoundKey_fu_536->RoundKey_4_address0(grp_AddRoundKey_fu_536_RoundKey_4_address0);
    grp_AddRoundKey_fu_536->RoundKey_4_ce0(grp_AddRoundKey_fu_536_RoundKey_4_ce0);
    grp_AddRoundKey_fu_536->RoundKey_4_q0(RoundKey_4_q0);
    grp_AddRoundKey_fu_536->RoundKey_5_address0(grp_AddRoundKey_fu_536_RoundKey_5_address0);
    grp_AddRoundKey_fu_536->RoundKey_5_ce0(grp_AddRoundKey_fu_536_RoundKey_5_ce0);
    grp_AddRoundKey_fu_536->RoundKey_5_q0(RoundKey_5_q0);
    grp_AddRoundKey_fu_536->RoundKey_6_address0(grp_AddRoundKey_fu_536_RoundKey_6_address0);
    grp_AddRoundKey_fu_536->RoundKey_6_ce0(grp_AddRoundKey_fu_536_RoundKey_6_ce0);
    grp_AddRoundKey_fu_536->RoundKey_6_q0(RoundKey_6_q0);
    grp_AddRoundKey_fu_536->RoundKey_7_address0(grp_AddRoundKey_fu_536_RoundKey_7_address0);
    grp_AddRoundKey_fu_536->RoundKey_7_ce0(grp_AddRoundKey_fu_536_RoundKey_7_ce0);
    grp_AddRoundKey_fu_536->RoundKey_7_q0(RoundKey_7_q0);
    grp_AddRoundKey_fu_536->RoundKey_8_address0(grp_AddRoundKey_fu_536_RoundKey_8_address0);
    grp_AddRoundKey_fu_536->RoundKey_8_ce0(grp_AddRoundKey_fu_536_RoundKey_8_ce0);
    grp_AddRoundKey_fu_536->RoundKey_8_q0(RoundKey_8_q0);
    grp_AddRoundKey_fu_536->RoundKey_9_address0(grp_AddRoundKey_fu_536_RoundKey_9_address0);
    grp_AddRoundKey_fu_536->RoundKey_9_ce0(grp_AddRoundKey_fu_536_RoundKey_9_ce0);
    grp_AddRoundKey_fu_536->RoundKey_9_q0(RoundKey_9_q0);
    grp_AddRoundKey_fu_536->RoundKey_10_address0(grp_AddRoundKey_fu_536_RoundKey_10_address0);
    grp_AddRoundKey_fu_536->RoundKey_10_ce0(grp_AddRoundKey_fu_536_RoundKey_10_ce0);
    grp_AddRoundKey_fu_536->RoundKey_10_q0(RoundKey_10_q0);
    grp_AddRoundKey_fu_536->RoundKey_11_address0(grp_AddRoundKey_fu_536_RoundKey_11_address0);
    grp_AddRoundKey_fu_536->RoundKey_11_ce0(grp_AddRoundKey_fu_536_RoundKey_11_ce0);
    grp_AddRoundKey_fu_536->RoundKey_11_q0(RoundKey_11_q0);
    grp_AddRoundKey_fu_536->RoundKey_12_address0(grp_AddRoundKey_fu_536_RoundKey_12_address0);
    grp_AddRoundKey_fu_536->RoundKey_12_ce0(grp_AddRoundKey_fu_536_RoundKey_12_ce0);
    grp_AddRoundKey_fu_536->RoundKey_12_q0(RoundKey_12_q0);
    grp_AddRoundKey_fu_536->RoundKey_13_address0(grp_AddRoundKey_fu_536_RoundKey_13_address0);
    grp_AddRoundKey_fu_536->RoundKey_13_ce0(grp_AddRoundKey_fu_536_RoundKey_13_ce0);
    grp_AddRoundKey_fu_536->RoundKey_13_q0(RoundKey_13_q0);
    grp_AddRoundKey_fu_536->RoundKey_14_address0(grp_AddRoundKey_fu_536_RoundKey_14_address0);
    grp_AddRoundKey_fu_536->RoundKey_14_ce0(grp_AddRoundKey_fu_536_RoundKey_14_ce0);
    grp_AddRoundKey_fu_536->RoundKey_14_q0(RoundKey_14_q0);
    grp_AddRoundKey_fu_536->RoundKey_15_address0(grp_AddRoundKey_fu_536_RoundKey_15_address0);
    grp_AddRoundKey_fu_536->RoundKey_15_ce0(grp_AddRoundKey_fu_536_RoundKey_15_ce0);
    grp_AddRoundKey_fu_536->RoundKey_15_q0(RoundKey_15_q0);
    grp_AddRoundKey_fu_536->ap_return_0(grp_AddRoundKey_fu_536_ap_return_0);
    grp_AddRoundKey_fu_536->ap_return_1(grp_AddRoundKey_fu_536_ap_return_1);
    grp_AddRoundKey_fu_536->ap_return_2(grp_AddRoundKey_fu_536_ap_return_2);
    grp_AddRoundKey_fu_536->ap_return_3(grp_AddRoundKey_fu_536_ap_return_3);
    grp_AddRoundKey_fu_536->ap_return_4(grp_AddRoundKey_fu_536_ap_return_4);
    grp_AddRoundKey_fu_536->ap_return_5(grp_AddRoundKey_fu_536_ap_return_5);
    grp_AddRoundKey_fu_536->ap_return_6(grp_AddRoundKey_fu_536_ap_return_6);
    grp_AddRoundKey_fu_536->ap_return_7(grp_AddRoundKey_fu_536_ap_return_7);
    grp_AddRoundKey_fu_536->ap_return_8(grp_AddRoundKey_fu_536_ap_return_8);
    grp_AddRoundKey_fu_536->ap_return_9(grp_AddRoundKey_fu_536_ap_return_9);
    grp_AddRoundKey_fu_536->ap_return_10(grp_AddRoundKey_fu_536_ap_return_10);
    grp_AddRoundKey_fu_536->ap_return_11(grp_AddRoundKey_fu_536_ap_return_11);
    grp_AddRoundKey_fu_536->ap_return_12(grp_AddRoundKey_fu_536_ap_return_12);
    grp_AddRoundKey_fu_536->ap_return_13(grp_AddRoundKey_fu_536_ap_return_13);
    grp_AddRoundKey_fu_536->ap_return_14(grp_AddRoundKey_fu_536_ap_return_14);
    grp_AddRoundKey_fu_536->ap_return_15(grp_AddRoundKey_fu_536_ap_return_15);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_0_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_0_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_0_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_0_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_10_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_10_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_10_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_10_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_11_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_11_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_11_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_11_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_12_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_12_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_12_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_12_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_13_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_13_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_13_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_13_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_14_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_14_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_14_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_14_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_15_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_15_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_15_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_15_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_1_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_1_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_1_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_1_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_2_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_2_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_2_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_2_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_3_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_3_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_3_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_3_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_4_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_4_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_4_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_4_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_5_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_5_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_5_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_5_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_6_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_6_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_6_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_6_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_7_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_7_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_7_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_7_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_8_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_8_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_8_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_8_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_9_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_9_address0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_9_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AddRoundKey_fu_536_RoundKey_9_ce0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_ap_start);
    sensitive << ( grp_AddRoundKey_fu_536_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_round);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln427_reg_1251 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_0_0_read);
    sensitive << ( state_0_0_i );
    sensitive << ( reg_799 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_0_0_ret2_reg_1171 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_0_1_read);
    sensitive << ( state_0_1_i );
    sensitive << ( reg_829 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_0_1_ret1_20_reg_1176 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_0_2_read);
    sensitive << ( state_0_2_i );
    sensitive << ( reg_859 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_0_2_ret1_21_reg_1181 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_0_3_read);
    sensitive << ( state_0_3_i );
    sensitive << ( reg_889 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_0_3_ret1_22_reg_1186 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_1_0_read);
    sensitive << ( state_1_0_i );
    sensitive << ( reg_823 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_1_0_ret1_reg_1191 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_1_1_read);
    sensitive << ( state_1_1_i );
    sensitive << ( reg_853 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_1_1_ret1_23_reg_1196 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_1_2_read);
    sensitive << ( state_1_2_i );
    sensitive << ( reg_883 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_1_2_ret1_24_reg_1201 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_1_3_read);
    sensitive << ( state_1_3_i );
    sensitive << ( reg_817 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_1_3_ret1_25_reg_1206 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_2_0_read);
    sensitive << ( state_2_0_i );
    sensitive << ( reg_847 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_2_0_ret1_reg_1211 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_2_1_read);
    sensitive << ( state_2_1_i );
    sensitive << ( reg_877 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_2_1_ret2_reg_1216 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_2_2_read);
    sensitive << ( state_2_2_i );
    sensitive << ( reg_811 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_2_2_ret2_reg_1221 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_2_3_read);
    sensitive << ( state_2_3_i );
    sensitive << ( reg_841 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_2_3_ret2_reg_1226 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_3_0_read);
    sensitive << ( state_3_0_i );
    sensitive << ( reg_871 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_3_0_ret2_reg_1231 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_3_1_read);
    sensitive << ( state_3_1_i );
    sensitive << ( reg_805 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_3_1_ret2_reg_1236 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_3_2_read);
    sensitive << ( state_3_2_i );
    sensitive << ( reg_835 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_3_2_ret2_reg_1241 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_AddRoundKey_fu_536_state_3_3_read);
    sensitive << ( state_3_3_i );
    sensitive << ( reg_865 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_3_3_ret2_reg_1246 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_MixColumns_fu_478_ap_start);
    sensitive << ( grp_MixColumns_fu_478_ap_start_reg );

    SC_METHOD(thread_grp_SubBytes_fu_498_ap_start);
    sensitive << ( grp_SubBytes_fu_498_ap_start_reg );

    SC_METHOD(thread_icmp_ln422_fu_895_p2);
    sensitive << ( round_0_reg_466 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_round_fu_1002_p2);
    sensitive << ( round_0_reg_466 );

    SC_METHOD(thread_state_0_0_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_0 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_0 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_0 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_0_0_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_0_1_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_1 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_5 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_0_1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_0_2_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_2 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_10 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_0_2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_0_3_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_3 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_15 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_3 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_0_3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_1_0_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_4 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_4 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_4 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_1_0_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_1_1_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_5 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_9 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_5 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_1_1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_1_2_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_6 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_14 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_1_2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_1_3_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_7 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_3 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_1_3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_2_0_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_8 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_8 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_8 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_2_0_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_2_1_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_9 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_13 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_9 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_2_1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_2_2_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_10 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_10 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_2_2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_2_3_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_11 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_7 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_11 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_2_3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_3_0_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_12 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_12 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_12 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_3_0_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_3_1_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_13 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_1 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_13 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_3_1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_3_2_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_14 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_6 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_14 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_3_2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_3_3_o);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_MixColumns_fu_478_ap_return_15 );
    sensitive << ( grp_SubBytes_fu_498_ap_return_11 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_return_15 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_3_3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_zext_ln427_fu_997_p1);
    sensitive << ( round_0_reg_466 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_SubBytes_fu_498_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_536_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_MixColumns_fu_478_ap_done );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln422_fu_895_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000001";
    grp_MixColumns_fu_478_ap_start_reg = SC_LOGIC_0;
    grp_SubBytes_fu_498_ap_start_reg = SC_LOGIC_0;
    grp_AddRoundKey_fu_536_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_0_0_i, "(port)state_0_0_i");
    sc_trace(mVcdFile, state_0_0_o, "(port)state_0_0_o");
    sc_trace(mVcdFile, state_0_0_o_ap_vld, "(port)state_0_0_o_ap_vld");
    sc_trace(mVcdFile, state_0_1_i, "(port)state_0_1_i");
    sc_trace(mVcdFile, state_0_1_o, "(port)state_0_1_o");
    sc_trace(mVcdFile, state_0_1_o_ap_vld, "(port)state_0_1_o_ap_vld");
    sc_trace(mVcdFile, state_0_2_i, "(port)state_0_2_i");
    sc_trace(mVcdFile, state_0_2_o, "(port)state_0_2_o");
    sc_trace(mVcdFile, state_0_2_o_ap_vld, "(port)state_0_2_o_ap_vld");
    sc_trace(mVcdFile, state_0_3_i, "(port)state_0_3_i");
    sc_trace(mVcdFile, state_0_3_o, "(port)state_0_3_o");
    sc_trace(mVcdFile, state_0_3_o_ap_vld, "(port)state_0_3_o_ap_vld");
    sc_trace(mVcdFile, state_1_0_i, "(port)state_1_0_i");
    sc_trace(mVcdFile, state_1_0_o, "(port)state_1_0_o");
    sc_trace(mVcdFile, state_1_0_o_ap_vld, "(port)state_1_0_o_ap_vld");
    sc_trace(mVcdFile, state_1_1_i, "(port)state_1_1_i");
    sc_trace(mVcdFile, state_1_1_o, "(port)state_1_1_o");
    sc_trace(mVcdFile, state_1_1_o_ap_vld, "(port)state_1_1_o_ap_vld");
    sc_trace(mVcdFile, state_1_2_i, "(port)state_1_2_i");
    sc_trace(mVcdFile, state_1_2_o, "(port)state_1_2_o");
    sc_trace(mVcdFile, state_1_2_o_ap_vld, "(port)state_1_2_o_ap_vld");
    sc_trace(mVcdFile, state_1_3_i, "(port)state_1_3_i");
    sc_trace(mVcdFile, state_1_3_o, "(port)state_1_3_o");
    sc_trace(mVcdFile, state_1_3_o_ap_vld, "(port)state_1_3_o_ap_vld");
    sc_trace(mVcdFile, state_2_0_i, "(port)state_2_0_i");
    sc_trace(mVcdFile, state_2_0_o, "(port)state_2_0_o");
    sc_trace(mVcdFile, state_2_0_o_ap_vld, "(port)state_2_0_o_ap_vld");
    sc_trace(mVcdFile, state_2_1_i, "(port)state_2_1_i");
    sc_trace(mVcdFile, state_2_1_o, "(port)state_2_1_o");
    sc_trace(mVcdFile, state_2_1_o_ap_vld, "(port)state_2_1_o_ap_vld");
    sc_trace(mVcdFile, state_2_2_i, "(port)state_2_2_i");
    sc_trace(mVcdFile, state_2_2_o, "(port)state_2_2_o");
    sc_trace(mVcdFile, state_2_2_o_ap_vld, "(port)state_2_2_o_ap_vld");
    sc_trace(mVcdFile, state_2_3_i, "(port)state_2_3_i");
    sc_trace(mVcdFile, state_2_3_o, "(port)state_2_3_o");
    sc_trace(mVcdFile, state_2_3_o_ap_vld, "(port)state_2_3_o_ap_vld");
    sc_trace(mVcdFile, state_3_0_i, "(port)state_3_0_i");
    sc_trace(mVcdFile, state_3_0_o, "(port)state_3_0_o");
    sc_trace(mVcdFile, state_3_0_o_ap_vld, "(port)state_3_0_o_ap_vld");
    sc_trace(mVcdFile, state_3_1_i, "(port)state_3_1_i");
    sc_trace(mVcdFile, state_3_1_o, "(port)state_3_1_o");
    sc_trace(mVcdFile, state_3_1_o_ap_vld, "(port)state_3_1_o_ap_vld");
    sc_trace(mVcdFile, state_3_2_i, "(port)state_3_2_i");
    sc_trace(mVcdFile, state_3_2_o, "(port)state_3_2_o");
    sc_trace(mVcdFile, state_3_2_o_ap_vld, "(port)state_3_2_o_ap_vld");
    sc_trace(mVcdFile, state_3_3_i, "(port)state_3_3_i");
    sc_trace(mVcdFile, state_3_3_o, "(port)state_3_3_o");
    sc_trace(mVcdFile, state_3_3_o_ap_vld, "(port)state_3_3_o_ap_vld");
    sc_trace(mVcdFile, RoundKey_0_address0, "(port)RoundKey_0_address0");
    sc_trace(mVcdFile, RoundKey_0_ce0, "(port)RoundKey_0_ce0");
    sc_trace(mVcdFile, RoundKey_0_q0, "(port)RoundKey_0_q0");
    sc_trace(mVcdFile, RoundKey_1_address0, "(port)RoundKey_1_address0");
    sc_trace(mVcdFile, RoundKey_1_ce0, "(port)RoundKey_1_ce0");
    sc_trace(mVcdFile, RoundKey_1_q0, "(port)RoundKey_1_q0");
    sc_trace(mVcdFile, RoundKey_2_address0, "(port)RoundKey_2_address0");
    sc_trace(mVcdFile, RoundKey_2_ce0, "(port)RoundKey_2_ce0");
    sc_trace(mVcdFile, RoundKey_2_q0, "(port)RoundKey_2_q0");
    sc_trace(mVcdFile, RoundKey_3_address0, "(port)RoundKey_3_address0");
    sc_trace(mVcdFile, RoundKey_3_ce0, "(port)RoundKey_3_ce0");
    sc_trace(mVcdFile, RoundKey_3_q0, "(port)RoundKey_3_q0");
    sc_trace(mVcdFile, RoundKey_4_address0, "(port)RoundKey_4_address0");
    sc_trace(mVcdFile, RoundKey_4_ce0, "(port)RoundKey_4_ce0");
    sc_trace(mVcdFile, RoundKey_4_q0, "(port)RoundKey_4_q0");
    sc_trace(mVcdFile, RoundKey_5_address0, "(port)RoundKey_5_address0");
    sc_trace(mVcdFile, RoundKey_5_ce0, "(port)RoundKey_5_ce0");
    sc_trace(mVcdFile, RoundKey_5_q0, "(port)RoundKey_5_q0");
    sc_trace(mVcdFile, RoundKey_6_address0, "(port)RoundKey_6_address0");
    sc_trace(mVcdFile, RoundKey_6_ce0, "(port)RoundKey_6_ce0");
    sc_trace(mVcdFile, RoundKey_6_q0, "(port)RoundKey_6_q0");
    sc_trace(mVcdFile, RoundKey_7_address0, "(port)RoundKey_7_address0");
    sc_trace(mVcdFile, RoundKey_7_ce0, "(port)RoundKey_7_ce0");
    sc_trace(mVcdFile, RoundKey_7_q0, "(port)RoundKey_7_q0");
    sc_trace(mVcdFile, RoundKey_8_address0, "(port)RoundKey_8_address0");
    sc_trace(mVcdFile, RoundKey_8_ce0, "(port)RoundKey_8_ce0");
    sc_trace(mVcdFile, RoundKey_8_q0, "(port)RoundKey_8_q0");
    sc_trace(mVcdFile, RoundKey_9_address0, "(port)RoundKey_9_address0");
    sc_trace(mVcdFile, RoundKey_9_ce0, "(port)RoundKey_9_ce0");
    sc_trace(mVcdFile, RoundKey_9_q0, "(port)RoundKey_9_q0");
    sc_trace(mVcdFile, RoundKey_10_address0, "(port)RoundKey_10_address0");
    sc_trace(mVcdFile, RoundKey_10_ce0, "(port)RoundKey_10_ce0");
    sc_trace(mVcdFile, RoundKey_10_q0, "(port)RoundKey_10_q0");
    sc_trace(mVcdFile, RoundKey_11_address0, "(port)RoundKey_11_address0");
    sc_trace(mVcdFile, RoundKey_11_ce0, "(port)RoundKey_11_ce0");
    sc_trace(mVcdFile, RoundKey_11_q0, "(port)RoundKey_11_q0");
    sc_trace(mVcdFile, RoundKey_12_address0, "(port)RoundKey_12_address0");
    sc_trace(mVcdFile, RoundKey_12_ce0, "(port)RoundKey_12_ce0");
    sc_trace(mVcdFile, RoundKey_12_q0, "(port)RoundKey_12_q0");
    sc_trace(mVcdFile, RoundKey_13_address0, "(port)RoundKey_13_address0");
    sc_trace(mVcdFile, RoundKey_13_ce0, "(port)RoundKey_13_ce0");
    sc_trace(mVcdFile, RoundKey_13_q0, "(port)RoundKey_13_q0");
    sc_trace(mVcdFile, RoundKey_14_address0, "(port)RoundKey_14_address0");
    sc_trace(mVcdFile, RoundKey_14_ce0, "(port)RoundKey_14_ce0");
    sc_trace(mVcdFile, RoundKey_14_q0, "(port)RoundKey_14_q0");
    sc_trace(mVcdFile, RoundKey_15_address0, "(port)RoundKey_15_address0");
    sc_trace(mVcdFile, RoundKey_15_ce0, "(port)RoundKey_15_ce0");
    sc_trace(mVcdFile, RoundKey_15_q0, "(port)RoundKey_15_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_799, "reg_799");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_ready, "grp_SubBytes_fu_498_ap_ready");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_done, "grp_SubBytes_fu_498_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, reg_805, "reg_805");
    sc_trace(mVcdFile, reg_811, "reg_811");
    sc_trace(mVcdFile, reg_817, "reg_817");
    sc_trace(mVcdFile, reg_823, "reg_823");
    sc_trace(mVcdFile, reg_829, "reg_829");
    sc_trace(mVcdFile, reg_835, "reg_835");
    sc_trace(mVcdFile, reg_841, "reg_841");
    sc_trace(mVcdFile, reg_847, "reg_847");
    sc_trace(mVcdFile, reg_853, "reg_853");
    sc_trace(mVcdFile, reg_859, "reg_859");
    sc_trace(mVcdFile, reg_865, "reg_865");
    sc_trace(mVcdFile, reg_871, "reg_871");
    sc_trace(mVcdFile, reg_877, "reg_877");
    sc_trace(mVcdFile, reg_883, "reg_883");
    sc_trace(mVcdFile, reg_889, "reg_889");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_ready, "grp_AddRoundKey_fu_536_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_done, "grp_AddRoundKey_fu_536_ap_done");
    sc_trace(mVcdFile, state_0_0_ret2_reg_1171, "state_0_0_ret2_reg_1171");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_ready, "grp_MixColumns_fu_478_ap_ready");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_done, "grp_MixColumns_fu_478_ap_done");
    sc_trace(mVcdFile, state_0_1_ret1_20_reg_1176, "state_0_1_ret1_20_reg_1176");
    sc_trace(mVcdFile, state_0_2_ret1_21_reg_1181, "state_0_2_ret1_21_reg_1181");
    sc_trace(mVcdFile, state_0_3_ret1_22_reg_1186, "state_0_3_ret1_22_reg_1186");
    sc_trace(mVcdFile, state_1_0_ret1_reg_1191, "state_1_0_ret1_reg_1191");
    sc_trace(mVcdFile, state_1_1_ret1_23_reg_1196, "state_1_1_ret1_23_reg_1196");
    sc_trace(mVcdFile, state_1_2_ret1_24_reg_1201, "state_1_2_ret1_24_reg_1201");
    sc_trace(mVcdFile, state_1_3_ret1_25_reg_1206, "state_1_3_ret1_25_reg_1206");
    sc_trace(mVcdFile, state_2_0_ret1_reg_1211, "state_2_0_ret1_reg_1211");
    sc_trace(mVcdFile, state_2_1_ret2_reg_1216, "state_2_1_ret2_reg_1216");
    sc_trace(mVcdFile, state_2_2_ret2_reg_1221, "state_2_2_ret2_reg_1221");
    sc_trace(mVcdFile, state_2_3_ret2_reg_1226, "state_2_3_ret2_reg_1226");
    sc_trace(mVcdFile, state_3_0_ret2_reg_1231, "state_3_0_ret2_reg_1231");
    sc_trace(mVcdFile, state_3_1_ret2_reg_1236, "state_3_1_ret2_reg_1236");
    sc_trace(mVcdFile, state_3_2_ret2_reg_1241, "state_3_2_ret2_reg_1241");
    sc_trace(mVcdFile, state_3_3_ret2_reg_1246, "state_3_3_ret2_reg_1246");
    sc_trace(mVcdFile, zext_ln427_fu_997_p1, "zext_ln427_fu_997_p1");
    sc_trace(mVcdFile, zext_ln427_reg_1251, "zext_ln427_reg_1251");
    sc_trace(mVcdFile, round_fu_1002_p2, "round_fu_1002_p2");
    sc_trace(mVcdFile, round_reg_1256, "round_reg_1256");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_start, "grp_MixColumns_fu_478_ap_start");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_idle, "grp_MixColumns_fu_478_ap_idle");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_0, "grp_MixColumns_fu_478_ap_return_0");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_1, "grp_MixColumns_fu_478_ap_return_1");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_2, "grp_MixColumns_fu_478_ap_return_2");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_3, "grp_MixColumns_fu_478_ap_return_3");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_4, "grp_MixColumns_fu_478_ap_return_4");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_5, "grp_MixColumns_fu_478_ap_return_5");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_6, "grp_MixColumns_fu_478_ap_return_6");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_7, "grp_MixColumns_fu_478_ap_return_7");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_8, "grp_MixColumns_fu_478_ap_return_8");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_9, "grp_MixColumns_fu_478_ap_return_9");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_10, "grp_MixColumns_fu_478_ap_return_10");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_11, "grp_MixColumns_fu_478_ap_return_11");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_12, "grp_MixColumns_fu_478_ap_return_12");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_13, "grp_MixColumns_fu_478_ap_return_13");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_14, "grp_MixColumns_fu_478_ap_return_14");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_return_15, "grp_MixColumns_fu_478_ap_return_15");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_start, "grp_SubBytes_fu_498_ap_start");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_idle, "grp_SubBytes_fu_498_ap_idle");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_0, "grp_SubBytes_fu_498_ap_return_0");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_1, "grp_SubBytes_fu_498_ap_return_1");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_2, "grp_SubBytes_fu_498_ap_return_2");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_3, "grp_SubBytes_fu_498_ap_return_3");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_4, "grp_SubBytes_fu_498_ap_return_4");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_5, "grp_SubBytes_fu_498_ap_return_5");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_6, "grp_SubBytes_fu_498_ap_return_6");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_7, "grp_SubBytes_fu_498_ap_return_7");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_8, "grp_SubBytes_fu_498_ap_return_8");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_9, "grp_SubBytes_fu_498_ap_return_9");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_10, "grp_SubBytes_fu_498_ap_return_10");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_11, "grp_SubBytes_fu_498_ap_return_11");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_12, "grp_SubBytes_fu_498_ap_return_12");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_13, "grp_SubBytes_fu_498_ap_return_13");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_14, "grp_SubBytes_fu_498_ap_return_14");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_return_15, "grp_SubBytes_fu_498_ap_return_15");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_start, "grp_AddRoundKey_fu_536_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_idle, "grp_AddRoundKey_fu_536_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_round, "grp_AddRoundKey_fu_536_round");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_0_0_read, "grp_AddRoundKey_fu_536_state_0_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_0_1_read, "grp_AddRoundKey_fu_536_state_0_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_0_2_read, "grp_AddRoundKey_fu_536_state_0_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_0_3_read, "grp_AddRoundKey_fu_536_state_0_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_1_0_read, "grp_AddRoundKey_fu_536_state_1_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_1_1_read, "grp_AddRoundKey_fu_536_state_1_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_1_2_read, "grp_AddRoundKey_fu_536_state_1_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_1_3_read, "grp_AddRoundKey_fu_536_state_1_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_2_0_read, "grp_AddRoundKey_fu_536_state_2_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_2_1_read, "grp_AddRoundKey_fu_536_state_2_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_2_2_read, "grp_AddRoundKey_fu_536_state_2_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_2_3_read, "grp_AddRoundKey_fu_536_state_2_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_3_0_read, "grp_AddRoundKey_fu_536_state_3_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_3_1_read, "grp_AddRoundKey_fu_536_state_3_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_3_2_read, "grp_AddRoundKey_fu_536_state_3_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_state_3_3_read, "grp_AddRoundKey_fu_536_state_3_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_0_address0, "grp_AddRoundKey_fu_536_RoundKey_0_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_0_ce0, "grp_AddRoundKey_fu_536_RoundKey_0_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_1_address0, "grp_AddRoundKey_fu_536_RoundKey_1_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_1_ce0, "grp_AddRoundKey_fu_536_RoundKey_1_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_2_address0, "grp_AddRoundKey_fu_536_RoundKey_2_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_2_ce0, "grp_AddRoundKey_fu_536_RoundKey_2_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_3_address0, "grp_AddRoundKey_fu_536_RoundKey_3_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_3_ce0, "grp_AddRoundKey_fu_536_RoundKey_3_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_4_address0, "grp_AddRoundKey_fu_536_RoundKey_4_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_4_ce0, "grp_AddRoundKey_fu_536_RoundKey_4_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_5_address0, "grp_AddRoundKey_fu_536_RoundKey_5_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_5_ce0, "grp_AddRoundKey_fu_536_RoundKey_5_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_6_address0, "grp_AddRoundKey_fu_536_RoundKey_6_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_6_ce0, "grp_AddRoundKey_fu_536_RoundKey_6_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_7_address0, "grp_AddRoundKey_fu_536_RoundKey_7_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_7_ce0, "grp_AddRoundKey_fu_536_RoundKey_7_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_8_address0, "grp_AddRoundKey_fu_536_RoundKey_8_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_8_ce0, "grp_AddRoundKey_fu_536_RoundKey_8_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_9_address0, "grp_AddRoundKey_fu_536_RoundKey_9_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_9_ce0, "grp_AddRoundKey_fu_536_RoundKey_9_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_10_address0, "grp_AddRoundKey_fu_536_RoundKey_10_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_10_ce0, "grp_AddRoundKey_fu_536_RoundKey_10_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_11_address0, "grp_AddRoundKey_fu_536_RoundKey_11_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_11_ce0, "grp_AddRoundKey_fu_536_RoundKey_11_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_12_address0, "grp_AddRoundKey_fu_536_RoundKey_12_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_12_ce0, "grp_AddRoundKey_fu_536_RoundKey_12_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_13_address0, "grp_AddRoundKey_fu_536_RoundKey_13_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_13_ce0, "grp_AddRoundKey_fu_536_RoundKey_13_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_14_address0, "grp_AddRoundKey_fu_536_RoundKey_14_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_14_ce0, "grp_AddRoundKey_fu_536_RoundKey_14_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_15_address0, "grp_AddRoundKey_fu_536_RoundKey_15_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_RoundKey_15_ce0, "grp_AddRoundKey_fu_536_RoundKey_15_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_0, "grp_AddRoundKey_fu_536_ap_return_0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_1, "grp_AddRoundKey_fu_536_ap_return_1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_2, "grp_AddRoundKey_fu_536_ap_return_2");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_3, "grp_AddRoundKey_fu_536_ap_return_3");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_4, "grp_AddRoundKey_fu_536_ap_return_4");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_5, "grp_AddRoundKey_fu_536_ap_return_5");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_6, "grp_AddRoundKey_fu_536_ap_return_6");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_7, "grp_AddRoundKey_fu_536_ap_return_7");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_8, "grp_AddRoundKey_fu_536_ap_return_8");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_9, "grp_AddRoundKey_fu_536_ap_return_9");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_10, "grp_AddRoundKey_fu_536_ap_return_10");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_11, "grp_AddRoundKey_fu_536_ap_return_11");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_12, "grp_AddRoundKey_fu_536_ap_return_12");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_13, "grp_AddRoundKey_fu_536_ap_return_13");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_14, "grp_AddRoundKey_fu_536_ap_return_14");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_return_15, "grp_AddRoundKey_fu_536_ap_return_15");
    sc_trace(mVcdFile, state_3_2_load_4_reg_306, "state_3_2_load_4_reg_306");
    sc_trace(mVcdFile, state_3_1_load_4_reg_316, "state_3_1_load_4_reg_316");
    sc_trace(mVcdFile, state_3_0_load_4_reg_326, "state_3_0_load_4_reg_326");
    sc_trace(mVcdFile, state_2_3_load_4_reg_336, "state_2_3_load_4_reg_336");
    sc_trace(mVcdFile, state_2_2_load_4_reg_346, "state_2_2_load_4_reg_346");
    sc_trace(mVcdFile, state_2_1_load_4_reg_356, "state_2_1_load_4_reg_356");
    sc_trace(mVcdFile, state_2_0_load_4_reg_366, "state_2_0_load_4_reg_366");
    sc_trace(mVcdFile, state_1_3_load_4_reg_376, "state_1_3_load_4_reg_376");
    sc_trace(mVcdFile, state_1_2_load_4_reg_386, "state_1_2_load_4_reg_386");
    sc_trace(mVcdFile, state_1_1_load_4_reg_396, "state_1_1_load_4_reg_396");
    sc_trace(mVcdFile, state_1_0_load_4_reg_406, "state_1_0_load_4_reg_406");
    sc_trace(mVcdFile, state_0_3_load_4_reg_416, "state_0_3_load_4_reg_416");
    sc_trace(mVcdFile, state_0_2_load_4_reg_426, "state_0_2_load_4_reg_426");
    sc_trace(mVcdFile, state_0_1_load_4_reg_436, "state_0_1_load_4_reg_436");
    sc_trace(mVcdFile, state_0_0_load_4_reg_446, "state_0_0_load_4_reg_446");
    sc_trace(mVcdFile, state_3_3_load_4_reg_456, "state_3_3_load_4_reg_456");
    sc_trace(mVcdFile, round_0_reg_466, "round_0_reg_466");
    sc_trace(mVcdFile, grp_MixColumns_fu_478_ap_start_reg, "grp_MixColumns_fu_478_ap_start_reg");
    sc_trace(mVcdFile, grp_SubBytes_fu_498_ap_start_reg, "grp_SubBytes_fu_498_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln422_fu_895_p2, "icmp_ln422_fu_895_p2");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_536_ap_start_reg, "grp_AddRoundKey_fu_536_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Cipher.hdltvin.dat");
    mHdltvoutHandle.open("Cipher.hdltvout.dat");
}

Cipher::~Cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_MixColumns_fu_478;
    delete grp_SubBytes_fu_498;
    delete grp_AddRoundKey_fu_536;
}

void Cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_fu_536_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)))) {
            grp_AddRoundKey_fu_536_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_536_ap_ready.read())) {
            grp_AddRoundKey_fu_536_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_MixColumns_fu_478_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1))) {
            grp_MixColumns_fu_478_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_MixColumns_fu_478_ap_ready.read())) {
            grp_MixColumns_fu_478_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_SubBytes_fu_498_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(icmp_ln422_fu_895_p2.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(icmp_ln422_fu_895_p2.read(), ap_const_lv1_1)))) {
            grp_SubBytes_fu_498_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_SubBytes_fu_498_ap_ready.read())) {
            grp_SubBytes_fu_498_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            round_0_reg_466 = round_reg_1256.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            round_0_reg_466 = ap_const_lv4_1;
        }
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
  esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        reg_799 = grp_SubBytes_fu_498_ap_return_0.read();
        reg_805 = grp_SubBytes_fu_498_ap_return_1.read();
        reg_811 = grp_SubBytes_fu_498_ap_return_2.read();
        reg_817 = grp_SubBytes_fu_498_ap_return_3.read();
        reg_823 = grp_SubBytes_fu_498_ap_return_4.read();
        reg_829 = grp_SubBytes_fu_498_ap_return_5.read();
        reg_835 = grp_SubBytes_fu_498_ap_return_6.read();
        reg_841 = grp_SubBytes_fu_498_ap_return_7.read();
        reg_847 = grp_SubBytes_fu_498_ap_return_8.read();
        reg_853 = grp_SubBytes_fu_498_ap_return_9.read();
        reg_859 = grp_SubBytes_fu_498_ap_return_10.read();
        reg_865 = grp_SubBytes_fu_498_ap_return_11.read();
        reg_871 = grp_SubBytes_fu_498_ap_return_12.read();
        reg_877 = grp_SubBytes_fu_498_ap_return_13.read();
        reg_883 = grp_SubBytes_fu_498_ap_return_14.read();
        reg_889 = grp_SubBytes_fu_498_ap_return_15.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        round_reg_1256 = round_fu_1002_p2.read();
        state_0_0_ret2_reg_1171 = grp_MixColumns_fu_478_ap_return_0.read();
        state_0_1_ret1_20_reg_1176 = grp_MixColumns_fu_478_ap_return_1.read();
        state_0_2_ret1_21_reg_1181 = grp_MixColumns_fu_478_ap_return_2.read();
        state_0_3_ret1_22_reg_1186 = grp_MixColumns_fu_478_ap_return_3.read();
        state_1_0_ret1_reg_1191 = grp_MixColumns_fu_478_ap_return_4.read();
        state_1_1_ret1_23_reg_1196 = grp_MixColumns_fu_478_ap_return_5.read();
        state_1_2_ret1_24_reg_1201 = grp_MixColumns_fu_478_ap_return_6.read();
        state_1_3_ret1_25_reg_1206 = grp_MixColumns_fu_478_ap_return_7.read();
        state_2_0_ret1_reg_1211 = grp_MixColumns_fu_478_ap_return_8.read();
        state_2_1_ret2_reg_1216 = grp_MixColumns_fu_478_ap_return_9.read();
        state_2_2_ret2_reg_1221 = grp_MixColumns_fu_478_ap_return_10.read();
        state_2_3_ret2_reg_1226 = grp_MixColumns_fu_478_ap_return_11.read();
        state_3_0_ret2_reg_1231 = grp_MixColumns_fu_478_ap_return_12.read();
        state_3_1_ret2_reg_1236 = grp_MixColumns_fu_478_ap_return_13.read();
        state_3_2_ret2_reg_1241 = grp_MixColumns_fu_478_ap_return_14.read();
        state_3_3_ret2_reg_1246 = grp_MixColumns_fu_478_ap_return_15.read();
        zext_ln427_reg_1251 = zext_ln427_fu_997_p1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
  esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())))) {
        state_0_0_load_4_reg_446 = grp_AddRoundKey_fu_536_ap_return_0.read();
        state_0_1_load_4_reg_436 = grp_AddRoundKey_fu_536_ap_return_1.read();
        state_0_2_load_4_reg_426 = grp_AddRoundKey_fu_536_ap_return_2.read();
        state_0_3_load_4_reg_416 = grp_AddRoundKey_fu_536_ap_return_3.read();
        state_1_0_load_4_reg_406 = grp_AddRoundKey_fu_536_ap_return_4.read();
        state_1_1_load_4_reg_396 = grp_AddRoundKey_fu_536_ap_return_5.read();
        state_1_2_load_4_reg_386 = grp_AddRoundKey_fu_536_ap_return_6.read();
        state_1_3_load_4_reg_376 = grp_AddRoundKey_fu_536_ap_return_7.read();
        state_2_0_load_4_reg_366 = grp_AddRoundKey_fu_536_ap_return_8.read();
        state_2_1_load_4_reg_356 = grp_AddRoundKey_fu_536_ap_return_9.read();
        state_2_2_load_4_reg_346 = grp_AddRoundKey_fu_536_ap_return_10.read();
        state_2_3_load_4_reg_336 = grp_AddRoundKey_fu_536_ap_return_11.read();
        state_3_0_load_4_reg_326 = grp_AddRoundKey_fu_536_ap_return_12.read();
        state_3_1_load_4_reg_316 = grp_AddRoundKey_fu_536_ap_return_13.read();
        state_3_2_load_4_reg_306 = grp_AddRoundKey_fu_536_ap_return_14.read();
        state_3_3_load_4_reg_456 = grp_AddRoundKey_fu_536_ap_return_15.read();
    }
}

void Cipher::thread_RoundKey_0_address0() {
    RoundKey_0_address0 = grp_AddRoundKey_fu_536_RoundKey_0_address0.read();
}

void Cipher::thread_RoundKey_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_0_ce0 = grp_AddRoundKey_fu_536_RoundKey_0_ce0.read();
    } else {
        RoundKey_0_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_10_address0() {
    RoundKey_10_address0 = grp_AddRoundKey_fu_536_RoundKey_10_address0.read();
}

void Cipher::thread_RoundKey_10_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_10_ce0 = grp_AddRoundKey_fu_536_RoundKey_10_ce0.read();
    } else {
        RoundKey_10_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_11_address0() {
    RoundKey_11_address0 = grp_AddRoundKey_fu_536_RoundKey_11_address0.read();
}

void Cipher::thread_RoundKey_11_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_11_ce0 = grp_AddRoundKey_fu_536_RoundKey_11_ce0.read();
    } else {
        RoundKey_11_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_12_address0() {
    RoundKey_12_address0 = grp_AddRoundKey_fu_536_RoundKey_12_address0.read();
}

void Cipher::thread_RoundKey_12_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_12_ce0 = grp_AddRoundKey_fu_536_RoundKey_12_ce0.read();
    } else {
        RoundKey_12_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_13_address0() {
    RoundKey_13_address0 = grp_AddRoundKey_fu_536_RoundKey_13_address0.read();
}

void Cipher::thread_RoundKey_13_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_13_ce0 = grp_AddRoundKey_fu_536_RoundKey_13_ce0.read();
    } else {
        RoundKey_13_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_14_address0() {
    RoundKey_14_address0 = grp_AddRoundKey_fu_536_RoundKey_14_address0.read();
}

void Cipher::thread_RoundKey_14_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_14_ce0 = grp_AddRoundKey_fu_536_RoundKey_14_ce0.read();
    } else {
        RoundKey_14_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_15_address0() {
    RoundKey_15_address0 = grp_AddRoundKey_fu_536_RoundKey_15_address0.read();
}

void Cipher::thread_RoundKey_15_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_15_ce0 = grp_AddRoundKey_fu_536_RoundKey_15_ce0.read();
    } else {
        RoundKey_15_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_1_address0() {
    RoundKey_1_address0 = grp_AddRoundKey_fu_536_RoundKey_1_address0.read();
}

void Cipher::thread_RoundKey_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_1_ce0 = grp_AddRoundKey_fu_536_RoundKey_1_ce0.read();
    } else {
        RoundKey_1_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_2_address0() {
    RoundKey_2_address0 = grp_AddRoundKey_fu_536_RoundKey_2_address0.read();
}

void Cipher::thread_RoundKey_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_2_ce0 = grp_AddRoundKey_fu_536_RoundKey_2_ce0.read();
    } else {
        RoundKey_2_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_3_address0() {
    RoundKey_3_address0 = grp_AddRoundKey_fu_536_RoundKey_3_address0.read();
}

void Cipher::thread_RoundKey_3_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_3_ce0 = grp_AddRoundKey_fu_536_RoundKey_3_ce0.read();
    } else {
        RoundKey_3_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_4_address0() {
    RoundKey_4_address0 = grp_AddRoundKey_fu_536_RoundKey_4_address0.read();
}

void Cipher::thread_RoundKey_4_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_4_ce0 = grp_AddRoundKey_fu_536_RoundKey_4_ce0.read();
    } else {
        RoundKey_4_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_5_address0() {
    RoundKey_5_address0 = grp_AddRoundKey_fu_536_RoundKey_5_address0.read();
}

void Cipher::thread_RoundKey_5_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_5_ce0 = grp_AddRoundKey_fu_536_RoundKey_5_ce0.read();
    } else {
        RoundKey_5_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_6_address0() {
    RoundKey_6_address0 = grp_AddRoundKey_fu_536_RoundKey_6_address0.read();
}

void Cipher::thread_RoundKey_6_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_6_ce0 = grp_AddRoundKey_fu_536_RoundKey_6_ce0.read();
    } else {
        RoundKey_6_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_7_address0() {
    RoundKey_7_address0 = grp_AddRoundKey_fu_536_RoundKey_7_address0.read();
}

void Cipher::thread_RoundKey_7_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_7_ce0 = grp_AddRoundKey_fu_536_RoundKey_7_ce0.read();
    } else {
        RoundKey_7_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_8_address0() {
    RoundKey_8_address0 = grp_AddRoundKey_fu_536_RoundKey_8_address0.read();
}

void Cipher::thread_RoundKey_8_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_8_ce0 = grp_AddRoundKey_fu_536_RoundKey_8_ce0.read();
    } else {
        RoundKey_8_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_9_address0() {
    RoundKey_9_address0 = grp_AddRoundKey_fu_536_RoundKey_9_address0.read();
}

void Cipher::thread_RoundKey_9_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_9_ce0 = grp_AddRoundKey_fu_536_RoundKey_9_ce0.read();
    } else {
        RoundKey_9_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Cipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Cipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Cipher::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Cipher::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Cipher::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Cipher::thread_ap_done() {
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cipher::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_ap_start() {
    grp_AddRoundKey_fu_536_ap_start = grp_AddRoundKey_fu_536_ap_start_reg.read();
}

void Cipher::thread_grp_AddRoundKey_fu_536_round() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_round = ap_const_lv6_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_round = zext_ln427_reg_1251.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_round = ap_const_lv6_0;
    } else {
        grp_AddRoundKey_fu_536_round = "XXXXXX";
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_0_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_0_0_read = reg_799.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_0_0_read = state_0_0_ret2_reg_1171.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_0_0_read = state_0_0_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_0_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_0_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_0_1_read = reg_829.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_0_1_read = state_0_1_ret1_20_reg_1176.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_0_1_read = state_0_1_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_0_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_0_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_0_2_read = reg_859.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_0_2_read = state_0_2_ret1_21_reg_1181.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_0_2_read = state_0_2_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_0_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_0_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_0_3_read = reg_889.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_0_3_read = state_0_3_ret1_22_reg_1186.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_0_3_read = state_0_3_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_0_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_1_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_1_0_read = reg_823.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_1_0_read = state_1_0_ret1_reg_1191.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_1_0_read = state_1_0_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_1_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_1_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_1_1_read = reg_853.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_1_1_read = state_1_1_ret1_23_reg_1196.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_1_1_read = state_1_1_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_1_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_1_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_1_2_read = reg_883.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_1_2_read = state_1_2_ret1_24_reg_1201.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_1_2_read = state_1_2_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_1_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_1_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_1_3_read = reg_817.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_1_3_read = state_1_3_ret1_25_reg_1206.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_1_3_read = state_1_3_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_1_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_2_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_2_0_read = reg_847.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_2_0_read = state_2_0_ret1_reg_1211.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_2_0_read = state_2_0_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_2_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_2_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_2_1_read = reg_877.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_2_1_read = state_2_1_ret2_reg_1216.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_2_1_read = state_2_1_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_2_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_2_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_2_2_read = reg_811.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_2_2_read = state_2_2_ret2_reg_1221.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_2_2_read = state_2_2_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_2_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_2_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_2_3_read = reg_841.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_2_3_read = state_2_3_ret2_reg_1226.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_2_3_read = state_2_3_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_2_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_3_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_3_0_read = reg_871.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_3_0_read = state_3_0_ret2_reg_1231.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_3_0_read = state_3_0_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_3_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_3_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_3_1_read = reg_805.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_3_1_read = state_3_1_ret2_reg_1236.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_3_1_read = state_3_1_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_3_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_3_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_3_2_read = reg_835.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_3_2_read = state_3_2_ret2_reg_1241.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_3_2_read = state_3_2_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_3_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_AddRoundKey_fu_536_state_3_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_AddRoundKey_fu_536_state_3_3_read = reg_865.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_AddRoundKey_fu_536_state_3_3_read = state_3_3_ret2_reg_1246.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_536_state_3_3_read = state_3_3_i.read();
    } else {
        grp_AddRoundKey_fu_536_state_3_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_grp_MixColumns_fu_478_ap_start() {
    grp_MixColumns_fu_478_ap_start = grp_MixColumns_fu_478_ap_start_reg.read();
}

void Cipher::thread_grp_SubBytes_fu_498_ap_start() {
    grp_SubBytes_fu_498_ap_start = grp_SubBytes_fu_498_ap_start_reg.read();
}

void Cipher::thread_icmp_ln422_fu_895_p2() {
    icmp_ln422_fu_895_p2 = (!round_0_reg_466.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(round_0_reg_466.read() == ap_const_lv4_A);
}

void Cipher::thread_round_fu_1002_p2() {
    round_fu_1002_p2 = (!round_0_reg_466.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_0_reg_466.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Cipher::thread_state_0_0_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_0_0_o = grp_MixColumns_fu_478_ap_return_0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_0_0_o = grp_SubBytes_fu_498_ap_return_0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_0_0_o = grp_AddRoundKey_fu_536_ap_return_0.read();
    } else {
        state_0_0_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_0_0_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_0_0_o_ap_vld = ap_const_logic_1;
    } else {
        state_0_0_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_0_1_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_0_1_o = grp_MixColumns_fu_478_ap_return_1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_0_1_o = grp_SubBytes_fu_498_ap_return_5.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_0_1_o = grp_AddRoundKey_fu_536_ap_return_1.read();
    } else {
        state_0_1_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_0_1_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_0_1_o_ap_vld = ap_const_logic_1;
    } else {
        state_0_1_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_0_2_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_0_2_o = grp_MixColumns_fu_478_ap_return_2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_0_2_o = grp_SubBytes_fu_498_ap_return_10.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_0_2_o = grp_AddRoundKey_fu_536_ap_return_2.read();
    } else {
        state_0_2_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_0_2_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_0_2_o_ap_vld = ap_const_logic_1;
    } else {
        state_0_2_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_0_3_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_0_3_o = grp_MixColumns_fu_478_ap_return_3.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_0_3_o = grp_SubBytes_fu_498_ap_return_15.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_0_3_o = grp_AddRoundKey_fu_536_ap_return_3.read();
    } else {
        state_0_3_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_0_3_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_0_3_o_ap_vld = ap_const_logic_1;
    } else {
        state_0_3_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_1_0_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_1_0_o = grp_MixColumns_fu_478_ap_return_4.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_1_0_o = grp_SubBytes_fu_498_ap_return_4.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_1_0_o = grp_AddRoundKey_fu_536_ap_return_4.read();
    } else {
        state_1_0_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_1_0_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_1_0_o_ap_vld = ap_const_logic_1;
    } else {
        state_1_0_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_1_1_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_1_1_o = grp_MixColumns_fu_478_ap_return_5.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_1_1_o = grp_SubBytes_fu_498_ap_return_9.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_1_1_o = grp_AddRoundKey_fu_536_ap_return_5.read();
    } else {
        state_1_1_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_1_1_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_1_1_o_ap_vld = ap_const_logic_1;
    } else {
        state_1_1_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_1_2_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_1_2_o = grp_MixColumns_fu_478_ap_return_6.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_1_2_o = grp_SubBytes_fu_498_ap_return_14.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_1_2_o = grp_AddRoundKey_fu_536_ap_return_6.read();
    } else {
        state_1_2_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_1_2_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_1_2_o_ap_vld = ap_const_logic_1;
    } else {
        state_1_2_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_1_3_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_1_3_o = grp_MixColumns_fu_478_ap_return_7.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_1_3_o = grp_SubBytes_fu_498_ap_return_3.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_1_3_o = grp_AddRoundKey_fu_536_ap_return_7.read();
    } else {
        state_1_3_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_1_3_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_1_3_o_ap_vld = ap_const_logic_1;
    } else {
        state_1_3_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_2_0_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_2_0_o = grp_MixColumns_fu_478_ap_return_8.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_2_0_o = grp_SubBytes_fu_498_ap_return_8.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_2_0_o = grp_AddRoundKey_fu_536_ap_return_8.read();
    } else {
        state_2_0_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_2_0_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_2_0_o_ap_vld = ap_const_logic_1;
    } else {
        state_2_0_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_2_1_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_2_1_o = grp_MixColumns_fu_478_ap_return_9.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_2_1_o = grp_SubBytes_fu_498_ap_return_13.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_2_1_o = grp_AddRoundKey_fu_536_ap_return_9.read();
    } else {
        state_2_1_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_2_1_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_2_1_o_ap_vld = ap_const_logic_1;
    } else {
        state_2_1_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_2_2_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_2_2_o = grp_MixColumns_fu_478_ap_return_10.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_2_2_o = grp_SubBytes_fu_498_ap_return_2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_2_2_o = grp_AddRoundKey_fu_536_ap_return_10.read();
    } else {
        state_2_2_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_2_2_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_2_2_o_ap_vld = ap_const_logic_1;
    } else {
        state_2_2_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_2_3_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_2_3_o = grp_MixColumns_fu_478_ap_return_11.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_2_3_o = grp_SubBytes_fu_498_ap_return_7.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_2_3_o = grp_AddRoundKey_fu_536_ap_return_11.read();
    } else {
        state_2_3_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_2_3_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_2_3_o_ap_vld = ap_const_logic_1;
    } else {
        state_2_3_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_3_0_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_3_0_o = grp_MixColumns_fu_478_ap_return_12.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_3_0_o = grp_SubBytes_fu_498_ap_return_12.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_3_0_o = grp_AddRoundKey_fu_536_ap_return_12.read();
    } else {
        state_3_0_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_3_0_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_3_0_o_ap_vld = ap_const_logic_1;
    } else {
        state_3_0_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_3_1_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_3_1_o = grp_MixColumns_fu_478_ap_return_13.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_3_1_o = grp_SubBytes_fu_498_ap_return_1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_3_1_o = grp_AddRoundKey_fu_536_ap_return_13.read();
    } else {
        state_3_1_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_3_1_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_3_1_o_ap_vld = ap_const_logic_1;
    } else {
        state_3_1_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_3_2_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_3_2_o = grp_MixColumns_fu_478_ap_return_14.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_3_2_o = grp_SubBytes_fu_498_ap_return_6.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_3_2_o = grp_AddRoundKey_fu_536_ap_return_14.read();
    } else {
        state_3_2_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_3_2_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_3_2_o_ap_vld = ap_const_logic_1;
    } else {
        state_3_2_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_3_3_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
        state_3_3_o = grp_MixColumns_fu_478_ap_return_15.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        state_3_3_o = grp_SubBytes_fu_498_ap_return_11.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_3_3_o = grp_AddRoundKey_fu_536_ap_return_15.read();
    } else {
        state_3_3_o =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_3_3_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        state_3_3_o_ap_vld = ap_const_logic_1;
    } else {
        state_3_3_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_zext_ln427_fu_997_p1() {
    zext_ln427_fu_997_p1 = esl_zext<6,4>(round_0_reg_466.read());
}

void Cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln422_fu_895_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_478_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(grp_SubBytes_fu_498_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_536_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void Cipher::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_0_0_i\" :  \"" << state_0_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_0_o\" :  \"" << state_0_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_0_o_ap_vld\" :  \"" << state_0_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_0_1_i\" :  \"" << state_0_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_1_o\" :  \"" << state_0_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_1_o_ap_vld\" :  \"" << state_0_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_0_2_i\" :  \"" << state_0_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_2_o\" :  \"" << state_0_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_2_o_ap_vld\" :  \"" << state_0_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_0_3_i\" :  \"" << state_0_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_3_o\" :  \"" << state_0_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_3_o_ap_vld\" :  \"" << state_0_3_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_1_0_i\" :  \"" << state_1_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_0_o\" :  \"" << state_1_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_0_o_ap_vld\" :  \"" << state_1_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_1_1_i\" :  \"" << state_1_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_1_o\" :  \"" << state_1_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_1_o_ap_vld\" :  \"" << state_1_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_1_2_i\" :  \"" << state_1_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_2_o\" :  \"" << state_1_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_2_o_ap_vld\" :  \"" << state_1_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_1_3_i\" :  \"" << state_1_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_3_o\" :  \"" << state_1_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_3_o_ap_vld\" :  \"" << state_1_3_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_2_0_i\" :  \"" << state_2_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_0_o\" :  \"" << state_2_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_0_o_ap_vld\" :  \"" << state_2_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_2_1_i\" :  \"" << state_2_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_1_o\" :  \"" << state_2_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_1_o_ap_vld\" :  \"" << state_2_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_2_2_i\" :  \"" << state_2_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_2_o\" :  \"" << state_2_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_2_o_ap_vld\" :  \"" << state_2_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_2_3_i\" :  \"" << state_2_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_3_o\" :  \"" << state_2_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_3_o_ap_vld\" :  \"" << state_2_3_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_3_0_i\" :  \"" << state_3_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_0_o\" :  \"" << state_3_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_0_o_ap_vld\" :  \"" << state_3_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_3_1_i\" :  \"" << state_3_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_1_o\" :  \"" << state_3_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_1_o_ap_vld\" :  \"" << state_3_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_3_2_i\" :  \"" << state_3_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_2_o\" :  \"" << state_3_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_2_o_ap_vld\" :  \"" << state_3_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_3_3_i\" :  \"" << state_3_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_3_o\" :  \"" << state_3_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_3_o_ap_vld\" :  \"" << state_3_3_o_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_0_address0\" :  \"" << RoundKey_0_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_0_ce0\" :  \"" << RoundKey_0_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_0_q0\" :  \"" << RoundKey_0_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_1_address0\" :  \"" << RoundKey_1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_1_ce0\" :  \"" << RoundKey_1_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_1_q0\" :  \"" << RoundKey_1_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_2_address0\" :  \"" << RoundKey_2_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_2_ce0\" :  \"" << RoundKey_2_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_2_q0\" :  \"" << RoundKey_2_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_3_address0\" :  \"" << RoundKey_3_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_3_ce0\" :  \"" << RoundKey_3_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_3_q0\" :  \"" << RoundKey_3_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_4_address0\" :  \"" << RoundKey_4_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_4_ce0\" :  \"" << RoundKey_4_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_4_q0\" :  \"" << RoundKey_4_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_5_address0\" :  \"" << RoundKey_5_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_5_ce0\" :  \"" << RoundKey_5_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_5_q0\" :  \"" << RoundKey_5_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_6_address0\" :  \"" << RoundKey_6_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_6_ce0\" :  \"" << RoundKey_6_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_6_q0\" :  \"" << RoundKey_6_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_7_address0\" :  \"" << RoundKey_7_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_7_ce0\" :  \"" << RoundKey_7_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_7_q0\" :  \"" << RoundKey_7_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_8_address0\" :  \"" << RoundKey_8_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_8_ce0\" :  \"" << RoundKey_8_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_8_q0\" :  \"" << RoundKey_8_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_9_address0\" :  \"" << RoundKey_9_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_9_ce0\" :  \"" << RoundKey_9_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_9_q0\" :  \"" << RoundKey_9_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_10_address0\" :  \"" << RoundKey_10_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_10_ce0\" :  \"" << RoundKey_10_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_10_q0\" :  \"" << RoundKey_10_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_11_address0\" :  \"" << RoundKey_11_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_11_ce0\" :  \"" << RoundKey_11_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_11_q0\" :  \"" << RoundKey_11_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_12_address0\" :  \"" << RoundKey_12_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_12_ce0\" :  \"" << RoundKey_12_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_12_q0\" :  \"" << RoundKey_12_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_13_address0\" :  \"" << RoundKey_13_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_13_ce0\" :  \"" << RoundKey_13_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_13_q0\" :  \"" << RoundKey_13_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_14_address0\" :  \"" << RoundKey_14_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_14_ce0\" :  \"" << RoundKey_14_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_14_q0\" :  \"" << RoundKey_14_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_15_address0\" :  \"" << RoundKey_15_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_15_ce0\" :  \"" << RoundKey_15_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_15_q0\" :  \"" << RoundKey_15_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

