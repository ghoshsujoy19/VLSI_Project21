// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Cipher::ap_ST_fsm_state1 = "1";
const sc_lv<5> Cipher::ap_ST_fsm_state2 = "10";
const sc_lv<5> Cipher::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<5> Cipher::ap_ST_fsm_state5 = "1000";
const sc_lv<5> Cipher::ap_ST_fsm_state6 = "10000";
const sc_lv<32> Cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Cipher::ap_const_boolean_1 = true;
const sc_lv<32> Cipher::ap_const_lv32_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_2 = "10";
const bool Cipher::ap_const_boolean_0 = false;
const sc_lv<1> Cipher::ap_const_lv1_0 = "0";
const sc_lv<32> Cipher::ap_const_lv32_3 = "11";
const sc_lv<1> Cipher::ap_const_lv1_1 = "1";
const sc_lv<4> Cipher::ap_const_lv4_1 = "1";
const sc_lv<64> Cipher::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> Cipher::ap_const_lv64_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_4 = "100";
const sc_lv<4> Cipher::ap_const_lv4_A = "1010";

Cipher::Cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new Cipher_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);
    sbox_U->address2(sbox_address2);
    sbox_U->ce2(sbox_ce2);
    sbox_U->q2(sbox_q2);
    sbox_U->address3(sbox_address3);
    sbox_U->ce3(sbox_ce3);
    sbox_U->q3(sbox_q3);
    sbox_U->address4(sbox_address4);
    sbox_U->ce4(sbox_ce4);
    sbox_U->q4(sbox_q4);
    sbox_U->address5(sbox_address5);
    sbox_U->ce5(sbox_ce5);
    sbox_U->q5(sbox_q5);
    sbox_U->address6(sbox_address6);
    sbox_U->ce6(sbox_ce6);
    sbox_U->q6(sbox_q6);
    sbox_U->address7(sbox_address7);
    sbox_U->ce7(sbox_ce7);
    sbox_U->q7(sbox_q7);
    sbox_U->address8(sbox_address8);
    sbox_U->ce8(sbox_ce8);
    sbox_U->q8(sbox_q8);
    sbox_U->address9(sbox_address9);
    sbox_U->ce9(sbox_ce9);
    sbox_U->q9(sbox_q9);
    sbox_U->address10(sbox_address10);
    sbox_U->ce10(sbox_ce10);
    sbox_U->q10(sbox_q10);
    sbox_U->address11(sbox_address11);
    sbox_U->ce11(sbox_ce11);
    sbox_U->q11(sbox_q11);
    sbox_U->address12(sbox_address12);
    sbox_U->ce12(sbox_ce12);
    sbox_U->q12(sbox_q12);
    sbox_U->address13(sbox_address13);
    sbox_U->ce13(sbox_ce13);
    sbox_U->q13(sbox_q13);
    sbox_U->address14(sbox_address14);
    sbox_U->ce14(sbox_ce14);
    sbox_U->q14(sbox_q14);
    sbox_U->address15(sbox_address15);
    sbox_U->ce15(sbox_ce15);
    sbox_U->q15(sbox_q15);
    call_ret_MixColumns_fu_1304 = new MixColumns("call_ret_MixColumns_fu_1304");
    call_ret_MixColumns_fu_1304->ap_ready(call_ret_MixColumns_fu_1304_ap_ready);
    call_ret_MixColumns_fu_1304->state_0_0_read(sbox_q0);
    call_ret_MixColumns_fu_1304->state_0_1_read(sbox_q5);
    call_ret_MixColumns_fu_1304->state_0_2_read(sbox_q10);
    call_ret_MixColumns_fu_1304->state_0_3_read(sbox_q15);
    call_ret_MixColumns_fu_1304->state_1_0_read(sbox_q1);
    call_ret_MixColumns_fu_1304->state_1_1_read(sbox_q6);
    call_ret_MixColumns_fu_1304->state_1_2_read(sbox_q11);
    call_ret_MixColumns_fu_1304->state_1_3_read(sbox_q12);
    call_ret_MixColumns_fu_1304->state_2_0_read(sbox_q2);
    call_ret_MixColumns_fu_1304->state_2_1_read(sbox_q7);
    call_ret_MixColumns_fu_1304->state_2_2_read(sbox_q8);
    call_ret_MixColumns_fu_1304->state_2_3_read(sbox_q13);
    call_ret_MixColumns_fu_1304->state_3_0_read(sbox_q3);
    call_ret_MixColumns_fu_1304->state_3_1_read(sbox_q4);
    call_ret_MixColumns_fu_1304->state_3_2_read(sbox_q9);
    call_ret_MixColumns_fu_1304->state_3_3_read(sbox_q14);
    call_ret_MixColumns_fu_1304->ap_return_0(call_ret_MixColumns_fu_1304_ap_return_0);
    call_ret_MixColumns_fu_1304->ap_return_1(call_ret_MixColumns_fu_1304_ap_return_1);
    call_ret_MixColumns_fu_1304->ap_return_2(call_ret_MixColumns_fu_1304_ap_return_2);
    call_ret_MixColumns_fu_1304->ap_return_3(call_ret_MixColumns_fu_1304_ap_return_3);
    call_ret_MixColumns_fu_1304->ap_return_4(call_ret_MixColumns_fu_1304_ap_return_4);
    call_ret_MixColumns_fu_1304->ap_return_5(call_ret_MixColumns_fu_1304_ap_return_5);
    call_ret_MixColumns_fu_1304->ap_return_6(call_ret_MixColumns_fu_1304_ap_return_6);
    call_ret_MixColumns_fu_1304->ap_return_7(call_ret_MixColumns_fu_1304_ap_return_7);
    call_ret_MixColumns_fu_1304->ap_return_8(call_ret_MixColumns_fu_1304_ap_return_8);
    call_ret_MixColumns_fu_1304->ap_return_9(call_ret_MixColumns_fu_1304_ap_return_9);
    call_ret_MixColumns_fu_1304->ap_return_10(call_ret_MixColumns_fu_1304_ap_return_10);
    call_ret_MixColumns_fu_1304->ap_return_11(call_ret_MixColumns_fu_1304_ap_return_11);
    call_ret_MixColumns_fu_1304->ap_return_12(call_ret_MixColumns_fu_1304_ap_return_12);
    call_ret_MixColumns_fu_1304->ap_return_13(call_ret_MixColumns_fu_1304_ap_return_13);
    call_ret_MixColumns_fu_1304->ap_return_14(call_ret_MixColumns_fu_1304_ap_return_14);
    call_ret_MixColumns_fu_1304->ap_return_15(call_ret_MixColumns_fu_1304_ap_return_15);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_10_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_10_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_11_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_11_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_12_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_12_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_13_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_13_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_14_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_14_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_15_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_15_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_3_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_3_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_4_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_4_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_5_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_5_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_6_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_6_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_7_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_7_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_8_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_8_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_RoundKey_9_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln252_fu_1522_p1 );

    SC_METHOD(thread_RoundKey_9_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln436_fu_1436_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4);
    sensitive << ( state_load_33_0_0_reg_1283 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( xor_ln252_32_fu_1612_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4);
    sensitive << ( state_load_33_0_1_reg_1273 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_36_fu_1636_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4);
    sensitive << ( state_load_33_0_2_reg_1263 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_40_fu_1660_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4);
    sensitive << ( state_load_33_0_3_reg_1253 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_44_fu_1684_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4);
    sensitive << ( state_load_33_1_0_reg_1243 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_33_fu_1618_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4);
    sensitive << ( state_load_33_1_1_reg_1233 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_37_fu_1642_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4);
    sensitive << ( state_load_33_1_2_reg_1223 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_41_fu_1666_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4);
    sensitive << ( state_load_33_1_3_reg_1213 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_45_fu_1690_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4);
    sensitive << ( state_load_33_2_0_reg_1203 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_34_fu_1624_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4);
    sensitive << ( state_load_33_2_1_reg_1193 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_38_fu_1648_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4);
    sensitive << ( state_load_33_2_2_reg_1183 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_42_fu_1672_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4);
    sensitive << ( state_load_33_2_3_reg_1173 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_46_fu_1696_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4);
    sensitive << ( state_load_33_3_0_reg_1163 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_35_fu_1630_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4);
    sensitive << ( state_load_33_3_1_reg_1153 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_39_fu_1654_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4);
    sensitive << ( state_load_33_3_2_reg_1143 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_43_fu_1678_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4);
    sensitive << ( state_load_33_3_3_reg_1133 );
    sensitive << ( icmp_ln436_reg_2060 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( xor_ln252_47_fu_1702_p2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_icmp_ln436_fu_1436_p2);
    sensitive << ( round_assign_reg_1293 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_round_fu_1542_p2);
    sensitive << ( round_assign_reg_1293 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_16_fu_1442_p1 );
    sensitive << ( zext_ln270_fu_1708_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_17_fu_1447_p1 );
    sensitive << ( zext_ln270_1_fu_1713_p1 );

    SC_METHOD(thread_sbox_address10);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_26_fu_1492_p1 );
    sensitive << ( zext_ln270_10_fu_1758_p1 );

    SC_METHOD(thread_sbox_address11);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_27_fu_1497_p1 );
    sensitive << ( zext_ln270_11_fu_1763_p1 );

    SC_METHOD(thread_sbox_address12);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_28_fu_1502_p1 );
    sensitive << ( zext_ln270_12_fu_1768_p1 );

    SC_METHOD(thread_sbox_address13);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_29_fu_1507_p1 );
    sensitive << ( zext_ln270_13_fu_1773_p1 );

    SC_METHOD(thread_sbox_address14);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_30_fu_1512_p1 );
    sensitive << ( zext_ln270_14_fu_1778_p1 );

    SC_METHOD(thread_sbox_address15);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_31_fu_1517_p1 );
    sensitive << ( zext_ln270_15_fu_1783_p1 );

    SC_METHOD(thread_sbox_address2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_18_fu_1452_p1 );
    sensitive << ( zext_ln270_2_fu_1718_p1 );

    SC_METHOD(thread_sbox_address3);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_19_fu_1457_p1 );
    sensitive << ( zext_ln270_3_fu_1723_p1 );

    SC_METHOD(thread_sbox_address4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_20_fu_1462_p1 );
    sensitive << ( zext_ln270_4_fu_1728_p1 );

    SC_METHOD(thread_sbox_address5);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_21_fu_1467_p1 );
    sensitive << ( zext_ln270_5_fu_1733_p1 );

    SC_METHOD(thread_sbox_address6);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_22_fu_1472_p1 );
    sensitive << ( zext_ln270_6_fu_1738_p1 );

    SC_METHOD(thread_sbox_address7);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_23_fu_1477_p1 );
    sensitive << ( zext_ln270_7_fu_1743_p1 );

    SC_METHOD(thread_sbox_address8);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_24_fu_1482_p1 );
    sensitive << ( zext_ln270_8_fu_1748_p1 );

    SC_METHOD(thread_sbox_address9);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln270_25_fu_1487_p1 );
    sensitive << ( zext_ln270_9_fu_1753_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce10);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce11);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce12);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce13);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce14);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce15);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce3);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce5);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce6);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce7);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce8);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sbox_ce9);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_0_0_o);
    sensitive << ( RoundKey_0_q0 );
    sensitive << ( sbox_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_0_0_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_0_1_o);
    sensitive << ( RoundKey_1_q0 );
    sensitive << ( sbox_q5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_0_1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_0_2_o);
    sensitive << ( RoundKey_2_q0 );
    sensitive << ( sbox_q10 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_0_2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_0_3_o);
    sensitive << ( RoundKey_3_q0 );
    sensitive << ( sbox_q15 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_0_3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_1_0_o);
    sensitive << ( RoundKey_4_q0 );
    sensitive << ( sbox_q1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_1_0_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_1_1_o);
    sensitive << ( RoundKey_5_q0 );
    sensitive << ( sbox_q6 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_1_1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_1_2_o);
    sensitive << ( RoundKey_6_q0 );
    sensitive << ( sbox_q11 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_1_2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_1_3_o);
    sensitive << ( RoundKey_7_q0 );
    sensitive << ( sbox_q12 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_1_3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_2_0_o);
    sensitive << ( RoundKey_8_q0 );
    sensitive << ( sbox_q2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_2_0_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_2_1_o);
    sensitive << ( RoundKey_9_q0 );
    sensitive << ( sbox_q7 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_2_1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_2_2_o);
    sensitive << ( RoundKey_10_q0 );
    sensitive << ( sbox_q8 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_2_2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_2_3_o);
    sensitive << ( RoundKey_11_q0 );
    sensitive << ( sbox_q13 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_2_3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_3_0_o);
    sensitive << ( RoundKey_12_q0 );
    sensitive << ( sbox_q3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_3_0_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_3_1_o);
    sensitive << ( RoundKey_13_q0 );
    sensitive << ( sbox_q4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_3_1_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_3_2_o);
    sensitive << ( RoundKey_14_q0 );
    sensitive << ( sbox_q9 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_3_2_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_3_3_o);
    sensitive << ( RoundKey_15_q0 );
    sensitive << ( sbox_q14 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_3_3_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_xor_ln252_10_fu_1400_p2);
    sensitive << ( state_2_2_i );
    sensitive << ( RoundKey_10_q0 );

    SC_METHOD(thread_xor_ln252_11_fu_1406_p2);
    sensitive << ( state_2_3_i );
    sensitive << ( RoundKey_11_q0 );

    SC_METHOD(thread_xor_ln252_12_fu_1412_p2);
    sensitive << ( state_3_0_i );
    sensitive << ( RoundKey_12_q0 );

    SC_METHOD(thread_xor_ln252_13_fu_1418_p2);
    sensitive << ( state_3_1_i );
    sensitive << ( RoundKey_13_q0 );

    SC_METHOD(thread_xor_ln252_14_fu_1424_p2);
    sensitive << ( state_3_2_i );
    sensitive << ( RoundKey_14_q0 );

    SC_METHOD(thread_xor_ln252_15_fu_1430_p2);
    sensitive << ( state_3_3_i );
    sensitive << ( RoundKey_15_q0 );

    SC_METHOD(thread_xor_ln252_1_fu_1346_p2);
    sensitive << ( state_0_1_i );
    sensitive << ( RoundKey_1_q0 );

    SC_METHOD(thread_xor_ln252_2_fu_1352_p2);
    sensitive << ( state_0_2_i );
    sensitive << ( RoundKey_2_q0 );

    SC_METHOD(thread_xor_ln252_32_fu_1612_p2);
    sensitive << ( RoundKey_0_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_0 );

    SC_METHOD(thread_xor_ln252_33_fu_1618_p2);
    sensitive << ( RoundKey_1_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_1 );

    SC_METHOD(thread_xor_ln252_34_fu_1624_p2);
    sensitive << ( RoundKey_2_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_2 );

    SC_METHOD(thread_xor_ln252_35_fu_1630_p2);
    sensitive << ( RoundKey_3_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_3 );

    SC_METHOD(thread_xor_ln252_36_fu_1636_p2);
    sensitive << ( RoundKey_4_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_4 );

    SC_METHOD(thread_xor_ln252_37_fu_1642_p2);
    sensitive << ( RoundKey_5_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_5 );

    SC_METHOD(thread_xor_ln252_38_fu_1648_p2);
    sensitive << ( RoundKey_6_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_6 );

    SC_METHOD(thread_xor_ln252_39_fu_1654_p2);
    sensitive << ( RoundKey_7_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_7 );

    SC_METHOD(thread_xor_ln252_3_fu_1358_p2);
    sensitive << ( state_0_3_i );
    sensitive << ( RoundKey_3_q0 );

    SC_METHOD(thread_xor_ln252_40_fu_1660_p2);
    sensitive << ( RoundKey_8_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_8 );

    SC_METHOD(thread_xor_ln252_41_fu_1666_p2);
    sensitive << ( RoundKey_9_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_9 );

    SC_METHOD(thread_xor_ln252_42_fu_1672_p2);
    sensitive << ( RoundKey_10_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_10 );

    SC_METHOD(thread_xor_ln252_43_fu_1678_p2);
    sensitive << ( RoundKey_11_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_11 );

    SC_METHOD(thread_xor_ln252_44_fu_1684_p2);
    sensitive << ( RoundKey_12_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_12 );

    SC_METHOD(thread_xor_ln252_45_fu_1690_p2);
    sensitive << ( RoundKey_13_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_13 );

    SC_METHOD(thread_xor_ln252_46_fu_1696_p2);
    sensitive << ( RoundKey_14_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_14 );

    SC_METHOD(thread_xor_ln252_47_fu_1702_p2);
    sensitive << ( RoundKey_15_q0 );
    sensitive << ( call_ret_MixColumns_fu_1304_ap_return_15 );

    SC_METHOD(thread_xor_ln252_4_fu_1364_p2);
    sensitive << ( state_1_0_i );
    sensitive << ( RoundKey_4_q0 );

    SC_METHOD(thread_xor_ln252_5_fu_1370_p2);
    sensitive << ( state_1_1_i );
    sensitive << ( RoundKey_5_q0 );

    SC_METHOD(thread_xor_ln252_6_fu_1376_p2);
    sensitive << ( state_1_2_i );
    sensitive << ( RoundKey_6_q0 );

    SC_METHOD(thread_xor_ln252_7_fu_1382_p2);
    sensitive << ( state_1_3_i );
    sensitive << ( RoundKey_7_q0 );

    SC_METHOD(thread_xor_ln252_8_fu_1388_p2);
    sensitive << ( state_2_0_i );
    sensitive << ( RoundKey_8_q0 );

    SC_METHOD(thread_xor_ln252_9_fu_1394_p2);
    sensitive << ( state_2_1_i );
    sensitive << ( RoundKey_9_q0 );

    SC_METHOD(thread_xor_ln252_fu_1340_p2);
    sensitive << ( state_0_0_i );
    sensitive << ( RoundKey_0_q0 );

    SC_METHOD(thread_zext_ln252_fu_1522_p1);
    sensitive << ( round_assign_reg_1293 );

    SC_METHOD(thread_zext_ln270_10_fu_1758_p1);
    sensitive << ( state_load_33_2_2_reg_1183 );

    SC_METHOD(thread_zext_ln270_11_fu_1763_p1);
    sensitive << ( state_load_33_2_3_reg_1173 );

    SC_METHOD(thread_zext_ln270_12_fu_1768_p1);
    sensitive << ( state_load_33_3_0_reg_1163 );

    SC_METHOD(thread_zext_ln270_13_fu_1773_p1);
    sensitive << ( state_load_33_3_1_reg_1153 );

    SC_METHOD(thread_zext_ln270_14_fu_1778_p1);
    sensitive << ( state_load_33_3_2_reg_1143 );

    SC_METHOD(thread_zext_ln270_15_fu_1783_p1);
    sensitive << ( state_load_33_3_3_reg_1133 );

    SC_METHOD(thread_zext_ln270_16_fu_1442_p1);
    sensitive << ( ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4 );

    SC_METHOD(thread_zext_ln270_17_fu_1447_p1);
    sensitive << ( ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4 );

    SC_METHOD(thread_zext_ln270_18_fu_1452_p1);
    sensitive << ( ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4 );

    SC_METHOD(thread_zext_ln270_19_fu_1457_p1);
    sensitive << ( ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4 );

    SC_METHOD(thread_zext_ln270_1_fu_1713_p1);
    sensitive << ( state_load_33_0_1_reg_1273 );

    SC_METHOD(thread_zext_ln270_20_fu_1462_p1);
    sensitive << ( ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4 );

    SC_METHOD(thread_zext_ln270_21_fu_1467_p1);
    sensitive << ( ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4 );

    SC_METHOD(thread_zext_ln270_22_fu_1472_p1);
    sensitive << ( ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4 );

    SC_METHOD(thread_zext_ln270_23_fu_1477_p1);
    sensitive << ( ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4 );

    SC_METHOD(thread_zext_ln270_24_fu_1482_p1);
    sensitive << ( ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4 );

    SC_METHOD(thread_zext_ln270_25_fu_1487_p1);
    sensitive << ( ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4 );

    SC_METHOD(thread_zext_ln270_26_fu_1492_p1);
    sensitive << ( ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4 );

    SC_METHOD(thread_zext_ln270_27_fu_1497_p1);
    sensitive << ( ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4 );

    SC_METHOD(thread_zext_ln270_28_fu_1502_p1);
    sensitive << ( ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4 );

    SC_METHOD(thread_zext_ln270_29_fu_1507_p1);
    sensitive << ( ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4 );

    SC_METHOD(thread_zext_ln270_2_fu_1718_p1);
    sensitive << ( state_load_33_0_2_reg_1263 );

    SC_METHOD(thread_zext_ln270_30_fu_1512_p1);
    sensitive << ( ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4 );

    SC_METHOD(thread_zext_ln270_31_fu_1517_p1);
    sensitive << ( ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4 );

    SC_METHOD(thread_zext_ln270_3_fu_1723_p1);
    sensitive << ( state_load_33_0_3_reg_1253 );

    SC_METHOD(thread_zext_ln270_4_fu_1728_p1);
    sensitive << ( state_load_33_1_0_reg_1243 );

    SC_METHOD(thread_zext_ln270_5_fu_1733_p1);
    sensitive << ( state_load_33_1_1_reg_1233 );

    SC_METHOD(thread_zext_ln270_6_fu_1738_p1);
    sensitive << ( state_load_33_1_2_reg_1223 );

    SC_METHOD(thread_zext_ln270_7_fu_1743_p1);
    sensitive << ( state_load_33_1_3_reg_1213 );

    SC_METHOD(thread_zext_ln270_8_fu_1748_p1);
    sensitive << ( state_load_33_2_0_reg_1203 );

    SC_METHOD(thread_zext_ln270_9_fu_1753_p1);
    sensitive << ( state_load_33_2_1_reg_1193 );

    SC_METHOD(thread_zext_ln270_fu_1708_p1);
    sensitive << ( state_load_33_0_0_reg_1283 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln436_fu_1436_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_0_0_i, "(port)state_0_0_i");
    sc_trace(mVcdFile, state_0_0_o, "(port)state_0_0_o");
    sc_trace(mVcdFile, state_0_0_o_ap_vld, "(port)state_0_0_o_ap_vld");
    sc_trace(mVcdFile, state_0_1_i, "(port)state_0_1_i");
    sc_trace(mVcdFile, state_0_1_o, "(port)state_0_1_o");
    sc_trace(mVcdFile, state_0_1_o_ap_vld, "(port)state_0_1_o_ap_vld");
    sc_trace(mVcdFile, state_0_2_i, "(port)state_0_2_i");
    sc_trace(mVcdFile, state_0_2_o, "(port)state_0_2_o");
    sc_trace(mVcdFile, state_0_2_o_ap_vld, "(port)state_0_2_o_ap_vld");
    sc_trace(mVcdFile, state_0_3_i, "(port)state_0_3_i");
    sc_trace(mVcdFile, state_0_3_o, "(port)state_0_3_o");
    sc_trace(mVcdFile, state_0_3_o_ap_vld, "(port)state_0_3_o_ap_vld");
    sc_trace(mVcdFile, state_1_0_i, "(port)state_1_0_i");
    sc_trace(mVcdFile, state_1_0_o, "(port)state_1_0_o");
    sc_trace(mVcdFile, state_1_0_o_ap_vld, "(port)state_1_0_o_ap_vld");
    sc_trace(mVcdFile, state_1_1_i, "(port)state_1_1_i");
    sc_trace(mVcdFile, state_1_1_o, "(port)state_1_1_o");
    sc_trace(mVcdFile, state_1_1_o_ap_vld, "(port)state_1_1_o_ap_vld");
    sc_trace(mVcdFile, state_1_2_i, "(port)state_1_2_i");
    sc_trace(mVcdFile, state_1_2_o, "(port)state_1_2_o");
    sc_trace(mVcdFile, state_1_2_o_ap_vld, "(port)state_1_2_o_ap_vld");
    sc_trace(mVcdFile, state_1_3_i, "(port)state_1_3_i");
    sc_trace(mVcdFile, state_1_3_o, "(port)state_1_3_o");
    sc_trace(mVcdFile, state_1_3_o_ap_vld, "(port)state_1_3_o_ap_vld");
    sc_trace(mVcdFile, state_2_0_i, "(port)state_2_0_i");
    sc_trace(mVcdFile, state_2_0_o, "(port)state_2_0_o");
    sc_trace(mVcdFile, state_2_0_o_ap_vld, "(port)state_2_0_o_ap_vld");
    sc_trace(mVcdFile, state_2_1_i, "(port)state_2_1_i");
    sc_trace(mVcdFile, state_2_1_o, "(port)state_2_1_o");
    sc_trace(mVcdFile, state_2_1_o_ap_vld, "(port)state_2_1_o_ap_vld");
    sc_trace(mVcdFile, state_2_2_i, "(port)state_2_2_i");
    sc_trace(mVcdFile, state_2_2_o, "(port)state_2_2_o");
    sc_trace(mVcdFile, state_2_2_o_ap_vld, "(port)state_2_2_o_ap_vld");
    sc_trace(mVcdFile, state_2_3_i, "(port)state_2_3_i");
    sc_trace(mVcdFile, state_2_3_o, "(port)state_2_3_o");
    sc_trace(mVcdFile, state_2_3_o_ap_vld, "(port)state_2_3_o_ap_vld");
    sc_trace(mVcdFile, state_3_0_i, "(port)state_3_0_i");
    sc_trace(mVcdFile, state_3_0_o, "(port)state_3_0_o");
    sc_trace(mVcdFile, state_3_0_o_ap_vld, "(port)state_3_0_o_ap_vld");
    sc_trace(mVcdFile, state_3_1_i, "(port)state_3_1_i");
    sc_trace(mVcdFile, state_3_1_o, "(port)state_3_1_o");
    sc_trace(mVcdFile, state_3_1_o_ap_vld, "(port)state_3_1_o_ap_vld");
    sc_trace(mVcdFile, state_3_2_i, "(port)state_3_2_i");
    sc_trace(mVcdFile, state_3_2_o, "(port)state_3_2_o");
    sc_trace(mVcdFile, state_3_2_o_ap_vld, "(port)state_3_2_o_ap_vld");
    sc_trace(mVcdFile, state_3_3_i, "(port)state_3_3_i");
    sc_trace(mVcdFile, state_3_3_o, "(port)state_3_3_o");
    sc_trace(mVcdFile, state_3_3_o_ap_vld, "(port)state_3_3_o_ap_vld");
    sc_trace(mVcdFile, RoundKey_0_address0, "(port)RoundKey_0_address0");
    sc_trace(mVcdFile, RoundKey_0_ce0, "(port)RoundKey_0_ce0");
    sc_trace(mVcdFile, RoundKey_0_q0, "(port)RoundKey_0_q0");
    sc_trace(mVcdFile, RoundKey_1_address0, "(port)RoundKey_1_address0");
    sc_trace(mVcdFile, RoundKey_1_ce0, "(port)RoundKey_1_ce0");
    sc_trace(mVcdFile, RoundKey_1_q0, "(port)RoundKey_1_q0");
    sc_trace(mVcdFile, RoundKey_2_address0, "(port)RoundKey_2_address0");
    sc_trace(mVcdFile, RoundKey_2_ce0, "(port)RoundKey_2_ce0");
    sc_trace(mVcdFile, RoundKey_2_q0, "(port)RoundKey_2_q0");
    sc_trace(mVcdFile, RoundKey_3_address0, "(port)RoundKey_3_address0");
    sc_trace(mVcdFile, RoundKey_3_ce0, "(port)RoundKey_3_ce0");
    sc_trace(mVcdFile, RoundKey_3_q0, "(port)RoundKey_3_q0");
    sc_trace(mVcdFile, RoundKey_4_address0, "(port)RoundKey_4_address0");
    sc_trace(mVcdFile, RoundKey_4_ce0, "(port)RoundKey_4_ce0");
    sc_trace(mVcdFile, RoundKey_4_q0, "(port)RoundKey_4_q0");
    sc_trace(mVcdFile, RoundKey_5_address0, "(port)RoundKey_5_address0");
    sc_trace(mVcdFile, RoundKey_5_ce0, "(port)RoundKey_5_ce0");
    sc_trace(mVcdFile, RoundKey_5_q0, "(port)RoundKey_5_q0");
    sc_trace(mVcdFile, RoundKey_6_address0, "(port)RoundKey_6_address0");
    sc_trace(mVcdFile, RoundKey_6_ce0, "(port)RoundKey_6_ce0");
    sc_trace(mVcdFile, RoundKey_6_q0, "(port)RoundKey_6_q0");
    sc_trace(mVcdFile, RoundKey_7_address0, "(port)RoundKey_7_address0");
    sc_trace(mVcdFile, RoundKey_7_ce0, "(port)RoundKey_7_ce0");
    sc_trace(mVcdFile, RoundKey_7_q0, "(port)RoundKey_7_q0");
    sc_trace(mVcdFile, RoundKey_8_address0, "(port)RoundKey_8_address0");
    sc_trace(mVcdFile, RoundKey_8_ce0, "(port)RoundKey_8_ce0");
    sc_trace(mVcdFile, RoundKey_8_q0, "(port)RoundKey_8_q0");
    sc_trace(mVcdFile, RoundKey_9_address0, "(port)RoundKey_9_address0");
    sc_trace(mVcdFile, RoundKey_9_ce0, "(port)RoundKey_9_ce0");
    sc_trace(mVcdFile, RoundKey_9_q0, "(port)RoundKey_9_q0");
    sc_trace(mVcdFile, RoundKey_10_address0, "(port)RoundKey_10_address0");
    sc_trace(mVcdFile, RoundKey_10_ce0, "(port)RoundKey_10_ce0");
    sc_trace(mVcdFile, RoundKey_10_q0, "(port)RoundKey_10_q0");
    sc_trace(mVcdFile, RoundKey_11_address0, "(port)RoundKey_11_address0");
    sc_trace(mVcdFile, RoundKey_11_ce0, "(port)RoundKey_11_ce0");
    sc_trace(mVcdFile, RoundKey_11_q0, "(port)RoundKey_11_q0");
    sc_trace(mVcdFile, RoundKey_12_address0, "(port)RoundKey_12_address0");
    sc_trace(mVcdFile, RoundKey_12_ce0, "(port)RoundKey_12_ce0");
    sc_trace(mVcdFile, RoundKey_12_q0, "(port)RoundKey_12_q0");
    sc_trace(mVcdFile, RoundKey_13_address0, "(port)RoundKey_13_address0");
    sc_trace(mVcdFile, RoundKey_13_ce0, "(port)RoundKey_13_ce0");
    sc_trace(mVcdFile, RoundKey_13_q0, "(port)RoundKey_13_q0");
    sc_trace(mVcdFile, RoundKey_14_address0, "(port)RoundKey_14_address0");
    sc_trace(mVcdFile, RoundKey_14_ce0, "(port)RoundKey_14_ce0");
    sc_trace(mVcdFile, RoundKey_14_q0, "(port)RoundKey_14_q0");
    sc_trace(mVcdFile, RoundKey_15_address0, "(port)RoundKey_15_address0");
    sc_trace(mVcdFile, RoundKey_15_ce0, "(port)RoundKey_15_ce0");
    sc_trace(mVcdFile, RoundKey_15_q0, "(port)RoundKey_15_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, sbox_address2, "sbox_address2");
    sc_trace(mVcdFile, sbox_ce2, "sbox_ce2");
    sc_trace(mVcdFile, sbox_q2, "sbox_q2");
    sc_trace(mVcdFile, sbox_address3, "sbox_address3");
    sc_trace(mVcdFile, sbox_ce3, "sbox_ce3");
    sc_trace(mVcdFile, sbox_q3, "sbox_q3");
    sc_trace(mVcdFile, sbox_address4, "sbox_address4");
    sc_trace(mVcdFile, sbox_ce4, "sbox_ce4");
    sc_trace(mVcdFile, sbox_q4, "sbox_q4");
    sc_trace(mVcdFile, sbox_address5, "sbox_address5");
    sc_trace(mVcdFile, sbox_ce5, "sbox_ce5");
    sc_trace(mVcdFile, sbox_q5, "sbox_q5");
    sc_trace(mVcdFile, sbox_address6, "sbox_address6");
    sc_trace(mVcdFile, sbox_ce6, "sbox_ce6");
    sc_trace(mVcdFile, sbox_q6, "sbox_q6");
    sc_trace(mVcdFile, sbox_address7, "sbox_address7");
    sc_trace(mVcdFile, sbox_ce7, "sbox_ce7");
    sc_trace(mVcdFile, sbox_q7, "sbox_q7");
    sc_trace(mVcdFile, sbox_address8, "sbox_address8");
    sc_trace(mVcdFile, sbox_ce8, "sbox_ce8");
    sc_trace(mVcdFile, sbox_q8, "sbox_q8");
    sc_trace(mVcdFile, sbox_address9, "sbox_address9");
    sc_trace(mVcdFile, sbox_ce9, "sbox_ce9");
    sc_trace(mVcdFile, sbox_q9, "sbox_q9");
    sc_trace(mVcdFile, sbox_address10, "sbox_address10");
    sc_trace(mVcdFile, sbox_ce10, "sbox_ce10");
    sc_trace(mVcdFile, sbox_q10, "sbox_q10");
    sc_trace(mVcdFile, sbox_address11, "sbox_address11");
    sc_trace(mVcdFile, sbox_ce11, "sbox_ce11");
    sc_trace(mVcdFile, sbox_q11, "sbox_q11");
    sc_trace(mVcdFile, sbox_address12, "sbox_address12");
    sc_trace(mVcdFile, sbox_ce12, "sbox_ce12");
    sc_trace(mVcdFile, sbox_q12, "sbox_q12");
    sc_trace(mVcdFile, sbox_address13, "sbox_address13");
    sc_trace(mVcdFile, sbox_ce13, "sbox_ce13");
    sc_trace(mVcdFile, sbox_q13, "sbox_q13");
    sc_trace(mVcdFile, sbox_address14, "sbox_address14");
    sc_trace(mVcdFile, sbox_ce14, "sbox_ce14");
    sc_trace(mVcdFile, sbox_q14, "sbox_q14");
    sc_trace(mVcdFile, sbox_address15, "sbox_address15");
    sc_trace(mVcdFile, sbox_ce15, "sbox_ce15");
    sc_trace(mVcdFile, sbox_q15, "sbox_q15");
    sc_trace(mVcdFile, state_load_33_3_3_reg_1133, "state_load_33_3_3_reg_1133");
    sc_trace(mVcdFile, state_load_33_3_2_reg_1143, "state_load_33_3_2_reg_1143");
    sc_trace(mVcdFile, state_load_33_3_1_reg_1153, "state_load_33_3_1_reg_1153");
    sc_trace(mVcdFile, state_load_33_3_0_reg_1163, "state_load_33_3_0_reg_1163");
    sc_trace(mVcdFile, state_load_33_2_3_reg_1173, "state_load_33_2_3_reg_1173");
    sc_trace(mVcdFile, state_load_33_2_2_reg_1183, "state_load_33_2_2_reg_1183");
    sc_trace(mVcdFile, state_load_33_2_1_reg_1193, "state_load_33_2_1_reg_1193");
    sc_trace(mVcdFile, state_load_33_2_0_reg_1203, "state_load_33_2_0_reg_1203");
    sc_trace(mVcdFile, state_load_33_1_3_reg_1213, "state_load_33_1_3_reg_1213");
    sc_trace(mVcdFile, state_load_33_1_2_reg_1223, "state_load_33_1_2_reg_1223");
    sc_trace(mVcdFile, state_load_33_1_1_reg_1233, "state_load_33_1_1_reg_1233");
    sc_trace(mVcdFile, state_load_33_1_0_reg_1243, "state_load_33_1_0_reg_1243");
    sc_trace(mVcdFile, state_load_33_0_3_reg_1253, "state_load_33_0_3_reg_1253");
    sc_trace(mVcdFile, state_load_33_0_2_reg_1263, "state_load_33_0_2_reg_1263");
    sc_trace(mVcdFile, state_load_33_0_1_reg_1273, "state_load_33_0_1_reg_1273");
    sc_trace(mVcdFile, state_load_33_0_0_reg_1283, "state_load_33_0_0_reg_1283");
    sc_trace(mVcdFile, round_assign_reg_1293, "round_assign_reg_1293");
    sc_trace(mVcdFile, xor_ln252_fu_1340_p2, "xor_ln252_fu_1340_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, xor_ln252_1_fu_1346_p2, "xor_ln252_1_fu_1346_p2");
    sc_trace(mVcdFile, xor_ln252_2_fu_1352_p2, "xor_ln252_2_fu_1352_p2");
    sc_trace(mVcdFile, xor_ln252_3_fu_1358_p2, "xor_ln252_3_fu_1358_p2");
    sc_trace(mVcdFile, xor_ln252_4_fu_1364_p2, "xor_ln252_4_fu_1364_p2");
    sc_trace(mVcdFile, xor_ln252_5_fu_1370_p2, "xor_ln252_5_fu_1370_p2");
    sc_trace(mVcdFile, xor_ln252_6_fu_1376_p2, "xor_ln252_6_fu_1376_p2");
    sc_trace(mVcdFile, xor_ln252_7_fu_1382_p2, "xor_ln252_7_fu_1382_p2");
    sc_trace(mVcdFile, xor_ln252_8_fu_1388_p2, "xor_ln252_8_fu_1388_p2");
    sc_trace(mVcdFile, xor_ln252_9_fu_1394_p2, "xor_ln252_9_fu_1394_p2");
    sc_trace(mVcdFile, xor_ln252_10_fu_1400_p2, "xor_ln252_10_fu_1400_p2");
    sc_trace(mVcdFile, xor_ln252_11_fu_1406_p2, "xor_ln252_11_fu_1406_p2");
    sc_trace(mVcdFile, xor_ln252_12_fu_1412_p2, "xor_ln252_12_fu_1412_p2");
    sc_trace(mVcdFile, xor_ln252_13_fu_1418_p2, "xor_ln252_13_fu_1418_p2");
    sc_trace(mVcdFile, xor_ln252_14_fu_1424_p2, "xor_ln252_14_fu_1424_p2");
    sc_trace(mVcdFile, xor_ln252_15_fu_1430_p2, "xor_ln252_15_fu_1430_p2");
    sc_trace(mVcdFile, icmp_ln436_fu_1436_p2, "icmp_ln436_fu_1436_p2");
    sc_trace(mVcdFile, icmp_ln436_reg_2060, "icmp_ln436_reg_2060");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, round_fu_1542_p2, "round_fu_1542_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, xor_ln252_32_fu_1612_p2, "xor_ln252_32_fu_1612_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, xor_ln252_33_fu_1618_p2, "xor_ln252_33_fu_1618_p2");
    sc_trace(mVcdFile, xor_ln252_34_fu_1624_p2, "xor_ln252_34_fu_1624_p2");
    sc_trace(mVcdFile, xor_ln252_35_fu_1630_p2, "xor_ln252_35_fu_1630_p2");
    sc_trace(mVcdFile, xor_ln252_36_fu_1636_p2, "xor_ln252_36_fu_1636_p2");
    sc_trace(mVcdFile, xor_ln252_37_fu_1642_p2, "xor_ln252_37_fu_1642_p2");
    sc_trace(mVcdFile, xor_ln252_38_fu_1648_p2, "xor_ln252_38_fu_1648_p2");
    sc_trace(mVcdFile, xor_ln252_39_fu_1654_p2, "xor_ln252_39_fu_1654_p2");
    sc_trace(mVcdFile, xor_ln252_40_fu_1660_p2, "xor_ln252_40_fu_1660_p2");
    sc_trace(mVcdFile, xor_ln252_41_fu_1666_p2, "xor_ln252_41_fu_1666_p2");
    sc_trace(mVcdFile, xor_ln252_42_fu_1672_p2, "xor_ln252_42_fu_1672_p2");
    sc_trace(mVcdFile, xor_ln252_43_fu_1678_p2, "xor_ln252_43_fu_1678_p2");
    sc_trace(mVcdFile, xor_ln252_44_fu_1684_p2, "xor_ln252_44_fu_1684_p2");
    sc_trace(mVcdFile, xor_ln252_45_fu_1690_p2, "xor_ln252_45_fu_1690_p2");
    sc_trace(mVcdFile, xor_ln252_46_fu_1696_p2, "xor_ln252_46_fu_1696_p2");
    sc_trace(mVcdFile, xor_ln252_47_fu_1702_p2, "xor_ln252_47_fu_1702_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_ready, "call_ret_MixColumns_fu_1304_ap_ready");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_0, "call_ret_MixColumns_fu_1304_ap_return_0");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_1, "call_ret_MixColumns_fu_1304_ap_return_1");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_2, "call_ret_MixColumns_fu_1304_ap_return_2");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_3, "call_ret_MixColumns_fu_1304_ap_return_3");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_4, "call_ret_MixColumns_fu_1304_ap_return_4");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_5, "call_ret_MixColumns_fu_1304_ap_return_5");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_6, "call_ret_MixColumns_fu_1304_ap_return_6");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_7, "call_ret_MixColumns_fu_1304_ap_return_7");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_8, "call_ret_MixColumns_fu_1304_ap_return_8");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_9, "call_ret_MixColumns_fu_1304_ap_return_9");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_10, "call_ret_MixColumns_fu_1304_ap_return_10");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_11, "call_ret_MixColumns_fu_1304_ap_return_11");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_12, "call_ret_MixColumns_fu_1304_ap_return_12");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_13, "call_ret_MixColumns_fu_1304_ap_return_13");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_14, "call_ret_MixColumns_fu_1304_ap_return_14");
    sc_trace(mVcdFile, call_ret_MixColumns_fu_1304_ap_return_15, "call_ret_MixColumns_fu_1304_ap_return_15");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4, "ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4, "ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4, "ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4, "ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4, "ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4, "ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4, "ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4, "ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4, "ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4, "ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4, "ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4, "ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4, "ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4, "ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4, "ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4");
    sc_trace(mVcdFile, ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4, "ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4");
    sc_trace(mVcdFile, zext_ln270_16_fu_1442_p1, "zext_ln270_16_fu_1442_p1");
    sc_trace(mVcdFile, zext_ln270_17_fu_1447_p1, "zext_ln270_17_fu_1447_p1");
    sc_trace(mVcdFile, zext_ln270_18_fu_1452_p1, "zext_ln270_18_fu_1452_p1");
    sc_trace(mVcdFile, zext_ln270_19_fu_1457_p1, "zext_ln270_19_fu_1457_p1");
    sc_trace(mVcdFile, zext_ln270_20_fu_1462_p1, "zext_ln270_20_fu_1462_p1");
    sc_trace(mVcdFile, zext_ln270_21_fu_1467_p1, "zext_ln270_21_fu_1467_p1");
    sc_trace(mVcdFile, zext_ln270_22_fu_1472_p1, "zext_ln270_22_fu_1472_p1");
    sc_trace(mVcdFile, zext_ln270_23_fu_1477_p1, "zext_ln270_23_fu_1477_p1");
    sc_trace(mVcdFile, zext_ln270_24_fu_1482_p1, "zext_ln270_24_fu_1482_p1");
    sc_trace(mVcdFile, zext_ln270_25_fu_1487_p1, "zext_ln270_25_fu_1487_p1");
    sc_trace(mVcdFile, zext_ln270_26_fu_1492_p1, "zext_ln270_26_fu_1492_p1");
    sc_trace(mVcdFile, zext_ln270_27_fu_1497_p1, "zext_ln270_27_fu_1497_p1");
    sc_trace(mVcdFile, zext_ln270_28_fu_1502_p1, "zext_ln270_28_fu_1502_p1");
    sc_trace(mVcdFile, zext_ln270_29_fu_1507_p1, "zext_ln270_29_fu_1507_p1");
    sc_trace(mVcdFile, zext_ln270_30_fu_1512_p1, "zext_ln270_30_fu_1512_p1");
    sc_trace(mVcdFile, zext_ln270_31_fu_1517_p1, "zext_ln270_31_fu_1517_p1");
    sc_trace(mVcdFile, zext_ln252_fu_1522_p1, "zext_ln252_fu_1522_p1");
    sc_trace(mVcdFile, zext_ln270_fu_1708_p1, "zext_ln270_fu_1708_p1");
    sc_trace(mVcdFile, zext_ln270_1_fu_1713_p1, "zext_ln270_1_fu_1713_p1");
    sc_trace(mVcdFile, zext_ln270_2_fu_1718_p1, "zext_ln270_2_fu_1718_p1");
    sc_trace(mVcdFile, zext_ln270_3_fu_1723_p1, "zext_ln270_3_fu_1723_p1");
    sc_trace(mVcdFile, zext_ln270_4_fu_1728_p1, "zext_ln270_4_fu_1728_p1");
    sc_trace(mVcdFile, zext_ln270_5_fu_1733_p1, "zext_ln270_5_fu_1733_p1");
    sc_trace(mVcdFile, zext_ln270_6_fu_1738_p1, "zext_ln270_6_fu_1738_p1");
    sc_trace(mVcdFile, zext_ln270_7_fu_1743_p1, "zext_ln270_7_fu_1743_p1");
    sc_trace(mVcdFile, zext_ln270_8_fu_1748_p1, "zext_ln270_8_fu_1748_p1");
    sc_trace(mVcdFile, zext_ln270_9_fu_1753_p1, "zext_ln270_9_fu_1753_p1");
    sc_trace(mVcdFile, zext_ln270_10_fu_1758_p1, "zext_ln270_10_fu_1758_p1");
    sc_trace(mVcdFile, zext_ln270_11_fu_1763_p1, "zext_ln270_11_fu_1763_p1");
    sc_trace(mVcdFile, zext_ln270_12_fu_1768_p1, "zext_ln270_12_fu_1768_p1");
    sc_trace(mVcdFile, zext_ln270_13_fu_1773_p1, "zext_ln270_13_fu_1773_p1");
    sc_trace(mVcdFile, zext_ln270_14_fu_1778_p1, "zext_ln270_14_fu_1778_p1");
    sc_trace(mVcdFile, zext_ln270_15_fu_1783_p1, "zext_ln270_15_fu_1783_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("Cipher.hdltvin.dat");
    mHdltvoutHandle.open("Cipher.hdltvout.dat");
}

Cipher::~Cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sbox_U;
    delete call_ret_MixColumns_fu_1304;
}

void Cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        round_assign_reg_1293 = ap_const_lv4_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(icmp_ln436_fu_1436_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        round_assign_reg_1293 = round_fu_1542_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_0_0_reg_1283 = xor_ln252_fu_1340_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_0_0_reg_1283 = xor_ln252_32_fu_1612_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_0_1_reg_1273 = xor_ln252_4_fu_1364_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_0_1_reg_1273 = xor_ln252_36_fu_1636_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_0_2_reg_1263 = xor_ln252_8_fu_1388_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_0_2_reg_1263 = xor_ln252_40_fu_1660_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_0_3_reg_1253 = xor_ln252_12_fu_1412_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_0_3_reg_1253 = xor_ln252_44_fu_1684_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_1_0_reg_1243 = xor_ln252_1_fu_1346_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_1_0_reg_1243 = xor_ln252_33_fu_1618_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_1_1_reg_1233 = xor_ln252_5_fu_1370_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_1_1_reg_1233 = xor_ln252_37_fu_1642_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_1_2_reg_1223 = xor_ln252_9_fu_1394_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_1_2_reg_1223 = xor_ln252_41_fu_1666_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_1_3_reg_1213 = xor_ln252_13_fu_1418_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_1_3_reg_1213 = xor_ln252_45_fu_1690_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_2_0_reg_1203 = xor_ln252_2_fu_1352_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_2_0_reg_1203 = xor_ln252_34_fu_1624_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_2_1_reg_1193 = xor_ln252_6_fu_1376_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_2_1_reg_1193 = xor_ln252_38_fu_1648_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_2_2_reg_1183 = xor_ln252_10_fu_1400_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_2_2_reg_1183 = xor_ln252_42_fu_1672_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_2_3_reg_1173 = xor_ln252_14_fu_1424_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_2_3_reg_1173 = xor_ln252_46_fu_1696_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_3_0_reg_1163 = xor_ln252_3_fu_1358_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_3_0_reg_1163 = xor_ln252_35_fu_1630_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_3_1_reg_1153 = xor_ln252_7_fu_1382_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_3_1_reg_1153 = xor_ln252_39_fu_1654_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_3_2_reg_1143 = xor_ln252_11_fu_1406_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_3_2_reg_1143 = xor_ln252_43_fu_1678_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_load_33_3_3_reg_1133 = xor_ln252_15_fu_1430_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0))) {
        state_load_33_3_3_reg_1133 = xor_ln252_47_fu_1702_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln436_reg_2060 = icmp_ln436_fu_1436_p2.read();
    }
}

void Cipher::thread_RoundKey_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_0_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_0_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_0_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_0_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_0_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_0_ce0 = ap_const_logic_1;
    } else {
        RoundKey_0_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_10_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_10_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_10_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_10_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_10_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_10_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_10_ce0 = ap_const_logic_1;
    } else {
        RoundKey_10_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_11_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_11_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_11_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_11_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_11_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_11_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_11_ce0 = ap_const_logic_1;
    } else {
        RoundKey_11_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_12_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_12_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_12_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_12_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_12_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_12_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_12_ce0 = ap_const_logic_1;
    } else {
        RoundKey_12_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_13_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_13_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_13_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_13_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_13_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_13_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_13_ce0 = ap_const_logic_1;
    } else {
        RoundKey_13_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_14_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_14_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_14_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_14_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_14_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_14_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_14_ce0 = ap_const_logic_1;
    } else {
        RoundKey_14_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_15_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_15_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_15_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_15_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_15_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_15_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_15_ce0 = ap_const_logic_1;
    } else {
        RoundKey_15_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_1_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_1_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_1_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_1_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_1_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_1_ce0 = ap_const_logic_1;
    } else {
        RoundKey_1_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_2_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_2_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_2_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_2_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_2_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_2_ce0 = ap_const_logic_1;
    } else {
        RoundKey_2_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_3_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_3_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_3_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_3_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_3_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_3_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_3_ce0 = ap_const_logic_1;
    } else {
        RoundKey_3_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_4_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_4_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_4_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_4_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_4_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_4_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_4_ce0 = ap_const_logic_1;
    } else {
        RoundKey_4_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_5_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_5_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_5_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_5_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_5_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_5_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_5_ce0 = ap_const_logic_1;
    } else {
        RoundKey_5_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_6_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_6_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_6_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_6_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_6_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_6_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_6_ce0 = ap_const_logic_1;
    } else {
        RoundKey_6_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_7_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_7_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_7_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_7_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_7_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_7_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_7_ce0 = ap_const_logic_1;
    } else {
        RoundKey_7_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_8_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_8_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_8_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_8_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_8_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_8_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_8_ce0 = ap_const_logic_1;
    } else {
        RoundKey_8_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_9_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_9_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        RoundKey_9_address0 =  (sc_lv<4>) (zext_ln252_fu_1522_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_9_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        RoundKey_9_address0 = "XXXX";
    }
}

void Cipher::thread_RoundKey_9_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        RoundKey_9_ce0 = ap_const_logic_1;
    } else {
        RoundKey_9_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Cipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void Cipher::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[4];
}

void Cipher::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln436_fu_1436_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Cipher::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cipher::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cipher::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4 = xor_ln252_32_fu_1612_p2.read();
    } else {
        ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4 = state_load_33_0_0_reg_1283.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4 = xor_ln252_36_fu_1636_p2.read();
    } else {
        ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4 = state_load_33_0_1_reg_1273.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4 = xor_ln252_40_fu_1660_p2.read();
    } else {
        ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4 = state_load_33_0_2_reg_1263.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4 = xor_ln252_44_fu_1684_p2.read();
    } else {
        ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4 = state_load_33_0_3_reg_1253.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4 = xor_ln252_33_fu_1618_p2.read();
    } else {
        ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4 = state_load_33_1_0_reg_1243.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4 = xor_ln252_37_fu_1642_p2.read();
    } else {
        ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4 = state_load_33_1_1_reg_1233.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4 = xor_ln252_41_fu_1666_p2.read();
    } else {
        ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4 = state_load_33_1_2_reg_1223.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4 = xor_ln252_45_fu_1690_p2.read();
    } else {
        ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4 = state_load_33_1_3_reg_1213.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4 = xor_ln252_34_fu_1624_p2.read();
    } else {
        ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4 = state_load_33_2_0_reg_1203.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4 = xor_ln252_38_fu_1648_p2.read();
    } else {
        ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4 = state_load_33_2_1_reg_1193.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4 = xor_ln252_42_fu_1672_p2.read();
    } else {
        ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4 = state_load_33_2_2_reg_1183.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4 = xor_ln252_46_fu_1696_p2.read();
    } else {
        ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4 = state_load_33_2_3_reg_1173.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4 = xor_ln252_35_fu_1630_p2.read();
    } else {
        ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4 = state_load_33_3_0_reg_1163.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4 = xor_ln252_39_fu_1654_p2.read();
    } else {
        ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4 = state_load_33_3_1_reg_1153.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4 = xor_ln252_43_fu_1678_p2.read();
    } else {
        ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4 = state_load_33_3_2_reg_1143.read();
    }
}

void Cipher::thread_ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln436_reg_2060.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4 = xor_ln252_47_fu_1702_p2.read();
    } else {
        ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4 = state_load_33_3_3_reg_1133.read();
    }
}

void Cipher::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cipher::thread_icmp_ln436_fu_1436_p2() {
    icmp_ln436_fu_1436_p2 = (!round_assign_reg_1293.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(round_assign_reg_1293.read() == ap_const_lv4_A);
}

void Cipher::thread_round_fu_1542_p2() {
    round_fu_1542_p2 = (!round_assign_reg_1293.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_assign_reg_1293.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Cipher::thread_sbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln270_fu_1708_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address0 =  (sc_lv<8>) (zext_ln270_16_fu_1442_p1.read());
    } else {
        sbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address1 =  (sc_lv<8>) (zext_ln270_1_fu_1713_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address1 =  (sc_lv<8>) (zext_ln270_17_fu_1447_p1.read());
    } else {
        sbox_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address10 =  (sc_lv<8>) (zext_ln270_10_fu_1758_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address10 =  (sc_lv<8>) (zext_ln270_26_fu_1492_p1.read());
    } else {
        sbox_address10 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address11() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address11 =  (sc_lv<8>) (zext_ln270_11_fu_1763_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address11 =  (sc_lv<8>) (zext_ln270_27_fu_1497_p1.read());
    } else {
        sbox_address11 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address12() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address12 =  (sc_lv<8>) (zext_ln270_12_fu_1768_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address12 =  (sc_lv<8>) (zext_ln270_28_fu_1502_p1.read());
    } else {
        sbox_address12 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address13() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address13 =  (sc_lv<8>) (zext_ln270_13_fu_1773_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address13 =  (sc_lv<8>) (zext_ln270_29_fu_1507_p1.read());
    } else {
        sbox_address13 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address14() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address14 =  (sc_lv<8>) (zext_ln270_14_fu_1778_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address14 =  (sc_lv<8>) (zext_ln270_30_fu_1512_p1.read());
    } else {
        sbox_address14 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address15() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address15 =  (sc_lv<8>) (zext_ln270_15_fu_1783_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address15 =  (sc_lv<8>) (zext_ln270_31_fu_1517_p1.read());
    } else {
        sbox_address15 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address2 =  (sc_lv<8>) (zext_ln270_2_fu_1718_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address2 =  (sc_lv<8>) (zext_ln270_18_fu_1452_p1.read());
    } else {
        sbox_address2 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address3 =  (sc_lv<8>) (zext_ln270_3_fu_1723_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address3 =  (sc_lv<8>) (zext_ln270_19_fu_1457_p1.read());
    } else {
        sbox_address3 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address4 =  (sc_lv<8>) (zext_ln270_4_fu_1728_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address4 =  (sc_lv<8>) (zext_ln270_20_fu_1462_p1.read());
    } else {
        sbox_address4 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address5 =  (sc_lv<8>) (zext_ln270_5_fu_1733_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address5 =  (sc_lv<8>) (zext_ln270_21_fu_1467_p1.read());
    } else {
        sbox_address5 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address6 =  (sc_lv<8>) (zext_ln270_6_fu_1738_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address6 =  (sc_lv<8>) (zext_ln270_22_fu_1472_p1.read());
    } else {
        sbox_address6 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address7 =  (sc_lv<8>) (zext_ln270_7_fu_1743_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address7 =  (sc_lv<8>) (zext_ln270_23_fu_1477_p1.read());
    } else {
        sbox_address7 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address8 =  (sc_lv<8>) (zext_ln270_8_fu_1748_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address8 =  (sc_lv<8>) (zext_ln270_24_fu_1482_p1.read());
    } else {
        sbox_address8 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_address9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sbox_address9 =  (sc_lv<8>) (zext_ln270_9_fu_1753_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        sbox_address9 =  (sc_lv<8>) (zext_ln270_25_fu_1487_p1.read());
    } else {
        sbox_address9 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_sbox_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce10() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce10 = ap_const_logic_1;
    } else {
        sbox_ce10 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce11() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce11 = ap_const_logic_1;
    } else {
        sbox_ce11 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce12() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce12 = ap_const_logic_1;
    } else {
        sbox_ce12 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce13() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce13 = ap_const_logic_1;
    } else {
        sbox_ce13 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce14() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce14 = ap_const_logic_1;
    } else {
        sbox_ce14 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce15() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce15 = ap_const_logic_1;
    } else {
        sbox_ce15 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce2() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce2 = ap_const_logic_1;
    } else {
        sbox_ce2 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce3() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce3 = ap_const_logic_1;
    } else {
        sbox_ce3 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce4() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce4 = ap_const_logic_1;
    } else {
        sbox_ce4 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce5() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce5 = ap_const_logic_1;
    } else {
        sbox_ce5 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce6() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce6 = ap_const_logic_1;
    } else {
        sbox_ce6 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce7() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce7 = ap_const_logic_1;
    } else {
        sbox_ce7 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce8() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce8 = ap_const_logic_1;
    } else {
        sbox_ce8 = ap_const_logic_0;
    }
}

void Cipher::thread_sbox_ce9() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        sbox_ce9 = ap_const_logic_1;
    } else {
        sbox_ce9 = ap_const_logic_0;
    }
}

void Cipher::thread_state_0_0_o() {
    state_0_0_o = (sbox_q0.read() ^ RoundKey_0_q0.read());
}

void Cipher::thread_state_0_0_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_0_0_o_ap_vld = ap_const_logic_1;
    } else {
        state_0_0_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_0_1_o() {
    state_0_1_o = (sbox_q5.read() ^ RoundKey_1_q0.read());
}

void Cipher::thread_state_0_1_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_0_1_o_ap_vld = ap_const_logic_1;
    } else {
        state_0_1_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_0_2_o() {
    state_0_2_o = (sbox_q10.read() ^ RoundKey_2_q0.read());
}

void Cipher::thread_state_0_2_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_0_2_o_ap_vld = ap_const_logic_1;
    } else {
        state_0_2_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_0_3_o() {
    state_0_3_o = (sbox_q15.read() ^ RoundKey_3_q0.read());
}

void Cipher::thread_state_0_3_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_0_3_o_ap_vld = ap_const_logic_1;
    } else {
        state_0_3_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_1_0_o() {
    state_1_0_o = (sbox_q1.read() ^ RoundKey_4_q0.read());
}

void Cipher::thread_state_1_0_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_1_0_o_ap_vld = ap_const_logic_1;
    } else {
        state_1_0_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_1_1_o() {
    state_1_1_o = (sbox_q6.read() ^ RoundKey_5_q0.read());
}

void Cipher::thread_state_1_1_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_1_1_o_ap_vld = ap_const_logic_1;
    } else {
        state_1_1_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_1_2_o() {
    state_1_2_o = (sbox_q11.read() ^ RoundKey_6_q0.read());
}

void Cipher::thread_state_1_2_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_1_2_o_ap_vld = ap_const_logic_1;
    } else {
        state_1_2_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_1_3_o() {
    state_1_3_o = (sbox_q12.read() ^ RoundKey_7_q0.read());
}

void Cipher::thread_state_1_3_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_1_3_o_ap_vld = ap_const_logic_1;
    } else {
        state_1_3_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_2_0_o() {
    state_2_0_o = (sbox_q2.read() ^ RoundKey_8_q0.read());
}

void Cipher::thread_state_2_0_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_2_0_o_ap_vld = ap_const_logic_1;
    } else {
        state_2_0_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_2_1_o() {
    state_2_1_o = (sbox_q7.read() ^ RoundKey_9_q0.read());
}

void Cipher::thread_state_2_1_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_2_1_o_ap_vld = ap_const_logic_1;
    } else {
        state_2_1_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_2_2_o() {
    state_2_2_o = (sbox_q8.read() ^ RoundKey_10_q0.read());
}

void Cipher::thread_state_2_2_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_2_2_o_ap_vld = ap_const_logic_1;
    } else {
        state_2_2_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_2_3_o() {
    state_2_3_o = (sbox_q13.read() ^ RoundKey_11_q0.read());
}

void Cipher::thread_state_2_3_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_2_3_o_ap_vld = ap_const_logic_1;
    } else {
        state_2_3_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_3_0_o() {
    state_3_0_o = (sbox_q3.read() ^ RoundKey_12_q0.read());
}

void Cipher::thread_state_3_0_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_3_0_o_ap_vld = ap_const_logic_1;
    } else {
        state_3_0_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_3_1_o() {
    state_3_1_o = (sbox_q4.read() ^ RoundKey_13_q0.read());
}

void Cipher::thread_state_3_1_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_3_1_o_ap_vld = ap_const_logic_1;
    } else {
        state_3_1_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_3_2_o() {
    state_3_2_o = (sbox_q9.read() ^ RoundKey_14_q0.read());
}

void Cipher::thread_state_3_2_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_3_2_o_ap_vld = ap_const_logic_1;
    } else {
        state_3_2_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_state_3_3_o() {
    state_3_3_o = (sbox_q14.read() ^ RoundKey_15_q0.read());
}

void Cipher::thread_state_3_3_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_3_3_o_ap_vld = ap_const_logic_1;
    } else {
        state_3_3_o_ap_vld = ap_const_logic_0;
    }
}

void Cipher::thread_xor_ln252_10_fu_1400_p2() {
    xor_ln252_10_fu_1400_p2 = (state_2_2_i.read() ^ RoundKey_10_q0.read());
}

void Cipher::thread_xor_ln252_11_fu_1406_p2() {
    xor_ln252_11_fu_1406_p2 = (state_2_3_i.read() ^ RoundKey_11_q0.read());
}

void Cipher::thread_xor_ln252_12_fu_1412_p2() {
    xor_ln252_12_fu_1412_p2 = (state_3_0_i.read() ^ RoundKey_12_q0.read());
}

void Cipher::thread_xor_ln252_13_fu_1418_p2() {
    xor_ln252_13_fu_1418_p2 = (state_3_1_i.read() ^ RoundKey_13_q0.read());
}

void Cipher::thread_xor_ln252_14_fu_1424_p2() {
    xor_ln252_14_fu_1424_p2 = (state_3_2_i.read() ^ RoundKey_14_q0.read());
}

void Cipher::thread_xor_ln252_15_fu_1430_p2() {
    xor_ln252_15_fu_1430_p2 = (state_3_3_i.read() ^ RoundKey_15_q0.read());
}

void Cipher::thread_xor_ln252_1_fu_1346_p2() {
    xor_ln252_1_fu_1346_p2 = (state_0_1_i.read() ^ RoundKey_1_q0.read());
}

void Cipher::thread_xor_ln252_2_fu_1352_p2() {
    xor_ln252_2_fu_1352_p2 = (state_0_2_i.read() ^ RoundKey_2_q0.read());
}

void Cipher::thread_xor_ln252_32_fu_1612_p2() {
    xor_ln252_32_fu_1612_p2 = (RoundKey_0_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_0.read());
}

void Cipher::thread_xor_ln252_33_fu_1618_p2() {
    xor_ln252_33_fu_1618_p2 = (RoundKey_1_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_1.read());
}

void Cipher::thread_xor_ln252_34_fu_1624_p2() {
    xor_ln252_34_fu_1624_p2 = (RoundKey_2_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_2.read());
}

void Cipher::thread_xor_ln252_35_fu_1630_p2() {
    xor_ln252_35_fu_1630_p2 = (RoundKey_3_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_3.read());
}

void Cipher::thread_xor_ln252_36_fu_1636_p2() {
    xor_ln252_36_fu_1636_p2 = (RoundKey_4_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_4.read());
}

void Cipher::thread_xor_ln252_37_fu_1642_p2() {
    xor_ln252_37_fu_1642_p2 = (RoundKey_5_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_5.read());
}

void Cipher::thread_xor_ln252_38_fu_1648_p2() {
    xor_ln252_38_fu_1648_p2 = (RoundKey_6_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_6.read());
}

void Cipher::thread_xor_ln252_39_fu_1654_p2() {
    xor_ln252_39_fu_1654_p2 = (RoundKey_7_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_7.read());
}

void Cipher::thread_xor_ln252_3_fu_1358_p2() {
    xor_ln252_3_fu_1358_p2 = (state_0_3_i.read() ^ RoundKey_3_q0.read());
}

void Cipher::thread_xor_ln252_40_fu_1660_p2() {
    xor_ln252_40_fu_1660_p2 = (RoundKey_8_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_8.read());
}

void Cipher::thread_xor_ln252_41_fu_1666_p2() {
    xor_ln252_41_fu_1666_p2 = (RoundKey_9_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_9.read());
}

void Cipher::thread_xor_ln252_42_fu_1672_p2() {
    xor_ln252_42_fu_1672_p2 = (RoundKey_10_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_10.read());
}

void Cipher::thread_xor_ln252_43_fu_1678_p2() {
    xor_ln252_43_fu_1678_p2 = (RoundKey_11_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_11.read());
}

void Cipher::thread_xor_ln252_44_fu_1684_p2() {
    xor_ln252_44_fu_1684_p2 = (RoundKey_12_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_12.read());
}

void Cipher::thread_xor_ln252_45_fu_1690_p2() {
    xor_ln252_45_fu_1690_p2 = (RoundKey_13_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_13.read());
}

void Cipher::thread_xor_ln252_46_fu_1696_p2() {
    xor_ln252_46_fu_1696_p2 = (RoundKey_14_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_14.read());
}

void Cipher::thread_xor_ln252_47_fu_1702_p2() {
    xor_ln252_47_fu_1702_p2 = (RoundKey_15_q0.read() ^ call_ret_MixColumns_fu_1304_ap_return_15.read());
}

void Cipher::thread_xor_ln252_4_fu_1364_p2() {
    xor_ln252_4_fu_1364_p2 = (state_1_0_i.read() ^ RoundKey_4_q0.read());
}

void Cipher::thread_xor_ln252_5_fu_1370_p2() {
    xor_ln252_5_fu_1370_p2 = (state_1_1_i.read() ^ RoundKey_5_q0.read());
}

void Cipher::thread_xor_ln252_6_fu_1376_p2() {
    xor_ln252_6_fu_1376_p2 = (state_1_2_i.read() ^ RoundKey_6_q0.read());
}

void Cipher::thread_xor_ln252_7_fu_1382_p2() {
    xor_ln252_7_fu_1382_p2 = (state_1_3_i.read() ^ RoundKey_7_q0.read());
}

void Cipher::thread_xor_ln252_8_fu_1388_p2() {
    xor_ln252_8_fu_1388_p2 = (state_2_0_i.read() ^ RoundKey_8_q0.read());
}

void Cipher::thread_xor_ln252_9_fu_1394_p2() {
    xor_ln252_9_fu_1394_p2 = (state_2_1_i.read() ^ RoundKey_9_q0.read());
}

void Cipher::thread_xor_ln252_fu_1340_p2() {
    xor_ln252_fu_1340_p2 = (state_0_0_i.read() ^ RoundKey_0_q0.read());
}

void Cipher::thread_zext_ln252_fu_1522_p1() {
    zext_ln252_fu_1522_p1 = esl_zext<64,4>(round_assign_reg_1293.read());
}

void Cipher::thread_zext_ln270_10_fu_1758_p1() {
    zext_ln270_10_fu_1758_p1 = esl_zext<64,8>(state_load_33_2_2_reg_1183.read());
}

void Cipher::thread_zext_ln270_11_fu_1763_p1() {
    zext_ln270_11_fu_1763_p1 = esl_zext<64,8>(state_load_33_2_3_reg_1173.read());
}

void Cipher::thread_zext_ln270_12_fu_1768_p1() {
    zext_ln270_12_fu_1768_p1 = esl_zext<64,8>(state_load_33_3_0_reg_1163.read());
}

void Cipher::thread_zext_ln270_13_fu_1773_p1() {
    zext_ln270_13_fu_1773_p1 = esl_zext<64,8>(state_load_33_3_1_reg_1153.read());
}

void Cipher::thread_zext_ln270_14_fu_1778_p1() {
    zext_ln270_14_fu_1778_p1 = esl_zext<64,8>(state_load_33_3_2_reg_1143.read());
}

void Cipher::thread_zext_ln270_15_fu_1783_p1() {
    zext_ln270_15_fu_1783_p1 = esl_zext<64,8>(state_load_33_3_3_reg_1133.read());
}

void Cipher::thread_zext_ln270_16_fu_1442_p1() {
    zext_ln270_16_fu_1442_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_0_0_phi_fu_1286_p4.read());
}

void Cipher::thread_zext_ln270_17_fu_1447_p1() {
    zext_ln270_17_fu_1447_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_0_1_phi_fu_1276_p4.read());
}

void Cipher::thread_zext_ln270_18_fu_1452_p1() {
    zext_ln270_18_fu_1452_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_0_2_phi_fu_1266_p4.read());
}

void Cipher::thread_zext_ln270_19_fu_1457_p1() {
    zext_ln270_19_fu_1457_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_0_3_phi_fu_1256_p4.read());
}

void Cipher::thread_zext_ln270_1_fu_1713_p1() {
    zext_ln270_1_fu_1713_p1 = esl_zext<64,8>(state_load_33_0_1_reg_1273.read());
}

void Cipher::thread_zext_ln270_20_fu_1462_p1() {
    zext_ln270_20_fu_1462_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_1_0_phi_fu_1246_p4.read());
}

void Cipher::thread_zext_ln270_21_fu_1467_p1() {
    zext_ln270_21_fu_1467_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_1_1_phi_fu_1236_p4.read());
}

void Cipher::thread_zext_ln270_22_fu_1472_p1() {
    zext_ln270_22_fu_1472_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_1_2_phi_fu_1226_p4.read());
}

void Cipher::thread_zext_ln270_23_fu_1477_p1() {
    zext_ln270_23_fu_1477_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_1_3_phi_fu_1216_p4.read());
}

void Cipher::thread_zext_ln270_24_fu_1482_p1() {
    zext_ln270_24_fu_1482_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_2_0_phi_fu_1206_p4.read());
}

void Cipher::thread_zext_ln270_25_fu_1487_p1() {
    zext_ln270_25_fu_1487_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_2_1_phi_fu_1196_p4.read());
}

void Cipher::thread_zext_ln270_26_fu_1492_p1() {
    zext_ln270_26_fu_1492_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_2_2_phi_fu_1186_p4.read());
}

void Cipher::thread_zext_ln270_27_fu_1497_p1() {
    zext_ln270_27_fu_1497_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_2_3_phi_fu_1176_p4.read());
}

void Cipher::thread_zext_ln270_28_fu_1502_p1() {
    zext_ln270_28_fu_1502_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_3_0_phi_fu_1166_p4.read());
}

void Cipher::thread_zext_ln270_29_fu_1507_p1() {
    zext_ln270_29_fu_1507_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_3_1_phi_fu_1156_p4.read());
}

void Cipher::thread_zext_ln270_2_fu_1718_p1() {
    zext_ln270_2_fu_1718_p1 = esl_zext<64,8>(state_load_33_0_2_reg_1263.read());
}

void Cipher::thread_zext_ln270_30_fu_1512_p1() {
    zext_ln270_30_fu_1512_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_3_2_phi_fu_1146_p4.read());
}

void Cipher::thread_zext_ln270_31_fu_1517_p1() {
    zext_ln270_31_fu_1517_p1 = esl_zext<64,8>(ap_phi_mux_state_load_33_3_3_phi_fu_1136_p4.read());
}

void Cipher::thread_zext_ln270_3_fu_1723_p1() {
    zext_ln270_3_fu_1723_p1 = esl_zext<64,8>(state_load_33_0_3_reg_1253.read());
}

void Cipher::thread_zext_ln270_4_fu_1728_p1() {
    zext_ln270_4_fu_1728_p1 = esl_zext<64,8>(state_load_33_1_0_reg_1243.read());
}

void Cipher::thread_zext_ln270_5_fu_1733_p1() {
    zext_ln270_5_fu_1733_p1 = esl_zext<64,8>(state_load_33_1_1_reg_1233.read());
}

void Cipher::thread_zext_ln270_6_fu_1738_p1() {
    zext_ln270_6_fu_1738_p1 = esl_zext<64,8>(state_load_33_1_2_reg_1223.read());
}

void Cipher::thread_zext_ln270_7_fu_1743_p1() {
    zext_ln270_7_fu_1743_p1 = esl_zext<64,8>(state_load_33_1_3_reg_1213.read());
}

void Cipher::thread_zext_ln270_8_fu_1748_p1() {
    zext_ln270_8_fu_1748_p1 = esl_zext<64,8>(state_load_33_2_0_reg_1203.read());
}

void Cipher::thread_zext_ln270_9_fu_1753_p1() {
    zext_ln270_9_fu_1753_p1 = esl_zext<64,8>(state_load_33_2_1_reg_1193.read());
}

void Cipher::thread_zext_ln270_fu_1708_p1() {
    zext_ln270_fu_1708_p1 = esl_zext<64,8>(state_load_33_0_0_reg_1283.read());
}

void Cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln436_fu_1436_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln436_fu_1436_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void Cipher::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_0_0_i\" :  \"" << state_0_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_0_o\" :  \"" << state_0_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_0_o_ap_vld\" :  \"" << state_0_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_0_1_i\" :  \"" << state_0_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_1_o\" :  \"" << state_0_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_1_o_ap_vld\" :  \"" << state_0_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_0_2_i\" :  \"" << state_0_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_2_o\" :  \"" << state_0_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_2_o_ap_vld\" :  \"" << state_0_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_0_3_i\" :  \"" << state_0_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_3_o\" :  \"" << state_0_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_0_3_o_ap_vld\" :  \"" << state_0_3_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_1_0_i\" :  \"" << state_1_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_0_o\" :  \"" << state_1_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_0_o_ap_vld\" :  \"" << state_1_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_1_1_i\" :  \"" << state_1_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_1_o\" :  \"" << state_1_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_1_o_ap_vld\" :  \"" << state_1_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_1_2_i\" :  \"" << state_1_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_2_o\" :  \"" << state_1_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_2_o_ap_vld\" :  \"" << state_1_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_1_3_i\" :  \"" << state_1_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_3_o\" :  \"" << state_1_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_1_3_o_ap_vld\" :  \"" << state_1_3_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_2_0_i\" :  \"" << state_2_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_0_o\" :  \"" << state_2_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_0_o_ap_vld\" :  \"" << state_2_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_2_1_i\" :  \"" << state_2_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_1_o\" :  \"" << state_2_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_1_o_ap_vld\" :  \"" << state_2_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_2_2_i\" :  \"" << state_2_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_2_o\" :  \"" << state_2_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_2_o_ap_vld\" :  \"" << state_2_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_2_3_i\" :  \"" << state_2_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_3_o\" :  \"" << state_2_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_2_3_o_ap_vld\" :  \"" << state_2_3_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_3_0_i\" :  \"" << state_3_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_0_o\" :  \"" << state_3_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_0_o_ap_vld\" :  \"" << state_3_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_3_1_i\" :  \"" << state_3_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_1_o\" :  \"" << state_3_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_1_o_ap_vld\" :  \"" << state_3_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_3_2_i\" :  \"" << state_3_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_2_o\" :  \"" << state_3_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_2_o_ap_vld\" :  \"" << state_3_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_3_3_i\" :  \"" << state_3_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_3_o\" :  \"" << state_3_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_3_3_o_ap_vld\" :  \"" << state_3_3_o_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_0_address0\" :  \"" << RoundKey_0_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_0_ce0\" :  \"" << RoundKey_0_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_0_q0\" :  \"" << RoundKey_0_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_1_address0\" :  \"" << RoundKey_1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_1_ce0\" :  \"" << RoundKey_1_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_1_q0\" :  \"" << RoundKey_1_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_2_address0\" :  \"" << RoundKey_2_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_2_ce0\" :  \"" << RoundKey_2_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_2_q0\" :  \"" << RoundKey_2_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_3_address0\" :  \"" << RoundKey_3_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_3_ce0\" :  \"" << RoundKey_3_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_3_q0\" :  \"" << RoundKey_3_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_4_address0\" :  \"" << RoundKey_4_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_4_ce0\" :  \"" << RoundKey_4_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_4_q0\" :  \"" << RoundKey_4_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_5_address0\" :  \"" << RoundKey_5_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_5_ce0\" :  \"" << RoundKey_5_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_5_q0\" :  \"" << RoundKey_5_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_6_address0\" :  \"" << RoundKey_6_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_6_ce0\" :  \"" << RoundKey_6_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_6_q0\" :  \"" << RoundKey_6_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_7_address0\" :  \"" << RoundKey_7_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_7_ce0\" :  \"" << RoundKey_7_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_7_q0\" :  \"" << RoundKey_7_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_8_address0\" :  \"" << RoundKey_8_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_8_ce0\" :  \"" << RoundKey_8_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_8_q0\" :  \"" << RoundKey_8_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_9_address0\" :  \"" << RoundKey_9_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_9_ce0\" :  \"" << RoundKey_9_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_9_q0\" :  \"" << RoundKey_9_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_10_address0\" :  \"" << RoundKey_10_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_10_ce0\" :  \"" << RoundKey_10_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_10_q0\" :  \"" << RoundKey_10_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_11_address0\" :  \"" << RoundKey_11_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_11_ce0\" :  \"" << RoundKey_11_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_11_q0\" :  \"" << RoundKey_11_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_12_address0\" :  \"" << RoundKey_12_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_12_ce0\" :  \"" << RoundKey_12_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_12_q0\" :  \"" << RoundKey_12_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_13_address0\" :  \"" << RoundKey_13_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_13_ce0\" :  \"" << RoundKey_13_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_13_q0\" :  \"" << RoundKey_13_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_14_address0\" :  \"" << RoundKey_14_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_14_ce0\" :  \"" << RoundKey_14_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_14_q0\" :  \"" << RoundKey_14_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_15_address0\" :  \"" << RoundKey_15_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RoundKey_15_ce0\" :  \"" << RoundKey_15_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"RoundKey_15_q0\" :  \"" << RoundKey_15_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

