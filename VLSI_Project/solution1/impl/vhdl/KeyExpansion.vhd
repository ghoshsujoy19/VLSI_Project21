-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeyExpansion is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    RoundKey_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    RoundKey_0_ce0 : OUT STD_LOGIC;
    RoundKey_0_we0 : OUT STD_LOGIC;
    RoundKey_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    RoundKey_1_ce0 : OUT STD_LOGIC;
    RoundKey_1_we0 : OUT STD_LOGIC;
    RoundKey_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    RoundKey_2_ce0 : OUT STD_LOGIC;
    RoundKey_2_we0 : OUT STD_LOGIC;
    RoundKey_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    RoundKey_3_ce0 : OUT STD_LOGIC;
    RoundKey_3_we0 : OUT STD_LOGIC;
    RoundKey_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    Key_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    Key_0_ce0 : OUT STD_LOGIC;
    Key_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    Key_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    Key_1_ce0 : OUT STD_LOGIC;
    Key_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    Key_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    Key_2_ce0 : OUT STD_LOGIC;
    Key_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    Key_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    Key_3_ce0 : OUT STD_LOGIC;
    Key_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of KeyExpansion is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "KeyExpansion,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.344444,HLS_SYN_LAT=130,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=75,HLS_SYN_LUT=1635,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sbox_address2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sbox_ce2 : STD_LOGIC;
    signal sbox_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sbox_address3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sbox_ce3 : STD_LOGIC;
    signal sbox_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Rcon_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_373_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1088 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln167_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln167_reg_1093 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln164_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln177_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln6_reg_1144 : STD_LOGIC_VECTOR (5 downto 0);
    signal tempa_0_3_reg_1149 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tempa_1_reg_1154 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_2_reg_1159 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_3_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_17_fu_456_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_17_reg_1174 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_19_fu_475_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_19_reg_1184 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_21_fu_494_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_21_reg_1194 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_23_fu_513_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_23_reg_1204 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_fu_1079_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_reg_344 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_355 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln181_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln209_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln227_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln227_1_fu_1050_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln227_fu_1043_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln228_fu_1058_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln229_fu_1065_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln230_fu_1072_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_393_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln181_fu_401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_407_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln227_fu_425_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_fu_441_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln2_fu_460_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln3_fu_479_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln4_fu_498_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln5_fu_517_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln177_fu_539_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_549_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_18_fu_556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln207_1_fu_568_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln207_2_fu_572_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln207_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln207_fu_586_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln207_1_fu_598_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_576_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln207_fu_592_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln207_fu_604_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln207_2_fu_620_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln207_2_fu_628_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln207_1_fu_612_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln207_3_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln207_4_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln207_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln207_1_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln207_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_664_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_20_fu_671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln208_1_fu_683_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln208_2_fu_687_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln208_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln208_fu_701_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln208_1_fu_713_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_691_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln208_fu_707_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln208_fu_719_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln208_2_fu_735_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln208_2_fu_743_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln208_1_fu_727_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln208_3_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln208_4_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln208_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln208_1_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln208_fu_769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_779_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_22_fu_786_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln209_1_fu_798_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln209_2_fu_802_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln209_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln209_fu_816_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln209_1_fu_828_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_806_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln209_fu_822_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln209_fu_834_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln209_2_fu_850_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln209_2_fu_858_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln209_1_fu_842_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln209_3_fu_864_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln209_4_fu_868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln209_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln209_1_fu_878_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln209_fu_884_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_894_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_24_fu_901_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln210_1_fu_913_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln210_2_fu_917_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln210_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln210_fu_931_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln210_1_fu_943_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_921_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln210_fu_937_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln210_fu_949_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln210_2_fu_965_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln210_2_fu_973_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln210_1_fu_957_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln210_3_fu_979_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln210_4_fu_983_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln210_fu_987_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln210_1_fu_993_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln210_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln207_fu_660_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln188_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempa_3_1_fu_1005_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_2_1_fu_890_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_1_1_fu_775_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_0_fu_1009_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_0_2_fu_1036_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_1_2_fu_1029_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_2_2_fu_1022_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempa_3_2_fu_1015_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component KeyExpansion_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeyExpansion_Rcon IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component KeyExpansion_sbox
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1,
        address2 => sbox_address2,
        ce2 => sbox_ce2,
        q2 => sbox_q2,
        address3 => sbox_address3,
        ce3 => sbox_ce3,
        q3 => sbox_q3);

    Rcon_U : component KeyExpansion_Rcon
    generic map (
        DataWidth => 8,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_344 <= i_reg_1088;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_344 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln164_fu_367_p2 = ap_const_lv1_1))) then 
                i_1_reg_355 <= ap_const_lv6_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_355 <= i_2_fu_1079_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                empty_17_reg_1174 <= empty_17_fu_456_p1;
                empty_19_reg_1184 <= empty_19_fu_475_p1;
                empty_21_reg_1194 <= empty_21_fu_494_p1;
                empty_23_reg_1204 <= empty_23_fu_513_p1;
                tempa_0_3_reg_1149 <= RoundKey_0_q0;
                tempa_1_reg_1154 <= RoundKey_1_q0;
                tempa_2_reg_1159 <= RoundKey_2_q0;
                tempa_3_reg_1164 <= RoundKey_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1088 <= i_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln177_fu_387_p2 = ap_const_lv1_0))) then
                lshr_ln6_reg_1144 <= add_ln227_fu_425_p2(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln164_fu_367_p2 = ap_const_lv1_0))) then
                    zext_ln167_reg_1093(2 downto 0) <= zext_ln167_fu_379_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln167_reg_1093(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln164_fu_367_p2, ap_CS_fsm_state4, icmp_ln177_fu_387_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln164_fu_367_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln177_fu_387_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Key_0_address0 <= zext_ln167_fu_379_p1(2 - 1 downto 0);

    Key_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Key_0_ce0 <= ap_const_logic_1;
        else 
            Key_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Key_1_address0 <= zext_ln167_fu_379_p1(2 - 1 downto 0);

    Key_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Key_1_ce0 <= ap_const_logic_1;
        else 
            Key_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Key_2_address0 <= zext_ln167_fu_379_p1(2 - 1 downto 0);

    Key_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Key_2_ce0 <= ap_const_logic_1;
        else 
            Key_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Key_3_address0 <= zext_ln167_fu_379_p1(2 - 1 downto 0);

    Key_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Key_3_ce0 <= ap_const_logic_1;
        else 
            Key_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Rcon_address0 <= zext_ln212_fu_527_p1(4 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_0_address0_assign_proc : process(zext_ln167_reg_1093, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, zext_ln181_fu_417_p1, zext_ln227_fu_532_p1, zext_ln227_1_fu_1050_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_0_address0 <= zext_ln227_1_fu_1050_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            RoundKey_0_address0 <= zext_ln227_fu_532_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_0_address0 <= zext_ln181_fu_417_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_0_address0 <= zext_ln167_reg_1093(6 - 1 downto 0);
        else 
            RoundKey_0_address0 <= "XXXXXX";
        end if; 
    end process;


    RoundKey_0_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            RoundKey_0_ce0 <= ap_const_logic_1;
        else 
            RoundKey_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_0_d0_assign_proc : process(Key_0_q0, ap_CS_fsm_state6, ap_CS_fsm_state3, xor_ln227_fu_1043_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_0_d0 <= xor_ln227_fu_1043_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_0_d0 <= Key_0_q0;
        else 
            RoundKey_0_d0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_0_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            RoundKey_0_we0 <= ap_const_logic_1;
        else 
            RoundKey_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_1_address0_assign_proc : process(zext_ln167_reg_1093, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, zext_ln181_fu_417_p1, zext_ln227_fu_532_p1, zext_ln227_1_fu_1050_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_1_address0 <= zext_ln227_1_fu_1050_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            RoundKey_1_address0 <= zext_ln227_fu_532_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_1_address0 <= zext_ln181_fu_417_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_1_address0 <= zext_ln167_reg_1093(6 - 1 downto 0);
        else 
            RoundKey_1_address0 <= "XXXXXX";
        end if; 
    end process;


    RoundKey_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            RoundKey_1_ce0 <= ap_const_logic_1;
        else 
            RoundKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_1_d0_assign_proc : process(Key_1_q0, ap_CS_fsm_state6, ap_CS_fsm_state3, xor_ln228_fu_1058_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_1_d0 <= xor_ln228_fu_1058_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_1_d0 <= Key_1_q0;
        else 
            RoundKey_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_1_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            RoundKey_1_we0 <= ap_const_logic_1;
        else 
            RoundKey_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_2_address0_assign_proc : process(zext_ln167_reg_1093, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, zext_ln181_fu_417_p1, zext_ln227_fu_532_p1, zext_ln227_1_fu_1050_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_2_address0 <= zext_ln227_1_fu_1050_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            RoundKey_2_address0 <= zext_ln227_fu_532_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_2_address0 <= zext_ln181_fu_417_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_2_address0 <= zext_ln167_reg_1093(6 - 1 downto 0);
        else 
            RoundKey_2_address0 <= "XXXXXX";
        end if; 
    end process;


    RoundKey_2_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            RoundKey_2_ce0 <= ap_const_logic_1;
        else 
            RoundKey_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_2_d0_assign_proc : process(Key_2_q0, ap_CS_fsm_state6, ap_CS_fsm_state3, xor_ln229_fu_1065_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_2_d0 <= xor_ln229_fu_1065_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_2_d0 <= Key_2_q0;
        else 
            RoundKey_2_d0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_2_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            RoundKey_2_we0 <= ap_const_logic_1;
        else 
            RoundKey_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_3_address0_assign_proc : process(zext_ln167_reg_1093, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, zext_ln181_fu_417_p1, zext_ln227_fu_532_p1, zext_ln227_1_fu_1050_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_3_address0 <= zext_ln227_1_fu_1050_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            RoundKey_3_address0 <= zext_ln227_fu_532_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_3_address0 <= zext_ln181_fu_417_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_3_address0 <= zext_ln167_reg_1093(6 - 1 downto 0);
        else 
            RoundKey_3_address0 <= "XXXXXX";
        end if; 
    end process;


    RoundKey_3_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            RoundKey_3_ce0 <= ap_const_logic_1;
        else 
            RoundKey_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_3_d0_assign_proc : process(Key_3_q0, ap_CS_fsm_state6, ap_CS_fsm_state3, xor_ln230_fu_1072_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_3_d0 <= xor_ln230_fu_1072_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_3_d0 <= Key_3_q0;
        else 
            RoundKey_3_d0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_3_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            RoundKey_3_we0 <= ap_const_logic_1;
        else 
            RoundKey_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln181_fu_401_p2 <= std_logic_vector(signed(ap_const_lv8_FC) + signed(j_fu_393_p3));
    add_ln227_fu_425_p2 <= std_logic_vector(signed(ap_const_lv8_F0) + signed(j_fu_393_p3));
    and_ln207_fu_654_p2 <= (lshr_ln207_fu_642_p2 and lshr_ln207_1_fu_648_p2);
    and_ln208_fu_769_p2 <= (lshr_ln208_fu_757_p2 and lshr_ln208_1_fu_763_p2);
    and_ln209_fu_884_p2 <= (lshr_ln209_fu_872_p2 and lshr_ln209_1_fu_878_p2);
    and_ln210_fu_999_p2 <= (lshr_ln210_fu_987_p2 and lshr_ln210_1_fu_993_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln177_fu_387_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln177_fu_387_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln177_fu_387_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln177_fu_387_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_17_fu_456_p1 <= RoundKey_1_q0(2 - 1 downto 0);
    empty_18_fu_556_p2 <= (tmp_2_fu_549_p3 or ap_const_lv5_7);
    empty_19_fu_475_p1 <= RoundKey_2_q0(2 - 1 downto 0);
    empty_20_fu_671_p2 <= (tmp_4_fu_664_p3 or ap_const_lv5_7);
    empty_21_fu_494_p1 <= RoundKey_3_q0(2 - 1 downto 0);
    empty_22_fu_786_p2 <= (tmp_6_fu_779_p3 or ap_const_lv5_7);
    empty_23_fu_513_p1 <= RoundKey_0_q0(2 - 1 downto 0);
    empty_24_fu_901_p2 <= (tmp_8_fu_894_p3 or ap_const_lv5_7);
    i_2_fu_1079_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_1_reg_355));
    i_fu_373_p2 <= std_logic_vector(unsigned(i_0_reg_344) + unsigned(ap_const_lv3_1));
    icmp_ln164_fu_367_p2 <= "1" when (i_0_reg_344 = ap_const_lv3_4) else "0";
    icmp_ln177_fu_387_p2 <= "1" when (i_1_reg_355 = ap_const_lv6_2C) else "0";
    icmp_ln188_fu_543_p2 <= "1" when (trunc_ln177_fu_539_p1 = ap_const_lv2_0) else "0";
    icmp_ln207_fu_562_p2 <= "1" when (unsigned(tmp_2_fu_549_p3) > unsigned(empty_18_fu_556_p2)) else "0";
    icmp_ln208_fu_677_p2 <= "1" when (unsigned(tmp_4_fu_664_p3) > unsigned(empty_20_fu_671_p2)) else "0";
    icmp_ln209_fu_792_p2 <= "1" when (unsigned(tmp_6_fu_779_p3) > unsigned(empty_22_fu_786_p2)) else "0";
    icmp_ln210_fu_907_p2 <= "1" when (unsigned(tmp_8_fu_894_p3) > unsigned(empty_24_fu_901_p2)) else "0";
    j_fu_393_p3 <= (i_1_reg_355 & ap_const_lv2_0);
    lshr_ln1_fu_441_p4 <= RoundKey_1_q0(7 downto 2);
    lshr_ln207_1_fu_648_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln207_4_fu_638_p1(31-1 downto 0)))));
    lshr_ln207_fu_642_p2 <= std_logic_vector(shift_right(unsigned(select_ln207_1_fu_612_p3),to_integer(unsigned('0' & zext_ln207_3_fu_634_p1(31-1 downto 0)))));
    lshr_ln208_1_fu_763_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln208_4_fu_753_p1(31-1 downto 0)))));
    lshr_ln208_fu_757_p2 <= std_logic_vector(shift_right(unsigned(select_ln208_1_fu_727_p3),to_integer(unsigned('0' & zext_ln208_3_fu_749_p1(31-1 downto 0)))));
    lshr_ln209_1_fu_878_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln209_4_fu_868_p1(31-1 downto 0)))));
    lshr_ln209_fu_872_p2 <= std_logic_vector(shift_right(unsigned(select_ln209_1_fu_842_p3),to_integer(unsigned('0' & zext_ln209_3_fu_864_p1(31-1 downto 0)))));
    lshr_ln210_1_fu_993_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln210_4_fu_983_p1(31-1 downto 0)))));
    lshr_ln210_fu_987_p2 <= std_logic_vector(shift_right(unsigned(select_ln210_1_fu_957_p3),to_integer(unsigned('0' & zext_ln210_3_fu_979_p1(31-1 downto 0)))));
    lshr_ln2_fu_460_p4 <= RoundKey_2_q0(7 downto 2);
    lshr_ln3_fu_479_p4 <= RoundKey_3_q0(7 downto 2);
    lshr_ln4_fu_498_p4 <= RoundKey_0_q0(7 downto 2);
    lshr_ln5_fu_517_p4 <= i_1_reg_355(5 downto 2);
    lshr_ln_fu_407_p4 <= add_ln181_fu_401_p2(7 downto 2);
    sbox_address0 <= zext_ln207_fu_451_p1(6 - 1 downto 0);
    sbox_address1 <= zext_ln208_fu_470_p1(6 - 1 downto 0);
    sbox_address2 <= zext_ln209_fu_489_p1(6 - 1 downto 0);
    sbox_address3 <= zext_ln210_fu_508_p1(6 - 1 downto 0);

    sbox_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce2_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_ce2 <= ap_const_logic_1;
        else 
            sbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce3_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sbox_ce3 <= ap_const_logic_1;
        else 
            sbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln207_1_fu_612_p3 <= 
        tmp_fu_576_p4 when (icmp_ln207_fu_562_p2(0) = '1') else 
        sbox_q0;
    select_ln207_2_fu_620_p3 <= 
        xor_ln207_fu_592_p2 when (icmp_ln207_fu_562_p2(0) = '1') else 
        zext_ln207_1_fu_568_p1;
    select_ln207_fu_604_p3 <= 
        sub_ln207_fu_586_p2 when (icmp_ln207_fu_562_p2(0) = '1') else 
        sub_ln207_1_fu_598_p2;
    select_ln208_1_fu_727_p3 <= 
        tmp_1_fu_691_p4 when (icmp_ln208_fu_677_p2(0) = '1') else 
        sbox_q1;
    select_ln208_2_fu_735_p3 <= 
        xor_ln208_fu_707_p2 when (icmp_ln208_fu_677_p2(0) = '1') else 
        zext_ln208_1_fu_683_p1;
    select_ln208_fu_719_p3 <= 
        sub_ln208_fu_701_p2 when (icmp_ln208_fu_677_p2(0) = '1') else 
        sub_ln208_1_fu_713_p2;
    select_ln209_1_fu_842_p3 <= 
        tmp_3_fu_806_p4 when (icmp_ln209_fu_792_p2(0) = '1') else 
        sbox_q2;
    select_ln209_2_fu_850_p3 <= 
        xor_ln209_fu_822_p2 when (icmp_ln209_fu_792_p2(0) = '1') else 
        zext_ln209_1_fu_798_p1;
    select_ln209_fu_834_p3 <= 
        sub_ln209_fu_816_p2 when (icmp_ln209_fu_792_p2(0) = '1') else 
        sub_ln209_1_fu_828_p2;
    select_ln210_1_fu_957_p3 <= 
        tmp_5_fu_921_p4 when (icmp_ln210_fu_907_p2(0) = '1') else 
        sbox_q3;
    select_ln210_2_fu_965_p3 <= 
        xor_ln210_fu_937_p2 when (icmp_ln210_fu_907_p2(0) = '1') else 
        zext_ln210_1_fu_913_p1;
    select_ln210_fu_949_p3 <= 
        sub_ln210_fu_931_p2 when (icmp_ln210_fu_907_p2(0) = '1') else 
        sub_ln210_1_fu_943_p2;
    sub_ln207_1_fu_598_p2 <= std_logic_vector(unsigned(zext_ln207_2_fu_572_p1) - unsigned(zext_ln207_1_fu_568_p1));
    sub_ln207_2_fu_628_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln207_fu_604_p3));
    sub_ln207_fu_586_p2 <= std_logic_vector(unsigned(zext_ln207_1_fu_568_p1) - unsigned(zext_ln207_2_fu_572_p1));
    sub_ln208_1_fu_713_p2 <= std_logic_vector(unsigned(zext_ln208_2_fu_687_p1) - unsigned(zext_ln208_1_fu_683_p1));
    sub_ln208_2_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln208_fu_719_p3));
    sub_ln208_fu_701_p2 <= std_logic_vector(unsigned(zext_ln208_1_fu_683_p1) - unsigned(zext_ln208_2_fu_687_p1));
    sub_ln209_1_fu_828_p2 <= std_logic_vector(unsigned(zext_ln209_2_fu_802_p1) - unsigned(zext_ln209_1_fu_798_p1));
    sub_ln209_2_fu_858_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln209_fu_834_p3));
    sub_ln209_fu_816_p2 <= std_logic_vector(unsigned(zext_ln209_1_fu_798_p1) - unsigned(zext_ln209_2_fu_802_p1));
    sub_ln210_1_fu_943_p2 <= std_logic_vector(unsigned(zext_ln210_2_fu_917_p1) - unsigned(zext_ln210_1_fu_913_p1));
    sub_ln210_2_fu_973_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln210_fu_949_p3));
    sub_ln210_fu_931_p2 <= std_logic_vector(unsigned(zext_ln210_1_fu_913_p1) - unsigned(zext_ln210_2_fu_917_p1));
    tempa_0_2_fu_1036_p3 <= 
        tempa_0_fu_1009_p2 when (icmp_ln188_fu_543_p2(0) = '1') else 
        tempa_0_3_reg_1149;
    tempa_0_fu_1009_p2 <= (trunc_ln207_fu_660_p1 xor Rcon_q0);
    tempa_1_1_fu_775_p1 <= and_ln208_fu_769_p2(8 - 1 downto 0);
    tempa_1_2_fu_1029_p3 <= 
        tempa_1_1_fu_775_p1 when (icmp_ln188_fu_543_p2(0) = '1') else 
        tempa_1_reg_1154;
    tempa_2_1_fu_890_p1 <= and_ln209_fu_884_p2(8 - 1 downto 0);
    tempa_2_2_fu_1022_p3 <= 
        tempa_2_1_fu_890_p1 when (icmp_ln188_fu_543_p2(0) = '1') else 
        tempa_2_reg_1159;
    tempa_3_1_fu_1005_p1 <= and_ln210_fu_999_p2(8 - 1 downto 0);
    tempa_3_2_fu_1015_p3 <= 
        tempa_3_1_fu_1005_p1 when (icmp_ln188_fu_543_p2(0) = '1') else 
        tempa_3_reg_1164;
    
    tmp_1_fu_691_p4_proc : process(sbox_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_1_fu_691_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sbox_q1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_1_fu_691_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_1_fu_691_p4_i) := sbox_q1(32-1-tmp_1_fu_691_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_691_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_2_fu_549_p3 <= (empty_17_reg_1174 & ap_const_lv3_0);
    
    tmp_3_fu_806_p4_proc : process(sbox_q2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_3_fu_806_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sbox_q2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_3_fu_806_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_3_fu_806_p4_i) := sbox_q2(32-1-tmp_3_fu_806_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_806_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_4_fu_664_p3 <= (empty_19_reg_1184 & ap_const_lv3_0);
    
    tmp_5_fu_921_p4_proc : process(sbox_q3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_5_fu_921_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sbox_q3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_5_fu_921_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_5_fu_921_p4_i) := sbox_q3(32-1-tmp_5_fu_921_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_5_fu_921_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_6_fu_779_p3 <= (empty_21_reg_1194 & ap_const_lv3_0);
    tmp_8_fu_894_p3 <= (empty_23_reg_1204 & ap_const_lv3_0);
    
    tmp_fu_576_p4_proc : process(sbox_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_fu_576_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sbox_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_fu_576_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_fu_576_p4_i) := sbox_q0(32-1-tmp_fu_576_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_576_p4 <= resvalue(32-1 downto 0);
    end process;

    trunc_ln177_fu_539_p1 <= i_1_reg_355(2 - 1 downto 0);
    trunc_ln207_fu_660_p1 <= and_ln207_fu_654_p2(8 - 1 downto 0);
    xor_ln207_fu_592_p2 <= (zext_ln207_1_fu_568_p1 xor ap_const_lv6_1F);
    xor_ln208_fu_707_p2 <= (zext_ln208_1_fu_683_p1 xor ap_const_lv6_1F);
    xor_ln209_fu_822_p2 <= (zext_ln209_1_fu_798_p1 xor ap_const_lv6_1F);
    xor_ln210_fu_937_p2 <= (zext_ln210_1_fu_913_p1 xor ap_const_lv6_1F);
    xor_ln227_fu_1043_p2 <= (tempa_0_2_fu_1036_p3 xor RoundKey_0_q0);
    xor_ln228_fu_1058_p2 <= (tempa_1_2_fu_1029_p3 xor RoundKey_1_q0);
    xor_ln229_fu_1065_p2 <= (tempa_2_2_fu_1022_p3 xor RoundKey_2_q0);
    xor_ln230_fu_1072_p2 <= (tempa_3_2_fu_1015_p3 xor RoundKey_3_q0);
    zext_ln167_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_344),64));
    zext_ln181_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_407_p4),64));
    zext_ln207_1_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_549_p3),6));
    zext_ln207_2_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_18_fu_556_p2),6));
    zext_ln207_3_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln207_2_fu_620_p3),32));
    zext_ln207_4_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln207_2_fu_628_p2),32));
    zext_ln207_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_441_p4),64));
    zext_ln208_1_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_664_p3),6));
    zext_ln208_2_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_fu_671_p2),6));
    zext_ln208_3_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_2_fu_735_p3),32));
    zext_ln208_4_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln208_2_fu_743_p2),32));
    zext_ln208_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_460_p4),64));
    zext_ln209_1_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_779_p3),6));
    zext_ln209_2_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_22_fu_786_p2),6));
    zext_ln209_3_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln209_2_fu_850_p3),32));
    zext_ln209_4_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln209_2_fu_858_p2),32));
    zext_ln209_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_479_p4),64));
    zext_ln210_1_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_894_p3),6));
    zext_ln210_2_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_24_fu_901_p2),6));
    zext_ln210_3_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln210_2_fu_965_p3),32));
    zext_ln210_4_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln210_2_fu_973_p2),32));
    zext_ln210_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_498_p4),64));
    zext_ln212_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_517_p4),64));
    zext_ln227_1_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_355),64));
    zext_ln227_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln6_reg_1144),64));
end behav;
