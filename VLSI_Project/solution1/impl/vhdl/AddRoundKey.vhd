-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    round : IN STD_LOGIC_VECTOR (5 downto 0);
    state_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_0_ce0 : OUT STD_LOGIC;
    RoundKey_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_1_ce0 : OUT STD_LOGIC;
    RoundKey_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_2_ce0 : OUT STD_LOGIC;
    RoundKey_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_3_ce0 : OUT STD_LOGIC;
    RoundKey_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_4_ce0 : OUT STD_LOGIC;
    RoundKey_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_5_ce0 : OUT STD_LOGIC;
    RoundKey_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_6_ce0 : OUT STD_LOGIC;
    RoundKey_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_7_ce0 : OUT STD_LOGIC;
    RoundKey_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_8_ce0 : OUT STD_LOGIC;
    RoundKey_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_9_ce0 : OUT STD_LOGIC;
    RoundKey_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_10_ce0 : OUT STD_LOGIC;
    RoundKey_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_11_ce0 : OUT STD_LOGIC;
    RoundKey_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_12_ce0 : OUT STD_LOGIC;
    RoundKey_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_13_ce0 : OUT STD_LOGIC;
    RoundKey_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_14_ce0 : OUT STD_LOGIC;
    RoundKey_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    RoundKey_15_ce0 : OUT STD_LOGIC;
    RoundKey_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln251_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_1_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln251_fu_388_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln_fu_392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_fu_424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_1_fu_430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_2_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_3_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_4_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_5_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_6_fu_460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_7_fu_466_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_8_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_9_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_10_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_11_fu_490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_12_fu_496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_13_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_14_fu_508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln251_15_fu_514_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_0_preg <= xor_ln251_fu_424_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_10_preg <= xor_ln251_10_fu_484_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_11_preg <= xor_ln251_11_fu_490_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_12_preg <= xor_ln251_12_fu_496_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_13_preg <= xor_ln251_13_fu_502_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_14_preg <= xor_ln251_14_fu_508_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_15_preg <= xor_ln251_15_fu_514_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_1_preg <= xor_ln251_1_fu_430_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_2_preg <= xor_ln251_2_fu_436_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_3_preg <= xor_ln251_3_fu_442_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_4_preg <= xor_ln251_4_fu_448_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_5_preg <= xor_ln251_5_fu_454_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_6_preg <= xor_ln251_6_fu_460_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_7_preg <= xor_ln251_7_fu_466_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_8_preg <= xor_ln251_8_fu_472_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_9_preg <= xor_ln251_9_fu_478_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    RoundKey_0_address0 <= zext_ln251_fu_400_p1(4 - 1 downto 0);

    RoundKey_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_0_ce0 <= ap_const_logic_1;
        else 
            RoundKey_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_10_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_10_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_10_ce0 <= ap_const_logic_1;
        else 
            RoundKey_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_11_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_11_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_11_ce0 <= ap_const_logic_1;
        else 
            RoundKey_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_12_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_12_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_12_ce0 <= ap_const_logic_1;
        else 
            RoundKey_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_13_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_13_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_13_ce0 <= ap_const_logic_1;
        else 
            RoundKey_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_14_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_14_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_14_ce0 <= ap_const_logic_1;
        else 
            RoundKey_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_15_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_15_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_15_ce0 <= ap_const_logic_1;
        else 
            RoundKey_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_1_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_1_ce0 <= ap_const_logic_1;
        else 
            RoundKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_2_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_2_ce0 <= ap_const_logic_1;
        else 
            RoundKey_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_3_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_3_ce0 <= ap_const_logic_1;
        else 
            RoundKey_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_4_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_4_ce0 <= ap_const_logic_1;
        else 
            RoundKey_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_5_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_5_ce0 <= ap_const_logic_1;
        else 
            RoundKey_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_6_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_6_ce0 <= ap_const_logic_1;
        else 
            RoundKey_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_7_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_7_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_7_ce0 <= ap_const_logic_1;
        else 
            RoundKey_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_8_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_8_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_8_ce0 <= ap_const_logic_1;
        else 
            RoundKey_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_9_address0 <= zext_ln251_1_fu_405_p1(4 - 1 downto 0);

    RoundKey_9_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            RoundKey_9_ce0 <= ap_const_logic_1;
        else 
            RoundKey_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln_fu_392_p3 <= (ap_const_lv4_0 & trunc_ln251_fu_388_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state2, xor_ln251_fu_424_p2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_0 <= xor_ln251_fu_424_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state2, xor_ln251_1_fu_430_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_1 <= xor_ln251_1_fu_430_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(ap_CS_fsm_state2, xor_ln251_10_fu_484_p2, ap_return_10_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_10 <= xor_ln251_10_fu_484_p2;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(ap_CS_fsm_state2, xor_ln251_11_fu_490_p2, ap_return_11_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_11 <= xor_ln251_11_fu_490_p2;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(ap_CS_fsm_state2, xor_ln251_12_fu_496_p2, ap_return_12_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_12 <= xor_ln251_12_fu_496_p2;
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(ap_CS_fsm_state2, xor_ln251_13_fu_502_p2, ap_return_13_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_13 <= xor_ln251_13_fu_502_p2;
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(ap_CS_fsm_state2, xor_ln251_14_fu_508_p2, ap_return_14_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_14 <= xor_ln251_14_fu_508_p2;
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_15_assign_proc : process(ap_CS_fsm_state2, xor_ln251_15_fu_514_p2, ap_return_15_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_15 <= xor_ln251_15_fu_514_p2;
        else 
            ap_return_15 <= ap_return_15_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state2, xor_ln251_2_fu_436_p2, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_2 <= xor_ln251_2_fu_436_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state2, xor_ln251_3_fu_442_p2, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_3 <= xor_ln251_3_fu_442_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state2, xor_ln251_4_fu_448_p2, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_4 <= xor_ln251_4_fu_448_p2;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state2, xor_ln251_5_fu_454_p2, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_5 <= xor_ln251_5_fu_454_p2;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state2, xor_ln251_6_fu_460_p2, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_6 <= xor_ln251_6_fu_460_p2;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state2, xor_ln251_7_fu_466_p2, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_7 <= xor_ln251_7_fu_466_p2;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_CS_fsm_state2, xor_ln251_8_fu_472_p2, ap_return_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_8 <= xor_ln251_8_fu_472_p2;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_CS_fsm_state2, xor_ln251_9_fu_478_p2, ap_return_9_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_9 <= xor_ln251_9_fu_478_p2;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    trunc_ln251_fu_388_p1 <= round(4 - 1 downto 0);
    xor_ln251_10_fu_484_p2 <= (state_2_2_read xor RoundKey_10_q0);
    xor_ln251_11_fu_490_p2 <= (state_2_3_read xor RoundKey_11_q0);
    xor_ln251_12_fu_496_p2 <= (state_3_0_read xor RoundKey_12_q0);
    xor_ln251_13_fu_502_p2 <= (state_3_1_read xor RoundKey_13_q0);
    xor_ln251_14_fu_508_p2 <= (state_3_2_read xor RoundKey_14_q0);
    xor_ln251_15_fu_514_p2 <= (state_3_3_read xor RoundKey_15_q0);
    xor_ln251_1_fu_430_p2 <= (state_0_1_read xor RoundKey_1_q0);
    xor_ln251_2_fu_436_p2 <= (state_0_2_read xor RoundKey_2_q0);
    xor_ln251_3_fu_442_p2 <= (state_0_3_read xor RoundKey_3_q0);
    xor_ln251_4_fu_448_p2 <= (state_1_0_read xor RoundKey_4_q0);
    xor_ln251_5_fu_454_p2 <= (state_1_1_read xor RoundKey_5_q0);
    xor_ln251_6_fu_460_p2 <= (state_1_2_read xor RoundKey_6_q0);
    xor_ln251_7_fu_466_p2 <= (state_1_3_read xor RoundKey_7_q0);
    xor_ln251_8_fu_472_p2 <= (state_2_0_read xor RoundKey_8_q0);
    xor_ln251_9_fu_478_p2 <= (state_2_1_read xor RoundKey_9_q0);
    xor_ln251_fu_424_p2 <= (state_0_0_read xor RoundKey_0_q0);
    zext_ln251_1_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_392_p3),64));
    zext_ln251_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln251_fu_388_p1),64));
end behav;
