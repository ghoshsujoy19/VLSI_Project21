-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Multiply is
port (
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (7 downto 0);
    y : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Multiply is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal trunc_ln349_fu_40_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln349_fu_44_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_72_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln309_fu_80_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln309_fu_66_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_58_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln309_fu_88_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln349_1_fu_94_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_122_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln309_1_fu_130_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln309_1_fu_116_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_108_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln309_1_fu_138_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln349_2_fu_144_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_172_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln309_2_fu_180_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln309_2_fu_166_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln309_2_fu_188_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln349_3_fu_194_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln349_1_fu_102_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln349_fu_52_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln349_3_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln349_2_fu_152_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln349_1_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln349_fu_208_p2 : STD_LOGIC_VECTOR (7 downto 0);


begin



    and_ln349_1_fu_102_p2 <= (xor_ln309_fu_88_p2 and select_ln349_1_fu_94_p3);
    and_ln349_2_fu_152_p2 <= (xor_ln309_1_fu_138_p2 and select_ln349_2_fu_144_p3);
    and_ln349_3_fu_202_p2 <= (xor_ln309_2_fu_188_p2 and select_ln349_3_fu_194_p3);
    and_ln349_fu_52_p2 <= (x and select_ln349_fu_44_p3);
    ap_ready <= ap_const_logic_1;
    ap_return <= (xor_ln349_fu_208_p2 xor xor_ln349_1_fu_214_p2);
    select_ln309_1_fu_130_p3 <= 
        ap_const_lv8_1B when (tmp_3_fu_122_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln309_2_fu_180_p3 <= 
        ap_const_lv8_1B when (tmp_5_fu_172_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln309_fu_80_p3 <= 
        ap_const_lv8_1B when (tmp_1_fu_72_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln349_1_fu_94_p3 <= 
        ap_const_lv8_FF when (tmp_fu_58_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln349_2_fu_144_p3 <= 
        ap_const_lv8_FF when (tmp_2_fu_108_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln349_3_fu_194_p3 <= 
        ap_const_lv8_FF when (tmp_4_fu_158_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln349_fu_44_p3 <= 
        ap_const_lv8_FF when (trunc_ln349_fu_40_p1(0) = '1') else 
        ap_const_lv8_0;
    shl_ln309_1_fu_116_p2 <= std_logic_vector(shift_left(unsigned(xor_ln309_fu_88_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln309_2_fu_166_p2 <= std_logic_vector(shift_left(unsigned(xor_ln309_1_fu_138_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln309_fu_66_p2 <= std_logic_vector(shift_left(unsigned(x),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_1_fu_72_p3 <= x(7 downto 7);
    tmp_2_fu_108_p3 <= y(2 downto 2);
    tmp_3_fu_122_p3 <= xor_ln309_fu_88_p2(7 downto 7);
    tmp_4_fu_158_p3 <= y(3 downto 3);
    tmp_5_fu_172_p3 <= xor_ln309_1_fu_138_p2(7 downto 7);
    tmp_fu_58_p3 <= y(1 downto 1);
    trunc_ln349_fu_40_p1 <= y(1 - 1 downto 0);
    xor_ln309_1_fu_138_p2 <= (shl_ln309_1_fu_116_p2 xor select_ln309_1_fu_130_p3);
    xor_ln309_2_fu_188_p2 <= (shl_ln309_2_fu_166_p2 xor select_ln309_2_fu_180_p3);
    xor_ln309_fu_88_p2 <= (shl_ln309_fu_66_p2 xor select_ln309_fu_80_p3);
    xor_ln349_1_fu_214_p2 <= (and_ln349_3_fu_202_p2 xor and_ln349_2_fu_152_p2);
    xor_ln349_fu_208_p2 <= (and_ln349_fu_52_p2 xor and_ln349_1_fu_102_p2);
end behav;
