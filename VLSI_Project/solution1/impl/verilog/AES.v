// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AES,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.430000,HLS_SYN_LAT=100,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1762,HLS_SYN_LUT=10509,HLS_VERSION=2019_2}" *)

module AES (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_RoundKey_0_address0,
        ctx_RoundKey_0_ce0,
        ctx_RoundKey_0_we0,
        ctx_RoundKey_0_d0,
        ctx_RoundKey_0_q0,
        ctx_RoundKey_1_address0,
        ctx_RoundKey_1_ce0,
        ctx_RoundKey_1_we0,
        ctx_RoundKey_1_d0,
        ctx_RoundKey_1_q0,
        ctx_RoundKey_2_address0,
        ctx_RoundKey_2_ce0,
        ctx_RoundKey_2_we0,
        ctx_RoundKey_2_d0,
        ctx_RoundKey_2_q0,
        ctx_RoundKey_3_address0,
        ctx_RoundKey_3_ce0,
        ctx_RoundKey_3_we0,
        ctx_RoundKey_3_d0,
        ctx_RoundKey_3_q0,
        ctx_RoundKey_4_address0,
        ctx_RoundKey_4_ce0,
        ctx_RoundKey_4_we0,
        ctx_RoundKey_4_d0,
        ctx_RoundKey_4_q0,
        ctx_RoundKey_5_address0,
        ctx_RoundKey_5_ce0,
        ctx_RoundKey_5_we0,
        ctx_RoundKey_5_d0,
        ctx_RoundKey_5_q0,
        ctx_RoundKey_6_address0,
        ctx_RoundKey_6_ce0,
        ctx_RoundKey_6_we0,
        ctx_RoundKey_6_d0,
        ctx_RoundKey_6_q0,
        ctx_RoundKey_7_address0,
        ctx_RoundKey_7_ce0,
        ctx_RoundKey_7_we0,
        ctx_RoundKey_7_d0,
        ctx_RoundKey_7_q0,
        ctx_RoundKey_8_address0,
        ctx_RoundKey_8_ce0,
        ctx_RoundKey_8_we0,
        ctx_RoundKey_8_d0,
        ctx_RoundKey_8_q0,
        ctx_RoundKey_9_address0,
        ctx_RoundKey_9_ce0,
        ctx_RoundKey_9_we0,
        ctx_RoundKey_9_d0,
        ctx_RoundKey_9_q0,
        ctx_RoundKey_10_address0,
        ctx_RoundKey_10_ce0,
        ctx_RoundKey_10_we0,
        ctx_RoundKey_10_d0,
        ctx_RoundKey_10_q0,
        ctx_RoundKey_11_address0,
        ctx_RoundKey_11_ce0,
        ctx_RoundKey_11_we0,
        ctx_RoundKey_11_d0,
        ctx_RoundKey_11_q0,
        ctx_RoundKey_12_address0,
        ctx_RoundKey_12_ce0,
        ctx_RoundKey_12_we0,
        ctx_RoundKey_12_d0,
        ctx_RoundKey_12_q0,
        ctx_RoundKey_13_address0,
        ctx_RoundKey_13_ce0,
        ctx_RoundKey_13_we0,
        ctx_RoundKey_13_d0,
        ctx_RoundKey_13_q0,
        ctx_RoundKey_14_address0,
        ctx_RoundKey_14_ce0,
        ctx_RoundKey_14_we0,
        ctx_RoundKey_14_d0,
        ctx_RoundKey_14_q0,
        ctx_RoundKey_15_address0,
        ctx_RoundKey_15_ce0,
        ctx_RoundKey_15_we0,
        ctx_RoundKey_15_d0,
        ctx_RoundKey_15_q0,
        ctx_Iv_address0,
        ctx_Iv_ce0,
        ctx_Iv_we0,
        ctx_Iv_d0,
        ctx_Iv_q0,
        ctx_Iv_address1,
        ctx_Iv_ce1,
        ctx_Iv_we1,
        ctx_Iv_d1,
        ctx_Iv_q1,
        key_0,
        key_1,
        key_2,
        key_3,
        key_4,
        key_5,
        key_6,
        key_7,
        key_8,
        key_9,
        key_10,
        key_11,
        key_12,
        key_13,
        key_14,
        key_15,
        in_0_0_i,
        in_0_0_o,
        in_0_0_o_ap_vld,
        in_0_1_i,
        in_0_1_o,
        in_0_1_o_ap_vld,
        in_0_2_i,
        in_0_2_o,
        in_0_2_o_ap_vld,
        in_0_3_i,
        in_0_3_o,
        in_0_3_o_ap_vld,
        in_1_0_i,
        in_1_0_o,
        in_1_0_o_ap_vld,
        in_1_1_i,
        in_1_1_o,
        in_1_1_o_ap_vld,
        in_1_2_i,
        in_1_2_o,
        in_1_2_o_ap_vld,
        in_1_3_i,
        in_1_3_o,
        in_1_3_o_ap_vld,
        in_2_0_i,
        in_2_0_o,
        in_2_0_o_ap_vld,
        in_2_1_i,
        in_2_1_o,
        in_2_1_o_ap_vld,
        in_2_2_i,
        in_2_2_o,
        in_2_2_o_ap_vld,
        in_2_3_i,
        in_2_3_o,
        in_2_3_o_ap_vld,
        in_3_0_i,
        in_3_0_o,
        in_3_0_o_ap_vld,
        in_3_1_i,
        in_3_1_o,
        in_3_1_o_ap_vld,
        in_3_2_i,
        in_3_2_o,
        in_3_2_o_ap_vld,
        in_3_3_i,
        in_3_3_o,
        in_3_3_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] ctx_RoundKey_0_address0;
output   ctx_RoundKey_0_ce0;
output   ctx_RoundKey_0_we0;
output  [7:0] ctx_RoundKey_0_d0;
input  [7:0] ctx_RoundKey_0_q0;
output  [3:0] ctx_RoundKey_1_address0;
output   ctx_RoundKey_1_ce0;
output   ctx_RoundKey_1_we0;
output  [7:0] ctx_RoundKey_1_d0;
input  [7:0] ctx_RoundKey_1_q0;
output  [3:0] ctx_RoundKey_2_address0;
output   ctx_RoundKey_2_ce0;
output   ctx_RoundKey_2_we0;
output  [7:0] ctx_RoundKey_2_d0;
input  [7:0] ctx_RoundKey_2_q0;
output  [3:0] ctx_RoundKey_3_address0;
output   ctx_RoundKey_3_ce0;
output   ctx_RoundKey_3_we0;
output  [7:0] ctx_RoundKey_3_d0;
input  [7:0] ctx_RoundKey_3_q0;
output  [3:0] ctx_RoundKey_4_address0;
output   ctx_RoundKey_4_ce0;
output   ctx_RoundKey_4_we0;
output  [7:0] ctx_RoundKey_4_d0;
input  [7:0] ctx_RoundKey_4_q0;
output  [3:0] ctx_RoundKey_5_address0;
output   ctx_RoundKey_5_ce0;
output   ctx_RoundKey_5_we0;
output  [7:0] ctx_RoundKey_5_d0;
input  [7:0] ctx_RoundKey_5_q0;
output  [3:0] ctx_RoundKey_6_address0;
output   ctx_RoundKey_6_ce0;
output   ctx_RoundKey_6_we0;
output  [7:0] ctx_RoundKey_6_d0;
input  [7:0] ctx_RoundKey_6_q0;
output  [3:0] ctx_RoundKey_7_address0;
output   ctx_RoundKey_7_ce0;
output   ctx_RoundKey_7_we0;
output  [7:0] ctx_RoundKey_7_d0;
input  [7:0] ctx_RoundKey_7_q0;
output  [3:0] ctx_RoundKey_8_address0;
output   ctx_RoundKey_8_ce0;
output   ctx_RoundKey_8_we0;
output  [7:0] ctx_RoundKey_8_d0;
input  [7:0] ctx_RoundKey_8_q0;
output  [3:0] ctx_RoundKey_9_address0;
output   ctx_RoundKey_9_ce0;
output   ctx_RoundKey_9_we0;
output  [7:0] ctx_RoundKey_9_d0;
input  [7:0] ctx_RoundKey_9_q0;
output  [3:0] ctx_RoundKey_10_address0;
output   ctx_RoundKey_10_ce0;
output   ctx_RoundKey_10_we0;
output  [7:0] ctx_RoundKey_10_d0;
input  [7:0] ctx_RoundKey_10_q0;
output  [3:0] ctx_RoundKey_11_address0;
output   ctx_RoundKey_11_ce0;
output   ctx_RoundKey_11_we0;
output  [7:0] ctx_RoundKey_11_d0;
input  [7:0] ctx_RoundKey_11_q0;
output  [3:0] ctx_RoundKey_12_address0;
output   ctx_RoundKey_12_ce0;
output   ctx_RoundKey_12_we0;
output  [7:0] ctx_RoundKey_12_d0;
input  [7:0] ctx_RoundKey_12_q0;
output  [3:0] ctx_RoundKey_13_address0;
output   ctx_RoundKey_13_ce0;
output   ctx_RoundKey_13_we0;
output  [7:0] ctx_RoundKey_13_d0;
input  [7:0] ctx_RoundKey_13_q0;
output  [3:0] ctx_RoundKey_14_address0;
output   ctx_RoundKey_14_ce0;
output   ctx_RoundKey_14_we0;
output  [7:0] ctx_RoundKey_14_d0;
input  [7:0] ctx_RoundKey_14_q0;
output  [3:0] ctx_RoundKey_15_address0;
output   ctx_RoundKey_15_ce0;
output   ctx_RoundKey_15_we0;
output  [7:0] ctx_RoundKey_15_d0;
input  [7:0] ctx_RoundKey_15_q0;
output  [3:0] ctx_Iv_address0;
output   ctx_Iv_ce0;
output   ctx_Iv_we0;
output  [7:0] ctx_Iv_d0;
input  [7:0] ctx_Iv_q0;
output  [3:0] ctx_Iv_address1;
output   ctx_Iv_ce1;
output   ctx_Iv_we1;
output  [7:0] ctx_Iv_d1;
input  [7:0] ctx_Iv_q1;
input  [7:0] key_0;
input  [7:0] key_1;
input  [7:0] key_2;
input  [7:0] key_3;
input  [7:0] key_4;
input  [7:0] key_5;
input  [7:0] key_6;
input  [7:0] key_7;
input  [7:0] key_8;
input  [7:0] key_9;
input  [7:0] key_10;
input  [7:0] key_11;
input  [7:0] key_12;
input  [7:0] key_13;
input  [7:0] key_14;
input  [7:0] key_15;
input  [7:0] in_0_0_i;
output  [7:0] in_0_0_o;
output   in_0_0_o_ap_vld;
input  [7:0] in_0_1_i;
output  [7:0] in_0_1_o;
output   in_0_1_o_ap_vld;
input  [7:0] in_0_2_i;
output  [7:0] in_0_2_o;
output   in_0_2_o_ap_vld;
input  [7:0] in_0_3_i;
output  [7:0] in_0_3_o;
output   in_0_3_o_ap_vld;
input  [7:0] in_1_0_i;
output  [7:0] in_1_0_o;
output   in_1_0_o_ap_vld;
input  [7:0] in_1_1_i;
output  [7:0] in_1_1_o;
output   in_1_1_o_ap_vld;
input  [7:0] in_1_2_i;
output  [7:0] in_1_2_o;
output   in_1_2_o_ap_vld;
input  [7:0] in_1_3_i;
output  [7:0] in_1_3_o;
output   in_1_3_o_ap_vld;
input  [7:0] in_2_0_i;
output  [7:0] in_2_0_o;
output   in_2_0_o_ap_vld;
input  [7:0] in_2_1_i;
output  [7:0] in_2_1_o;
output   in_2_1_o_ap_vld;
input  [7:0] in_2_2_i;
output  [7:0] in_2_2_o;
output   in_2_2_o_ap_vld;
input  [7:0] in_2_3_i;
output  [7:0] in_2_3_o;
output   in_2_3_o_ap_vld;
input  [7:0] in_3_0_i;
output  [7:0] in_3_0_o;
output   in_3_0_o_ap_vld;
input  [7:0] in_3_1_i;
output  [7:0] in_3_1_o;
output   in_3_1_o_ap_vld;
input  [7:0] in_3_2_i;
output  [7:0] in_3_2_o;
output   in_3_2_o_ap_vld;
input  [7:0] in_3_3_i;
output  [7:0] in_3_3_o;
output   in_3_3_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ctx_RoundKey_0_address0;
reg ctx_RoundKey_0_ce0;
reg ctx_RoundKey_0_we0;
reg[3:0] ctx_RoundKey_1_address0;
reg ctx_RoundKey_1_ce0;
reg ctx_RoundKey_1_we0;
reg[3:0] ctx_RoundKey_2_address0;
reg ctx_RoundKey_2_ce0;
reg ctx_RoundKey_2_we0;
reg[3:0] ctx_RoundKey_3_address0;
reg ctx_RoundKey_3_ce0;
reg ctx_RoundKey_3_we0;
reg[3:0] ctx_RoundKey_4_address0;
reg ctx_RoundKey_4_ce0;
reg ctx_RoundKey_4_we0;
reg[3:0] ctx_RoundKey_5_address0;
reg ctx_RoundKey_5_ce0;
reg ctx_RoundKey_5_we0;
reg[3:0] ctx_RoundKey_6_address0;
reg ctx_RoundKey_6_ce0;
reg ctx_RoundKey_6_we0;
reg[3:0] ctx_RoundKey_7_address0;
reg ctx_RoundKey_7_ce0;
reg ctx_RoundKey_7_we0;
reg[3:0] ctx_RoundKey_8_address0;
reg ctx_RoundKey_8_ce0;
reg ctx_RoundKey_8_we0;
reg[3:0] ctx_RoundKey_9_address0;
reg ctx_RoundKey_9_ce0;
reg ctx_RoundKey_9_we0;
reg[3:0] ctx_RoundKey_10_address0;
reg ctx_RoundKey_10_ce0;
reg ctx_RoundKey_10_we0;
reg[3:0] ctx_RoundKey_11_address0;
reg ctx_RoundKey_11_ce0;
reg ctx_RoundKey_11_we0;
reg[3:0] ctx_RoundKey_12_address0;
reg ctx_RoundKey_12_ce0;
reg ctx_RoundKey_12_we0;
reg[3:0] ctx_RoundKey_13_address0;
reg ctx_RoundKey_13_ce0;
reg ctx_RoundKey_13_we0;
reg[3:0] ctx_RoundKey_14_address0;
reg ctx_RoundKey_14_ce0;
reg ctx_RoundKey_14_we0;
reg[3:0] ctx_RoundKey_15_address0;
reg ctx_RoundKey_15_ce0;
reg ctx_RoundKey_15_we0;
reg in_0_0_o_ap_vld;
reg in_0_1_o_ap_vld;
reg in_0_2_o_ap_vld;
reg in_0_3_o_ap_vld;
reg in_1_0_o_ap_vld;
reg in_1_1_o_ap_vld;
reg in_1_2_o_ap_vld;
reg in_1_3_o_ap_vld;
reg in_2_0_o_ap_vld;
reg in_2_1_o_ap_vld;
reg in_2_2_o_ap_vld;
reg in_2_3_o_ap_vld;
reg in_3_0_o_ap_vld;
reg in_3_1_o_ap_vld;
reg in_3_2_o_ap_vld;
reg in_3_3_o_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    grp_Cipher_fu_450_ap_start;
wire    grp_Cipher_fu_450_ap_done;
wire    grp_Cipher_fu_450_ap_idle;
wire    grp_Cipher_fu_450_ap_ready;
wire   [3:0] grp_Cipher_fu_450_RoundKey_0_address0;
wire    grp_Cipher_fu_450_RoundKey_0_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_1_address0;
wire    grp_Cipher_fu_450_RoundKey_1_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_2_address0;
wire    grp_Cipher_fu_450_RoundKey_2_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_3_address0;
wire    grp_Cipher_fu_450_RoundKey_3_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_4_address0;
wire    grp_Cipher_fu_450_RoundKey_4_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_5_address0;
wire    grp_Cipher_fu_450_RoundKey_5_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_6_address0;
wire    grp_Cipher_fu_450_RoundKey_6_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_7_address0;
wire    grp_Cipher_fu_450_RoundKey_7_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_8_address0;
wire    grp_Cipher_fu_450_RoundKey_8_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_9_address0;
wire    grp_Cipher_fu_450_RoundKey_9_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_10_address0;
wire    grp_Cipher_fu_450_RoundKey_10_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_11_address0;
wire    grp_Cipher_fu_450_RoundKey_11_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_12_address0;
wire    grp_Cipher_fu_450_RoundKey_12_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_13_address0;
wire    grp_Cipher_fu_450_RoundKey_13_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_14_address0;
wire    grp_Cipher_fu_450_RoundKey_14_ce0;
wire   [3:0] grp_Cipher_fu_450_RoundKey_15_address0;
wire    grp_Cipher_fu_450_RoundKey_15_ce0;
wire   [7:0] grp_Cipher_fu_450_ap_return_0;
wire   [7:0] grp_Cipher_fu_450_ap_return_1;
wire   [7:0] grp_Cipher_fu_450_ap_return_2;
wire   [7:0] grp_Cipher_fu_450_ap_return_3;
wire   [7:0] grp_Cipher_fu_450_ap_return_4;
wire   [7:0] grp_Cipher_fu_450_ap_return_5;
wire   [7:0] grp_Cipher_fu_450_ap_return_6;
wire   [7:0] grp_Cipher_fu_450_ap_return_7;
wire   [7:0] grp_Cipher_fu_450_ap_return_8;
wire   [7:0] grp_Cipher_fu_450_ap_return_9;
wire   [7:0] grp_Cipher_fu_450_ap_return_10;
wire   [7:0] grp_Cipher_fu_450_ap_return_11;
wire   [7:0] grp_Cipher_fu_450_ap_return_12;
wire   [7:0] grp_Cipher_fu_450_ap_return_13;
wire   [7:0] grp_Cipher_fu_450_ap_return_14;
wire   [7:0] grp_Cipher_fu_450_ap_return_15;
wire    grp_KeyExpansion_fu_550_ap_start;
wire    grp_KeyExpansion_fu_550_ap_done;
wire    grp_KeyExpansion_fu_550_ap_idle;
wire    grp_KeyExpansion_fu_550_ap_ready;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_0_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_0_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_0_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_0_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_1_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_1_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_1_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_1_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_2_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_2_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_2_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_2_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_3_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_3_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_3_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_3_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_4_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_4_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_4_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_4_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_5_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_5_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_5_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_5_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_6_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_6_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_6_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_6_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_7_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_7_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_7_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_7_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_8_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_8_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_8_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_8_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_9_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_9_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_9_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_9_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_10_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_10_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_10_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_10_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_11_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_11_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_11_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_11_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_12_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_12_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_12_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_12_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_13_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_13_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_13_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_13_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_14_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_14_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_14_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_14_d0;
wire   [3:0] grp_KeyExpansion_fu_550_RoundKey_15_address0;
wire    grp_KeyExpansion_fu_550_RoundKey_15_ce0;
wire    grp_KeyExpansion_fu_550_RoundKey_15_we0;
wire   [7:0] grp_KeyExpansion_fu_550_RoundKey_15_d0;
reg    grp_Cipher_fu_450_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    grp_KeyExpansion_fu_550_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_Cipher_fu_450_ap_start_reg = 1'b0;
#0 grp_KeyExpansion_fu_550_ap_start_reg = 1'b0;
end

Cipher grp_Cipher_fu_450(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Cipher_fu_450_ap_start),
    .ap_done(grp_Cipher_fu_450_ap_done),
    .ap_idle(grp_Cipher_fu_450_ap_idle),
    .ap_ready(grp_Cipher_fu_450_ap_ready),
    .state_0_0_read(in_0_0_i),
    .state_0_1_read(in_0_1_i),
    .state_0_2_read(in_0_2_i),
    .state_0_3_read(in_0_3_i),
    .state_1_0_read(in_1_0_i),
    .state_1_1_read(in_1_1_i),
    .state_1_2_read(in_1_2_i),
    .state_1_3_read(in_1_3_i),
    .state_2_0_read(in_2_0_i),
    .state_2_1_read(in_2_1_i),
    .state_2_2_read(in_2_2_i),
    .state_2_3_read(in_2_3_i),
    .state_3_0_read(in_3_0_i),
    .state_3_1_read(in_3_1_i),
    .state_3_2_read(in_3_2_i),
    .state_3_3_read(in_3_3_i),
    .RoundKey_0_address0(grp_Cipher_fu_450_RoundKey_0_address0),
    .RoundKey_0_ce0(grp_Cipher_fu_450_RoundKey_0_ce0),
    .RoundKey_0_q0(ctx_RoundKey_0_q0),
    .RoundKey_1_address0(grp_Cipher_fu_450_RoundKey_1_address0),
    .RoundKey_1_ce0(grp_Cipher_fu_450_RoundKey_1_ce0),
    .RoundKey_1_q0(ctx_RoundKey_1_q0),
    .RoundKey_2_address0(grp_Cipher_fu_450_RoundKey_2_address0),
    .RoundKey_2_ce0(grp_Cipher_fu_450_RoundKey_2_ce0),
    .RoundKey_2_q0(ctx_RoundKey_2_q0),
    .RoundKey_3_address0(grp_Cipher_fu_450_RoundKey_3_address0),
    .RoundKey_3_ce0(grp_Cipher_fu_450_RoundKey_3_ce0),
    .RoundKey_3_q0(ctx_RoundKey_3_q0),
    .RoundKey_4_address0(grp_Cipher_fu_450_RoundKey_4_address0),
    .RoundKey_4_ce0(grp_Cipher_fu_450_RoundKey_4_ce0),
    .RoundKey_4_q0(ctx_RoundKey_4_q0),
    .RoundKey_5_address0(grp_Cipher_fu_450_RoundKey_5_address0),
    .RoundKey_5_ce0(grp_Cipher_fu_450_RoundKey_5_ce0),
    .RoundKey_5_q0(ctx_RoundKey_5_q0),
    .RoundKey_6_address0(grp_Cipher_fu_450_RoundKey_6_address0),
    .RoundKey_6_ce0(grp_Cipher_fu_450_RoundKey_6_ce0),
    .RoundKey_6_q0(ctx_RoundKey_6_q0),
    .RoundKey_7_address0(grp_Cipher_fu_450_RoundKey_7_address0),
    .RoundKey_7_ce0(grp_Cipher_fu_450_RoundKey_7_ce0),
    .RoundKey_7_q0(ctx_RoundKey_7_q0),
    .RoundKey_8_address0(grp_Cipher_fu_450_RoundKey_8_address0),
    .RoundKey_8_ce0(grp_Cipher_fu_450_RoundKey_8_ce0),
    .RoundKey_8_q0(ctx_RoundKey_8_q0),
    .RoundKey_9_address0(grp_Cipher_fu_450_RoundKey_9_address0),
    .RoundKey_9_ce0(grp_Cipher_fu_450_RoundKey_9_ce0),
    .RoundKey_9_q0(ctx_RoundKey_9_q0),
    .RoundKey_10_address0(grp_Cipher_fu_450_RoundKey_10_address0),
    .RoundKey_10_ce0(grp_Cipher_fu_450_RoundKey_10_ce0),
    .RoundKey_10_q0(ctx_RoundKey_10_q0),
    .RoundKey_11_address0(grp_Cipher_fu_450_RoundKey_11_address0),
    .RoundKey_11_ce0(grp_Cipher_fu_450_RoundKey_11_ce0),
    .RoundKey_11_q0(ctx_RoundKey_11_q0),
    .RoundKey_12_address0(grp_Cipher_fu_450_RoundKey_12_address0),
    .RoundKey_12_ce0(grp_Cipher_fu_450_RoundKey_12_ce0),
    .RoundKey_12_q0(ctx_RoundKey_12_q0),
    .RoundKey_13_address0(grp_Cipher_fu_450_RoundKey_13_address0),
    .RoundKey_13_ce0(grp_Cipher_fu_450_RoundKey_13_ce0),
    .RoundKey_13_q0(ctx_RoundKey_13_q0),
    .RoundKey_14_address0(grp_Cipher_fu_450_RoundKey_14_address0),
    .RoundKey_14_ce0(grp_Cipher_fu_450_RoundKey_14_ce0),
    .RoundKey_14_q0(ctx_RoundKey_14_q0),
    .RoundKey_15_address0(grp_Cipher_fu_450_RoundKey_15_address0),
    .RoundKey_15_ce0(grp_Cipher_fu_450_RoundKey_15_ce0),
    .RoundKey_15_q0(ctx_RoundKey_15_q0),
    .ap_return_0(grp_Cipher_fu_450_ap_return_0),
    .ap_return_1(grp_Cipher_fu_450_ap_return_1),
    .ap_return_2(grp_Cipher_fu_450_ap_return_2),
    .ap_return_3(grp_Cipher_fu_450_ap_return_3),
    .ap_return_4(grp_Cipher_fu_450_ap_return_4),
    .ap_return_5(grp_Cipher_fu_450_ap_return_5),
    .ap_return_6(grp_Cipher_fu_450_ap_return_6),
    .ap_return_7(grp_Cipher_fu_450_ap_return_7),
    .ap_return_8(grp_Cipher_fu_450_ap_return_8),
    .ap_return_9(grp_Cipher_fu_450_ap_return_9),
    .ap_return_10(grp_Cipher_fu_450_ap_return_10),
    .ap_return_11(grp_Cipher_fu_450_ap_return_11),
    .ap_return_12(grp_Cipher_fu_450_ap_return_12),
    .ap_return_13(grp_Cipher_fu_450_ap_return_13),
    .ap_return_14(grp_Cipher_fu_450_ap_return_14),
    .ap_return_15(grp_Cipher_fu_450_ap_return_15)
);

KeyExpansion grp_KeyExpansion_fu_550(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_550_ap_start),
    .ap_done(grp_KeyExpansion_fu_550_ap_done),
    .ap_idle(grp_KeyExpansion_fu_550_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_550_ap_ready),
    .RoundKey_0_address0(grp_KeyExpansion_fu_550_RoundKey_0_address0),
    .RoundKey_0_ce0(grp_KeyExpansion_fu_550_RoundKey_0_ce0),
    .RoundKey_0_we0(grp_KeyExpansion_fu_550_RoundKey_0_we0),
    .RoundKey_0_d0(grp_KeyExpansion_fu_550_RoundKey_0_d0),
    .RoundKey_0_q0(ctx_RoundKey_0_q0),
    .RoundKey_1_address0(grp_KeyExpansion_fu_550_RoundKey_1_address0),
    .RoundKey_1_ce0(grp_KeyExpansion_fu_550_RoundKey_1_ce0),
    .RoundKey_1_we0(grp_KeyExpansion_fu_550_RoundKey_1_we0),
    .RoundKey_1_d0(grp_KeyExpansion_fu_550_RoundKey_1_d0),
    .RoundKey_1_q0(ctx_RoundKey_1_q0),
    .RoundKey_2_address0(grp_KeyExpansion_fu_550_RoundKey_2_address0),
    .RoundKey_2_ce0(grp_KeyExpansion_fu_550_RoundKey_2_ce0),
    .RoundKey_2_we0(grp_KeyExpansion_fu_550_RoundKey_2_we0),
    .RoundKey_2_d0(grp_KeyExpansion_fu_550_RoundKey_2_d0),
    .RoundKey_2_q0(ctx_RoundKey_2_q0),
    .RoundKey_3_address0(grp_KeyExpansion_fu_550_RoundKey_3_address0),
    .RoundKey_3_ce0(grp_KeyExpansion_fu_550_RoundKey_3_ce0),
    .RoundKey_3_we0(grp_KeyExpansion_fu_550_RoundKey_3_we0),
    .RoundKey_3_d0(grp_KeyExpansion_fu_550_RoundKey_3_d0),
    .RoundKey_3_q0(ctx_RoundKey_3_q0),
    .RoundKey_4_address0(grp_KeyExpansion_fu_550_RoundKey_4_address0),
    .RoundKey_4_ce0(grp_KeyExpansion_fu_550_RoundKey_4_ce0),
    .RoundKey_4_we0(grp_KeyExpansion_fu_550_RoundKey_4_we0),
    .RoundKey_4_d0(grp_KeyExpansion_fu_550_RoundKey_4_d0),
    .RoundKey_4_q0(ctx_RoundKey_4_q0),
    .RoundKey_5_address0(grp_KeyExpansion_fu_550_RoundKey_5_address0),
    .RoundKey_5_ce0(grp_KeyExpansion_fu_550_RoundKey_5_ce0),
    .RoundKey_5_we0(grp_KeyExpansion_fu_550_RoundKey_5_we0),
    .RoundKey_5_d0(grp_KeyExpansion_fu_550_RoundKey_5_d0),
    .RoundKey_5_q0(ctx_RoundKey_5_q0),
    .RoundKey_6_address0(grp_KeyExpansion_fu_550_RoundKey_6_address0),
    .RoundKey_6_ce0(grp_KeyExpansion_fu_550_RoundKey_6_ce0),
    .RoundKey_6_we0(grp_KeyExpansion_fu_550_RoundKey_6_we0),
    .RoundKey_6_d0(grp_KeyExpansion_fu_550_RoundKey_6_d0),
    .RoundKey_6_q0(ctx_RoundKey_6_q0),
    .RoundKey_7_address0(grp_KeyExpansion_fu_550_RoundKey_7_address0),
    .RoundKey_7_ce0(grp_KeyExpansion_fu_550_RoundKey_7_ce0),
    .RoundKey_7_we0(grp_KeyExpansion_fu_550_RoundKey_7_we0),
    .RoundKey_7_d0(grp_KeyExpansion_fu_550_RoundKey_7_d0),
    .RoundKey_7_q0(ctx_RoundKey_7_q0),
    .RoundKey_8_address0(grp_KeyExpansion_fu_550_RoundKey_8_address0),
    .RoundKey_8_ce0(grp_KeyExpansion_fu_550_RoundKey_8_ce0),
    .RoundKey_8_we0(grp_KeyExpansion_fu_550_RoundKey_8_we0),
    .RoundKey_8_d0(grp_KeyExpansion_fu_550_RoundKey_8_d0),
    .RoundKey_8_q0(ctx_RoundKey_8_q0),
    .RoundKey_9_address0(grp_KeyExpansion_fu_550_RoundKey_9_address0),
    .RoundKey_9_ce0(grp_KeyExpansion_fu_550_RoundKey_9_ce0),
    .RoundKey_9_we0(grp_KeyExpansion_fu_550_RoundKey_9_we0),
    .RoundKey_9_d0(grp_KeyExpansion_fu_550_RoundKey_9_d0),
    .RoundKey_9_q0(ctx_RoundKey_9_q0),
    .RoundKey_10_address0(grp_KeyExpansion_fu_550_RoundKey_10_address0),
    .RoundKey_10_ce0(grp_KeyExpansion_fu_550_RoundKey_10_ce0),
    .RoundKey_10_we0(grp_KeyExpansion_fu_550_RoundKey_10_we0),
    .RoundKey_10_d0(grp_KeyExpansion_fu_550_RoundKey_10_d0),
    .RoundKey_10_q0(ctx_RoundKey_10_q0),
    .RoundKey_11_address0(grp_KeyExpansion_fu_550_RoundKey_11_address0),
    .RoundKey_11_ce0(grp_KeyExpansion_fu_550_RoundKey_11_ce0),
    .RoundKey_11_we0(grp_KeyExpansion_fu_550_RoundKey_11_we0),
    .RoundKey_11_d0(grp_KeyExpansion_fu_550_RoundKey_11_d0),
    .RoundKey_11_q0(ctx_RoundKey_11_q0),
    .RoundKey_12_address0(grp_KeyExpansion_fu_550_RoundKey_12_address0),
    .RoundKey_12_ce0(grp_KeyExpansion_fu_550_RoundKey_12_ce0),
    .RoundKey_12_we0(grp_KeyExpansion_fu_550_RoundKey_12_we0),
    .RoundKey_12_d0(grp_KeyExpansion_fu_550_RoundKey_12_d0),
    .RoundKey_12_q0(ctx_RoundKey_12_q0),
    .RoundKey_13_address0(grp_KeyExpansion_fu_550_RoundKey_13_address0),
    .RoundKey_13_ce0(grp_KeyExpansion_fu_550_RoundKey_13_ce0),
    .RoundKey_13_we0(grp_KeyExpansion_fu_550_RoundKey_13_we0),
    .RoundKey_13_d0(grp_KeyExpansion_fu_550_RoundKey_13_d0),
    .RoundKey_13_q0(ctx_RoundKey_13_q0),
    .RoundKey_14_address0(grp_KeyExpansion_fu_550_RoundKey_14_address0),
    .RoundKey_14_ce0(grp_KeyExpansion_fu_550_RoundKey_14_ce0),
    .RoundKey_14_we0(grp_KeyExpansion_fu_550_RoundKey_14_we0),
    .RoundKey_14_d0(grp_KeyExpansion_fu_550_RoundKey_14_d0),
    .RoundKey_14_q0(ctx_RoundKey_14_q0),
    .RoundKey_15_address0(grp_KeyExpansion_fu_550_RoundKey_15_address0),
    .RoundKey_15_ce0(grp_KeyExpansion_fu_550_RoundKey_15_ce0),
    .RoundKey_15_we0(grp_KeyExpansion_fu_550_RoundKey_15_we0),
    .RoundKey_15_d0(grp_KeyExpansion_fu_550_RoundKey_15_d0),
    .RoundKey_15_q0(ctx_RoundKey_15_q0),
    .Key_0_read(key_0),
    .Key_1_read(key_1),
    .Key_2_read(key_2),
    .Key_3_read(key_3),
    .Key_4_read(key_4),
    .Key_5_read(key_5),
    .Key_6_read(key_6),
    .Key_7_read(key_7),
    .Key_8_read(key_8),
    .Key_9_read(key_9),
    .Key_10_read(key_10),
    .Key_11_read(key_11),
    .Key_12_read(key_12),
    .Key_13_read(key_13),
    .Key_14_read(key_14),
    .Key_15_read(key_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Cipher_fu_450_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_Cipher_fu_450_ap_start_reg <= 1'b1;
        end else if ((grp_Cipher_fu_450_ap_ready == 1'b1)) begin
            grp_Cipher_fu_450_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeyExpansion_fu_550_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_KeyExpansion_fu_550_ap_start_reg <= 1'b1;
        end else if ((grp_KeyExpansion_fu_550_ap_ready == 1'b1)) begin
            grp_KeyExpansion_fu_550_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_0_address0 = grp_KeyExpansion_fu_550_RoundKey_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_0_address0 = grp_Cipher_fu_450_RoundKey_0_address0;
    end else begin
        ctx_RoundKey_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_0_ce0 = grp_KeyExpansion_fu_550_RoundKey_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_0_ce0 = grp_Cipher_fu_450_RoundKey_0_ce0;
    end else begin
        ctx_RoundKey_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_0_we0 = grp_KeyExpansion_fu_550_RoundKey_0_we0;
    end else begin
        ctx_RoundKey_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_10_address0 = grp_KeyExpansion_fu_550_RoundKey_10_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_10_address0 = grp_Cipher_fu_450_RoundKey_10_address0;
    end else begin
        ctx_RoundKey_10_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_10_ce0 = grp_KeyExpansion_fu_550_RoundKey_10_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_10_ce0 = grp_Cipher_fu_450_RoundKey_10_ce0;
    end else begin
        ctx_RoundKey_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_10_we0 = grp_KeyExpansion_fu_550_RoundKey_10_we0;
    end else begin
        ctx_RoundKey_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_11_address0 = grp_KeyExpansion_fu_550_RoundKey_11_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_11_address0 = grp_Cipher_fu_450_RoundKey_11_address0;
    end else begin
        ctx_RoundKey_11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_11_ce0 = grp_KeyExpansion_fu_550_RoundKey_11_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_11_ce0 = grp_Cipher_fu_450_RoundKey_11_ce0;
    end else begin
        ctx_RoundKey_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_11_we0 = grp_KeyExpansion_fu_550_RoundKey_11_we0;
    end else begin
        ctx_RoundKey_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_12_address0 = grp_KeyExpansion_fu_550_RoundKey_12_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_12_address0 = grp_Cipher_fu_450_RoundKey_12_address0;
    end else begin
        ctx_RoundKey_12_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_12_ce0 = grp_KeyExpansion_fu_550_RoundKey_12_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_12_ce0 = grp_Cipher_fu_450_RoundKey_12_ce0;
    end else begin
        ctx_RoundKey_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_12_we0 = grp_KeyExpansion_fu_550_RoundKey_12_we0;
    end else begin
        ctx_RoundKey_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_13_address0 = grp_KeyExpansion_fu_550_RoundKey_13_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_13_address0 = grp_Cipher_fu_450_RoundKey_13_address0;
    end else begin
        ctx_RoundKey_13_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_13_ce0 = grp_KeyExpansion_fu_550_RoundKey_13_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_13_ce0 = grp_Cipher_fu_450_RoundKey_13_ce0;
    end else begin
        ctx_RoundKey_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_13_we0 = grp_KeyExpansion_fu_550_RoundKey_13_we0;
    end else begin
        ctx_RoundKey_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_14_address0 = grp_KeyExpansion_fu_550_RoundKey_14_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_14_address0 = grp_Cipher_fu_450_RoundKey_14_address0;
    end else begin
        ctx_RoundKey_14_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_14_ce0 = grp_KeyExpansion_fu_550_RoundKey_14_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_14_ce0 = grp_Cipher_fu_450_RoundKey_14_ce0;
    end else begin
        ctx_RoundKey_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_14_we0 = grp_KeyExpansion_fu_550_RoundKey_14_we0;
    end else begin
        ctx_RoundKey_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_15_address0 = grp_KeyExpansion_fu_550_RoundKey_15_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_15_address0 = grp_Cipher_fu_450_RoundKey_15_address0;
    end else begin
        ctx_RoundKey_15_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_15_ce0 = grp_KeyExpansion_fu_550_RoundKey_15_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_15_ce0 = grp_Cipher_fu_450_RoundKey_15_ce0;
    end else begin
        ctx_RoundKey_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_15_we0 = grp_KeyExpansion_fu_550_RoundKey_15_we0;
    end else begin
        ctx_RoundKey_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_1_address0 = grp_KeyExpansion_fu_550_RoundKey_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_1_address0 = grp_Cipher_fu_450_RoundKey_1_address0;
    end else begin
        ctx_RoundKey_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_1_ce0 = grp_KeyExpansion_fu_550_RoundKey_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_1_ce0 = grp_Cipher_fu_450_RoundKey_1_ce0;
    end else begin
        ctx_RoundKey_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_1_we0 = grp_KeyExpansion_fu_550_RoundKey_1_we0;
    end else begin
        ctx_RoundKey_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_2_address0 = grp_KeyExpansion_fu_550_RoundKey_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_2_address0 = grp_Cipher_fu_450_RoundKey_2_address0;
    end else begin
        ctx_RoundKey_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_2_ce0 = grp_KeyExpansion_fu_550_RoundKey_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_2_ce0 = grp_Cipher_fu_450_RoundKey_2_ce0;
    end else begin
        ctx_RoundKey_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_2_we0 = grp_KeyExpansion_fu_550_RoundKey_2_we0;
    end else begin
        ctx_RoundKey_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_3_address0 = grp_KeyExpansion_fu_550_RoundKey_3_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_3_address0 = grp_Cipher_fu_450_RoundKey_3_address0;
    end else begin
        ctx_RoundKey_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_3_ce0 = grp_KeyExpansion_fu_550_RoundKey_3_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_3_ce0 = grp_Cipher_fu_450_RoundKey_3_ce0;
    end else begin
        ctx_RoundKey_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_3_we0 = grp_KeyExpansion_fu_550_RoundKey_3_we0;
    end else begin
        ctx_RoundKey_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_4_address0 = grp_KeyExpansion_fu_550_RoundKey_4_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_4_address0 = grp_Cipher_fu_450_RoundKey_4_address0;
    end else begin
        ctx_RoundKey_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_4_ce0 = grp_KeyExpansion_fu_550_RoundKey_4_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_4_ce0 = grp_Cipher_fu_450_RoundKey_4_ce0;
    end else begin
        ctx_RoundKey_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_4_we0 = grp_KeyExpansion_fu_550_RoundKey_4_we0;
    end else begin
        ctx_RoundKey_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_5_address0 = grp_KeyExpansion_fu_550_RoundKey_5_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_5_address0 = grp_Cipher_fu_450_RoundKey_5_address0;
    end else begin
        ctx_RoundKey_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_5_ce0 = grp_KeyExpansion_fu_550_RoundKey_5_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_5_ce0 = grp_Cipher_fu_450_RoundKey_5_ce0;
    end else begin
        ctx_RoundKey_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_5_we0 = grp_KeyExpansion_fu_550_RoundKey_5_we0;
    end else begin
        ctx_RoundKey_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_6_address0 = grp_KeyExpansion_fu_550_RoundKey_6_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_6_address0 = grp_Cipher_fu_450_RoundKey_6_address0;
    end else begin
        ctx_RoundKey_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_6_ce0 = grp_KeyExpansion_fu_550_RoundKey_6_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_6_ce0 = grp_Cipher_fu_450_RoundKey_6_ce0;
    end else begin
        ctx_RoundKey_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_6_we0 = grp_KeyExpansion_fu_550_RoundKey_6_we0;
    end else begin
        ctx_RoundKey_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_7_address0 = grp_KeyExpansion_fu_550_RoundKey_7_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_7_address0 = grp_Cipher_fu_450_RoundKey_7_address0;
    end else begin
        ctx_RoundKey_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_7_ce0 = grp_KeyExpansion_fu_550_RoundKey_7_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_7_ce0 = grp_Cipher_fu_450_RoundKey_7_ce0;
    end else begin
        ctx_RoundKey_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_7_we0 = grp_KeyExpansion_fu_550_RoundKey_7_we0;
    end else begin
        ctx_RoundKey_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_8_address0 = grp_KeyExpansion_fu_550_RoundKey_8_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_8_address0 = grp_Cipher_fu_450_RoundKey_8_address0;
    end else begin
        ctx_RoundKey_8_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_8_ce0 = grp_KeyExpansion_fu_550_RoundKey_8_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_8_ce0 = grp_Cipher_fu_450_RoundKey_8_ce0;
    end else begin
        ctx_RoundKey_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_8_we0 = grp_KeyExpansion_fu_550_RoundKey_8_we0;
    end else begin
        ctx_RoundKey_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_9_address0 = grp_KeyExpansion_fu_550_RoundKey_9_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_9_address0 = grp_Cipher_fu_450_RoundKey_9_address0;
    end else begin
        ctx_RoundKey_9_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_9_ce0 = grp_KeyExpansion_fu_550_RoundKey_9_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_9_ce0 = grp_Cipher_fu_450_RoundKey_9_ce0;
    end else begin
        ctx_RoundKey_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_9_we0 = grp_KeyExpansion_fu_550_RoundKey_9_we0;
    end else begin
        ctx_RoundKey_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_0_0_o_ap_vld = 1'b1;
    end else begin
        in_0_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_0_1_o_ap_vld = 1'b1;
    end else begin
        in_0_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_0_2_o_ap_vld = 1'b1;
    end else begin
        in_0_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_0_3_o_ap_vld = 1'b1;
    end else begin
        in_0_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_1_0_o_ap_vld = 1'b1;
    end else begin
        in_1_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_1_1_o_ap_vld = 1'b1;
    end else begin
        in_1_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_1_2_o_ap_vld = 1'b1;
    end else begin
        in_1_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_1_3_o_ap_vld = 1'b1;
    end else begin
        in_1_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_2_0_o_ap_vld = 1'b1;
    end else begin
        in_2_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_2_1_o_ap_vld = 1'b1;
    end else begin
        in_2_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_2_2_o_ap_vld = 1'b1;
    end else begin
        in_2_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_2_3_o_ap_vld = 1'b1;
    end else begin
        in_2_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_3_0_o_ap_vld = 1'b1;
    end else begin
        in_3_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_3_1_o_ap_vld = 1'b1;
    end else begin
        in_3_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_3_2_o_ap_vld = 1'b1;
    end else begin
        in_3_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_3_3_o_ap_vld = 1'b1;
    end else begin
        in_3_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_KeyExpansion_fu_550_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_Cipher_fu_450_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ctx_Iv_address0 = 4'd0;

assign ctx_Iv_address1 = 4'd0;

assign ctx_Iv_ce0 = 1'b0;

assign ctx_Iv_ce1 = 1'b0;

assign ctx_Iv_d0 = 8'd0;

assign ctx_Iv_d1 = 8'd0;

assign ctx_Iv_we0 = 1'b0;

assign ctx_Iv_we1 = 1'b0;

assign ctx_RoundKey_0_d0 = grp_KeyExpansion_fu_550_RoundKey_0_d0;

assign ctx_RoundKey_10_d0 = grp_KeyExpansion_fu_550_RoundKey_10_d0;

assign ctx_RoundKey_11_d0 = grp_KeyExpansion_fu_550_RoundKey_11_d0;

assign ctx_RoundKey_12_d0 = grp_KeyExpansion_fu_550_RoundKey_12_d0;

assign ctx_RoundKey_13_d0 = grp_KeyExpansion_fu_550_RoundKey_13_d0;

assign ctx_RoundKey_14_d0 = grp_KeyExpansion_fu_550_RoundKey_14_d0;

assign ctx_RoundKey_15_d0 = grp_KeyExpansion_fu_550_RoundKey_15_d0;

assign ctx_RoundKey_1_d0 = grp_KeyExpansion_fu_550_RoundKey_1_d0;

assign ctx_RoundKey_2_d0 = grp_KeyExpansion_fu_550_RoundKey_2_d0;

assign ctx_RoundKey_3_d0 = grp_KeyExpansion_fu_550_RoundKey_3_d0;

assign ctx_RoundKey_4_d0 = grp_KeyExpansion_fu_550_RoundKey_4_d0;

assign ctx_RoundKey_5_d0 = grp_KeyExpansion_fu_550_RoundKey_5_d0;

assign ctx_RoundKey_6_d0 = grp_KeyExpansion_fu_550_RoundKey_6_d0;

assign ctx_RoundKey_7_d0 = grp_KeyExpansion_fu_550_RoundKey_7_d0;

assign ctx_RoundKey_8_d0 = grp_KeyExpansion_fu_550_RoundKey_8_d0;

assign ctx_RoundKey_9_d0 = grp_KeyExpansion_fu_550_RoundKey_9_d0;

assign grp_Cipher_fu_450_ap_start = grp_Cipher_fu_450_ap_start_reg;

assign grp_KeyExpansion_fu_550_ap_start = grp_KeyExpansion_fu_550_ap_start_reg;

assign in_0_0_o = grp_Cipher_fu_450_ap_return_0;

assign in_0_1_o = grp_Cipher_fu_450_ap_return_1;

assign in_0_2_o = grp_Cipher_fu_450_ap_return_2;

assign in_0_3_o = grp_Cipher_fu_450_ap_return_3;

assign in_1_0_o = grp_Cipher_fu_450_ap_return_4;

assign in_1_1_o = grp_Cipher_fu_450_ap_return_5;

assign in_1_2_o = grp_Cipher_fu_450_ap_return_6;

assign in_1_3_o = grp_Cipher_fu_450_ap_return_7;

assign in_2_0_o = grp_Cipher_fu_450_ap_return_8;

assign in_2_1_o = grp_Cipher_fu_450_ap_return_9;

assign in_2_2_o = grp_Cipher_fu_450_ap_return_10;

assign in_2_3_o = grp_Cipher_fu_450_ap_return_11;

assign in_3_0_o = grp_Cipher_fu_450_ap_return_12;

assign in_3_1_o = grp_Cipher_fu_450_ap_return_13;

assign in_3_2_o = grp_Cipher_fu_450_ap_return_14;

assign in_3_3_o = grp_Cipher_fu_450_ap_return_15;

endmodule //AES
